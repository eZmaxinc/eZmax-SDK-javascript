/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.7
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ActivesessionResponseCompoundUser model module.
 * @module eZmaxAPI/model/ActivesessionResponseCompoundUser
 * @version 1.1.7
 */
class ActivesessionResponseCompoundUser {
    /**
     * Constructs a new <code>ActivesessionResponseCompoundUser</code>.
     * An Activesession-&gt;User Object and children to create a complete structure
     * @alias module:eZmaxAPI/model/ActivesessionResponseCompoundUser
     * @param pkiUserID {Number} The unique ID of the User
     * @param sAvatarUrl {String} The url of the picture used as avatar
     * @param sUserFirstname {String} The First name of the user
     * @param sUserLastname {String} The Last name of the user
     * @param sEmailAddress {String} The email address.
     */
    constructor(pkiUserID, sAvatarUrl, sUserFirstname, sUserLastname, sEmailAddress) { 
        
        ActivesessionResponseCompoundUser.initialize(this, pkiUserID, sAvatarUrl, sUserFirstname, sUserLastname, sEmailAddress);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pkiUserID, sAvatarUrl, sUserFirstname, sUserLastname, sEmailAddress) { 
        obj['pkiUserID'] = pkiUserID;
        obj['sAvatarUrl'] = sAvatarUrl;
        obj['sUserFirstname'] = sUserFirstname;
        obj['sUserLastname'] = sUserLastname;
        obj['sEmailAddress'] = sEmailAddress;
    }

    /**
     * Constructs a <code>ActivesessionResponseCompoundUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/ActivesessionResponseCompoundUser} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/ActivesessionResponseCompoundUser} The populated <code>ActivesessionResponseCompoundUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivesessionResponseCompoundUser();

            if (data.hasOwnProperty('pkiUserID')) {
                obj['pkiUserID'] = ApiClient.convertToType(data['pkiUserID'], 'Number');
            }
            if (data.hasOwnProperty('sAvatarUrl')) {
                obj['sAvatarUrl'] = ApiClient.convertToType(data['sAvatarUrl'], 'String');
            }
            if (data.hasOwnProperty('sUserFirstname')) {
                obj['sUserFirstname'] = ApiClient.convertToType(data['sUserFirstname'], 'String');
            }
            if (data.hasOwnProperty('sUserLastname')) {
                obj['sUserLastname'] = ApiClient.convertToType(data['sUserLastname'], 'String');
            }
            if (data.hasOwnProperty('sEmailAddress')) {
                obj['sEmailAddress'] = ApiClient.convertToType(data['sEmailAddress'], 'String');
            }
        }
        return obj;
    }

/**
     * Returns The unique ID of the User
     * @return {Number}
     */
    getPkiUserID() {
        return this.pkiUserID;
    }

    /**
     * Sets The unique ID of the User
     * @param {Number} pkiUserID The unique ID of the User
     */
    setPkiUserID(pkiUserID) {
        this['pkiUserID'] = pkiUserID;
    }
/**
     * Returns The url of the picture used as avatar
     * @return {String}
     */
    getSAvatarUrl() {
        return this.sAvatarUrl;
    }

    /**
     * Sets The url of the picture used as avatar
     * @param {String} sAvatarUrl The url of the picture used as avatar
     */
    setSAvatarUrl(sAvatarUrl) {
        this['sAvatarUrl'] = sAvatarUrl;
    }
/**
     * Returns The First name of the user
     * @return {String}
     */
    getSUserFirstname() {
        return this.sUserFirstname;
    }

    /**
     * Sets The First name of the user
     * @param {String} sUserFirstname The First name of the user
     */
    setSUserFirstname(sUserFirstname) {
        this['sUserFirstname'] = sUserFirstname;
    }
/**
     * Returns The Last name of the user
     * @return {String}
     */
    getSUserLastname() {
        return this.sUserLastname;
    }

    /**
     * Sets The Last name of the user
     * @param {String} sUserLastname The Last name of the user
     */
    setSUserLastname(sUserLastname) {
        this['sUserLastname'] = sUserLastname;
    }
/**
     * Returns The email address.
     * @return {String}
     */
    getSEmailAddress() {
        return this.sEmailAddress;
    }

    /**
     * Sets The email address.
     * @param {String} sEmailAddress The email address.
     */
    setSEmailAddress(sEmailAddress) {
        this['sEmailAddress'] = sEmailAddress;
    }

}

/**
 * The unique ID of the User
 * @member {Number} pkiUserID
 */
ActivesessionResponseCompoundUser.prototype['pkiUserID'] = undefined;

/**
 * The url of the picture used as avatar
 * @member {String} sAvatarUrl
 */
ActivesessionResponseCompoundUser.prototype['sAvatarUrl'] = undefined;

/**
 * The First name of the user
 * @member {String} sUserFirstname
 */
ActivesessionResponseCompoundUser.prototype['sUserFirstname'] = undefined;

/**
 * The Last name of the user
 * @member {String} sUserLastname
 */
ActivesessionResponseCompoundUser.prototype['sUserLastname'] = undefined;

/**
 * The email address.
 * @member {String} sEmailAddress
 */
ActivesessionResponseCompoundUser.prototype['sEmailAddress'] = undefined;






export default ActivesessionResponseCompoundUser;

