/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Xxxx model module.
 * @module eZmaxAPI/model/Xxxx
 * @version 1.1.4
 */
class Xxxx {
    /**
     * Constructs a new <code>Xxxx</code>.
     * Test
     * @alias module:eZmaxAPI/model/Xxxx
     * @param foo {Number} 
     * @param bar {Number} 
     */
    constructor(foo, bar) { 
        
        Xxxx.initialize(this, foo, bar);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, foo, bar) { 
        obj['foo'] = foo;
        obj['bar'] = bar;
    }

    /**
     * Constructs a <code>Xxxx</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/Xxxx} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/Xxxx} The populated <code>Xxxx</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Xxxx();

            if (data.hasOwnProperty('foo')) {
                obj['foo'] = ApiClient.convertToType(data['foo'], 'Number');
            }
            if (data.hasOwnProperty('bar')) {
                obj['bar'] = ApiClient.convertToType(data['bar'], 'Number');
            }
        }
        return obj;
    }

/**
     * @return {Number}
     */
    getFoo() {
        return this.foo;
    }

    /**
     * @param {Number} foo
     */
    setFoo(foo) {
        this['foo'] = foo;
    }
/**
     * @return {Number}
     */
    getBar() {
        return this.bar;
    }

    /**
     * @param {Number} bar
     */
    setBar(bar) {
        this['bar'] = bar;
    }

}

/**
 * @member {Number} foo
 */
Xxxx.prototype['foo'] = undefined;

/**
 * @member {Number} bar
 */
Xxxx.prototype['bar'] = undefined;






export default Xxxx;

