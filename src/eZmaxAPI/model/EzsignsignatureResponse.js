/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.11
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldEEzsignsignatureAttachmentnamesource from './FieldEEzsignsignatureAttachmentnamesource';
import FieldEEzsignsignatureFont from './FieldEEzsignsignatureFont';
import FieldEEzsignsignatureTooltipposition from './FieldEEzsignsignatureTooltipposition';
import FieldEEzsignsignatureType from './FieldEEzsignsignatureType';

/**
 * The EzsignsignatureResponse model module.
 * @module eZmaxAPI/model/EzsignsignatureResponse
 * @version 1.1.11
 */
class EzsignsignatureResponse {
    /**
     * Constructs a new <code>EzsignsignatureResponse</code>.
     * An Ezsignsignature Object
     * @alias module:eZmaxAPI/model/EzsignsignatureResponse
     * @param pkiEzsignsignatureID {Number} The unique ID of the Ezsignsignature
     * @param fkiEzsigndocumentID {Number} The unique ID of the Ezsigndocument
     * @param fkiEzsignfoldersignerassociationID {Number} The unique ID of the Ezsignfoldersignerassociation
     * @param iEzsignpagePagenumber {Number} The page number in the Ezsigndocument
     * @param iEzsignsignatureX {Number} The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
     * @param iEzsignsignatureY {Number} The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
     * @param iEzsignsignatureStep {Number} The step when the Ezsignsigner will be invited to sign
     * @param eEzsignsignatureType {module:eZmaxAPI/model/FieldEEzsignsignatureType} 
     */
    constructor(pkiEzsignsignatureID, fkiEzsigndocumentID, fkiEzsignfoldersignerassociationID, iEzsignpagePagenumber, iEzsignsignatureX, iEzsignsignatureY, iEzsignsignatureStep, eEzsignsignatureType) { 
        
        EzsignsignatureResponse.initialize(this, pkiEzsignsignatureID, fkiEzsigndocumentID, fkiEzsignfoldersignerassociationID, iEzsignpagePagenumber, iEzsignsignatureX, iEzsignsignatureY, iEzsignsignatureStep, eEzsignsignatureType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pkiEzsignsignatureID, fkiEzsigndocumentID, fkiEzsignfoldersignerassociationID, iEzsignpagePagenumber, iEzsignsignatureX, iEzsignsignatureY, iEzsignsignatureStep, eEzsignsignatureType) { 
        obj['pkiEzsignsignatureID'] = pkiEzsignsignatureID;
        obj['fkiEzsigndocumentID'] = fkiEzsigndocumentID;
        obj['fkiEzsignfoldersignerassociationID'] = fkiEzsignfoldersignerassociationID;
        obj['iEzsignpagePagenumber'] = iEzsignpagePagenumber;
        obj['iEzsignsignatureX'] = iEzsignsignatureX;
        obj['iEzsignsignatureY'] = iEzsignsignatureY;
        obj['iEzsignsignatureStep'] = iEzsignsignatureStep;
        obj['eEzsignsignatureType'] = eEzsignsignatureType;
    }

    /**
     * Constructs a <code>EzsignsignatureResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/EzsignsignatureResponse} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/EzsignsignatureResponse} The populated <code>EzsignsignatureResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EzsignsignatureResponse();

            if (data.hasOwnProperty('pkiEzsignsignatureID')) {
                obj['pkiEzsignsignatureID'] = ApiClient.convertToType(data['pkiEzsignsignatureID'], 'Number');
            }
            if (data.hasOwnProperty('fkiEzsigndocumentID')) {
                obj['fkiEzsigndocumentID'] = ApiClient.convertToType(data['fkiEzsigndocumentID'], 'Number');
            }
            if (data.hasOwnProperty('fkiEzsignfoldersignerassociationID')) {
                obj['fkiEzsignfoldersignerassociationID'] = ApiClient.convertToType(data['fkiEzsignfoldersignerassociationID'], 'Number');
            }
            if (data.hasOwnProperty('iEzsignpagePagenumber')) {
                obj['iEzsignpagePagenumber'] = ApiClient.convertToType(data['iEzsignpagePagenumber'], 'Number');
            }
            if (data.hasOwnProperty('iEzsignsignatureX')) {
                obj['iEzsignsignatureX'] = ApiClient.convertToType(data['iEzsignsignatureX'], 'Number');
            }
            if (data.hasOwnProperty('iEzsignsignatureY')) {
                obj['iEzsignsignatureY'] = ApiClient.convertToType(data['iEzsignsignatureY'], 'Number');
            }
            if (data.hasOwnProperty('iEzsignsignatureStep')) {
                obj['iEzsignsignatureStep'] = ApiClient.convertToType(data['iEzsignsignatureStep'], 'Number');
            }
            if (data.hasOwnProperty('eEzsignsignatureType')) {
                obj['eEzsignsignatureType'] = FieldEEzsignsignatureType.constructFromObject(data['eEzsignsignatureType']);
            }
            if (data.hasOwnProperty('tEzsignsignatureTooltip')) {
                obj['tEzsignsignatureTooltip'] = ApiClient.convertToType(data['tEzsignsignatureTooltip'], 'String');
            }
            if (data.hasOwnProperty('eEzsignsignatureTooltipposition')) {
                obj['eEzsignsignatureTooltipposition'] = FieldEEzsignsignatureTooltipposition.constructFromObject(data['eEzsignsignatureTooltipposition']);
            }
            if (data.hasOwnProperty('eEzsignsignatureFont')) {
                obj['eEzsignsignatureFont'] = FieldEEzsignsignatureFont.constructFromObject(data['eEzsignsignatureFont']);
            }
            if (data.hasOwnProperty('iEzsignsignatureValidationstep')) {
                obj['iEzsignsignatureValidationstep'] = ApiClient.convertToType(data['iEzsignsignatureValidationstep'], 'Number');
            }
            if (data.hasOwnProperty('sEzsignsignatureAttachmentdescription')) {
                obj['sEzsignsignatureAttachmentdescription'] = ApiClient.convertToType(data['sEzsignsignatureAttachmentdescription'], 'String');
            }
            if (data.hasOwnProperty('eEzsignsignatureAttachmentnamesource')) {
                obj['eEzsignsignatureAttachmentnamesource'] = FieldEEzsignsignatureAttachmentnamesource.constructFromObject(data['eEzsignsignatureAttachmentnamesource']);
            }
            if (data.hasOwnProperty('bEzsignsignatureRequired')) {
                obj['bEzsignsignatureRequired'] = ApiClient.convertToType(data['bEzsignsignatureRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('fkiUserID')) {
                obj['fkiUserID'] = ApiClient.convertToType(data['fkiUserID'], 'Number');
            }
        }
        return obj;
    }

/**
     * Returns The unique ID of the Ezsignsignature
     * minimum: 0
     * @return {Number}
     */
    getPkiEzsignsignatureID() {
        return this.pkiEzsignsignatureID;
    }

    /**
     * Sets The unique ID of the Ezsignsignature
     * @param {Number} pkiEzsignsignatureID The unique ID of the Ezsignsignature
     */
    setPkiEzsignsignatureID(pkiEzsignsignatureID) {
        this['pkiEzsignsignatureID'] = pkiEzsignsignatureID;
    }
/**
     * Returns The unique ID of the Ezsigndocument
     * minimum: 0
     * @return {Number}
     */
    getFkiEzsigndocumentID() {
        return this.fkiEzsigndocumentID;
    }

    /**
     * Sets The unique ID of the Ezsigndocument
     * @param {Number} fkiEzsigndocumentID The unique ID of the Ezsigndocument
     */
    setFkiEzsigndocumentID(fkiEzsigndocumentID) {
        this['fkiEzsigndocumentID'] = fkiEzsigndocumentID;
    }
/**
     * Returns The unique ID of the Ezsignfoldersignerassociation
     * minimum: 0
     * @return {Number}
     */
    getFkiEzsignfoldersignerassociationID() {
        return this.fkiEzsignfoldersignerassociationID;
    }

    /**
     * Sets The unique ID of the Ezsignfoldersignerassociation
     * @param {Number} fkiEzsignfoldersignerassociationID The unique ID of the Ezsignfoldersignerassociation
     */
    setFkiEzsignfoldersignerassociationID(fkiEzsignfoldersignerassociationID) {
        this['fkiEzsignfoldersignerassociationID'] = fkiEzsignfoldersignerassociationID;
    }
/**
     * Returns The page number in the Ezsigndocument
     * minimum: 1
     * @return {Number}
     */
    getIEzsignpagePagenumber() {
        return this.iEzsignpagePagenumber;
    }

    /**
     * Sets The page number in the Ezsigndocument
     * @param {Number} iEzsignpagePagenumber The page number in the Ezsigndocument
     */
    setIEzsignpagePagenumber(iEzsignpagePagenumber) {
        this['iEzsignpagePagenumber'] = iEzsignpagePagenumber;
    }
/**
     * Returns The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
     * minimum: 0
     * @return {Number}
     */
    getIEzsignsignatureX() {
        return this.iEzsignsignatureX;
    }

    /**
     * Sets The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
     * @param {Number} iEzsignsignatureX The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
     */
    setIEzsignsignatureX(iEzsignsignatureX) {
        this['iEzsignsignatureX'] = iEzsignsignatureX;
    }
/**
     * Returns The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
     * minimum: 0
     * @return {Number}
     */
    getIEzsignsignatureY() {
        return this.iEzsignsignatureY;
    }

    /**
     * Sets The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
     * @param {Number} iEzsignsignatureY The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
     */
    setIEzsignsignatureY(iEzsignsignatureY) {
        this['iEzsignsignatureY'] = iEzsignsignatureY;
    }
/**
     * Returns The step when the Ezsignsigner will be invited to sign
     * @return {Number}
     */
    getIEzsignsignatureStep() {
        return this.iEzsignsignatureStep;
    }

    /**
     * Sets The step when the Ezsignsigner will be invited to sign
     * @param {Number} iEzsignsignatureStep The step when the Ezsignsigner will be invited to sign
     */
    setIEzsignsignatureStep(iEzsignsignatureStep) {
        this['iEzsignsignatureStep'] = iEzsignsignatureStep;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsignsignatureType}
     */
    getEEzsignsignatureType() {
        return this.eEzsignsignatureType;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsignsignatureType} eEzsignsignatureType
     */
    setEEzsignsignatureType(eEzsignsignatureType) {
        this['eEzsignsignatureType'] = eEzsignsignatureType;
    }
/**
     * Returns A tooltip that will be presented to Ezsignsigner about the Ezsignsignature
     * @return {String}
     */
    getTEzsignsignatureTooltip() {
        return this.tEzsignsignatureTooltip;
    }

    /**
     * Sets A tooltip that will be presented to Ezsignsigner about the Ezsignsignature
     * @param {String} tEzsignsignatureTooltip A tooltip that will be presented to Ezsignsigner about the Ezsignsignature
     */
    setTEzsignsignatureTooltip(tEzsignsignatureTooltip) {
        this['tEzsignsignatureTooltip'] = tEzsignsignatureTooltip;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsignsignatureTooltipposition}
     */
    getEEzsignsignatureTooltipposition() {
        return this.eEzsignsignatureTooltipposition;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsignsignatureTooltipposition} eEzsignsignatureTooltipposition
     */
    setEEzsignsignatureTooltipposition(eEzsignsignatureTooltipposition) {
        this['eEzsignsignatureTooltipposition'] = eEzsignsignatureTooltipposition;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsignsignatureFont}
     */
    getEEzsignsignatureFont() {
        return this.eEzsignsignatureFont;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsignsignatureFont} eEzsignsignatureFont
     */
    setEEzsignsignatureFont(eEzsignsignatureFont) {
        this['eEzsignsignatureFont'] = eEzsignsignatureFont;
    }
/**
     * Returns The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments
     * @return {Number}
     */
    getIEzsignsignatureValidationstep() {
        return this.iEzsignsignatureValidationstep;
    }

    /**
     * Sets The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments
     * @param {Number} iEzsignsignatureValidationstep The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments
     */
    setIEzsignsignatureValidationstep(iEzsignsignatureValidationstep) {
        this['iEzsignsignatureValidationstep'] = iEzsignsignatureValidationstep;
    }
/**
     * Returns The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments
     * @return {String}
     */
    getSEzsignsignatureAttachmentdescription() {
        return this.sEzsignsignatureAttachmentdescription;
    }

    /**
     * Sets The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments
     * @param {String} sEzsignsignatureAttachmentdescription The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments
     */
    setSEzsignsignatureAttachmentdescription(sEzsignsignatureAttachmentdescription) {
        this['sEzsignsignatureAttachmentdescription'] = sEzsignsignatureAttachmentdescription;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsignsignatureAttachmentnamesource}
     */
    getEEzsignsignatureAttachmentnamesource() {
        return this.eEzsignsignatureAttachmentnamesource;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsignsignatureAttachmentnamesource} eEzsignsignatureAttachmentnamesource
     */
    setEEzsignsignatureAttachmentnamesource(eEzsignsignatureAttachmentnamesource) {
        this['eEzsignsignatureAttachmentnamesource'] = eEzsignsignatureAttachmentnamesource;
    }
/**
     * Returns Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType = Attachments.
     * @return {Boolean}
     */
    getBEzsignsignatureRequired() {
        return this.bEzsignsignatureRequired;
    }

    /**
     * Sets Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType = Attachments.
     * @param {Boolean} bEzsignsignatureRequired Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType = Attachments.
     */
    setBEzsignsignatureRequired(bEzsignsignatureRequired) {
        this['bEzsignsignatureRequired'] = bEzsignsignatureRequired;
    }
/**
     * Returns The unique ID of the User
     * minimum: 0
     * @return {Number}
     */
    getFkiUserID() {
        return this.fkiUserID;
    }

    /**
     * Sets The unique ID of the User
     * @param {Number} fkiUserID The unique ID of the User
     */
    setFkiUserID(fkiUserID) {
        this['fkiUserID'] = fkiUserID;
    }

}

/**
 * The unique ID of the Ezsignsignature
 * @member {Number} pkiEzsignsignatureID
 */
EzsignsignatureResponse.prototype['pkiEzsignsignatureID'] = undefined;

/**
 * The unique ID of the Ezsigndocument
 * @member {Number} fkiEzsigndocumentID
 */
EzsignsignatureResponse.prototype['fkiEzsigndocumentID'] = undefined;

/**
 * The unique ID of the Ezsignfoldersignerassociation
 * @member {Number} fkiEzsignfoldersignerassociationID
 */
EzsignsignatureResponse.prototype['fkiEzsignfoldersignerassociationID'] = undefined;

/**
 * The page number in the Ezsigndocument
 * @member {Number} iEzsignpagePagenumber
 */
EzsignsignatureResponse.prototype['iEzsignpagePagenumber'] = undefined;

/**
 * The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
 * @member {Number} iEzsignsignatureX
 */
EzsignsignatureResponse.prototype['iEzsignsignatureX'] = undefined;

/**
 * The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
 * @member {Number} iEzsignsignatureY
 */
EzsignsignatureResponse.prototype['iEzsignsignatureY'] = undefined;

/**
 * The step when the Ezsignsigner will be invited to sign
 * @member {Number} iEzsignsignatureStep
 */
EzsignsignatureResponse.prototype['iEzsignsignatureStep'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsignsignatureType} eEzsignsignatureType
 */
EzsignsignatureResponse.prototype['eEzsignsignatureType'] = undefined;

/**
 * A tooltip that will be presented to Ezsignsigner about the Ezsignsignature
 * @member {String} tEzsignsignatureTooltip
 */
EzsignsignatureResponse.prototype['tEzsignsignatureTooltip'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsignsignatureTooltipposition} eEzsignsignatureTooltipposition
 */
EzsignsignatureResponse.prototype['eEzsignsignatureTooltipposition'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsignsignatureFont} eEzsignsignatureFont
 */
EzsignsignatureResponse.prototype['eEzsignsignatureFont'] = undefined;

/**
 * The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments
 * @member {Number} iEzsignsignatureValidationstep
 */
EzsignsignatureResponse.prototype['iEzsignsignatureValidationstep'] = undefined;

/**
 * The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments
 * @member {String} sEzsignsignatureAttachmentdescription
 */
EzsignsignatureResponse.prototype['sEzsignsignatureAttachmentdescription'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsignsignatureAttachmentnamesource} eEzsignsignatureAttachmentnamesource
 */
EzsignsignatureResponse.prototype['eEzsignsignatureAttachmentnamesource'] = undefined;

/**
 * Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType = Attachments.
 * @member {Boolean} bEzsignsignatureRequired
 */
EzsignsignatureResponse.prototype['bEzsignsignatureRequired'] = undefined;

/**
 * The unique ID of the User
 * @member {Number} fkiUserID
 */
EzsignsignatureResponse.prototype['fkiUserID'] = undefined;






export default EzsignsignatureResponse;

