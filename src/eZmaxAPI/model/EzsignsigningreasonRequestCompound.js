/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EzsignsigningreasonRequest from './EzsignsigningreasonRequest';
import MultilingualEzsignsigningreasonDescription from './MultilingualEzsignsigningreasonDescription';

/**
 * The EzsignsigningreasonRequestCompound model module.
 * @module eZmaxAPI/model/EzsignsigningreasonRequestCompound
 * @version 1.2.0
 */
class EzsignsigningreasonRequestCompound {
    /**
     * Constructs a new <code>EzsignsigningreasonRequestCompound</code>.
     * A Ezsignsigningreason Object and children
     * @alias module:eZmaxAPI/model/EzsignsigningreasonRequestCompound
     * @implements module:eZmaxAPI/model/EzsignsigningreasonRequest
     * @param objEzsignsigningreasonDescription {module:eZmaxAPI/model/MultilingualEzsignsigningreasonDescription} 
     * @param bEzsignsigningreasonIsactive {Boolean} Whether the ezsignsigningreason is active or not
     */
    constructor(objEzsignsigningreasonDescription, bEzsignsigningreasonIsactive) { 
        EzsignsigningreasonRequest.initialize(this, objEzsignsigningreasonDescription, bEzsignsigningreasonIsactive);
        EzsignsigningreasonRequestCompound.initialize(this, objEzsignsigningreasonDescription, bEzsignsigningreasonIsactive);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objEzsignsigningreasonDescription, bEzsignsigningreasonIsactive) { 
        obj['objEzsignsigningreasonDescription'] = objEzsignsigningreasonDescription;
        obj['bEzsignsigningreasonIsactive'] = bEzsignsigningreasonIsactive;
    }

    /**
     * Constructs a <code>EzsignsigningreasonRequestCompound</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/EzsignsigningreasonRequestCompound} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/EzsignsigningreasonRequestCompound} The populated <code>EzsignsigningreasonRequestCompound</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EzsignsigningreasonRequestCompound();
            EzsignsigningreasonRequest.constructFromObject(data, obj);

            if (data.hasOwnProperty('pkiEzsignsigningreasonID')) {
                obj['pkiEzsignsigningreasonID'] = ApiClient.convertToType(data['pkiEzsignsigningreasonID'], 'Number');
            }
            if (data.hasOwnProperty('objEzsignsigningreasonDescription')) {
                obj['objEzsignsigningreasonDescription'] = MultilingualEzsignsigningreasonDescription.constructFromObject(data['objEzsignsigningreasonDescription']);
            }
            if (data.hasOwnProperty('bEzsignsigningreasonIsactive')) {
                obj['bEzsignsigningreasonIsactive'] = ApiClient.convertToType(data['bEzsignsigningreasonIsactive'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EzsignsigningreasonRequestCompound</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EzsignsigningreasonRequestCompound</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EzsignsigningreasonRequestCompound.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `objEzsignsigningreasonDescription`
        if (data['objEzsignsigningreasonDescription']) { // data not null
          MultilingualEzsignsigningreasonDescription.validateJSON(data['objEzsignsigningreasonDescription']);
        }

        return true;
    }

/**
     * Returns The unique ID of the Ezsignsigningreason
     * minimum: 0
     * maximum: 255
     * @return {Number}
     */
    getPkiEzsignsigningreasonID() {
        return this.pkiEzsignsigningreasonID;
    }

    /**
     * Sets The unique ID of the Ezsignsigningreason
     * @param {Number} pkiEzsignsigningreasonID The unique ID of the Ezsignsigningreason
     */
    setPkiEzsignsigningreasonID(pkiEzsignsigningreasonID) {
        this['pkiEzsignsigningreasonID'] = pkiEzsignsigningreasonID;
    }
/**
     * @return {module:eZmaxAPI/model/MultilingualEzsignsigningreasonDescription}
     */
    getObjEzsignsigningreasonDescription() {
        return this.objEzsignsigningreasonDescription;
    }

    /**
     * @param {module:eZmaxAPI/model/MultilingualEzsignsigningreasonDescription} objEzsignsigningreasonDescription
     */
    setObjEzsignsigningreasonDescription(objEzsignsigningreasonDescription) {
        this['objEzsignsigningreasonDescription'] = objEzsignsigningreasonDescription;
    }
/**
     * Returns Whether the ezsignsigningreason is active or not
     * @return {Boolean}
     */
    getBEzsignsigningreasonIsactive() {
        return this.bEzsignsigningreasonIsactive;
    }

    /**
     * Sets Whether the ezsignsigningreason is active or not
     * @param {Boolean} bEzsignsigningreasonIsactive Whether the ezsignsigningreason is active or not
     */
    setBEzsignsigningreasonIsactive(bEzsignsigningreasonIsactive) {
        this['bEzsignsigningreasonIsactive'] = bEzsignsigningreasonIsactive;
    }

}

EzsignsigningreasonRequestCompound.RequiredProperties = ["objEzsignsigningreasonDescription", "bEzsignsigningreasonIsactive"];

/**
 * The unique ID of the Ezsignsigningreason
 * @member {Number} pkiEzsignsigningreasonID
 */
EzsignsigningreasonRequestCompound.prototype['pkiEzsignsigningreasonID'] = undefined;

/**
 * @member {module:eZmaxAPI/model/MultilingualEzsignsigningreasonDescription} objEzsignsigningreasonDescription
 */
EzsignsigningreasonRequestCompound.prototype['objEzsignsigningreasonDescription'] = undefined;

/**
 * Whether the ezsignsigningreason is active or not
 * @member {Boolean} bEzsignsigningreasonIsactive
 */
EzsignsigningreasonRequestCompound.prototype['bEzsignsigningreasonIsactive'] = undefined;


// Implement EzsignsigningreasonRequest interface:
/**
 * The unique ID of the Ezsignsigningreason
 * @member {Number} pkiEzsignsigningreasonID
 */
EzsignsigningreasonRequest.prototype['pkiEzsignsigningreasonID'] = undefined;
/**
 * @member {module:eZmaxAPI/model/MultilingualEzsignsigningreasonDescription} objEzsignsigningreasonDescription
 */
EzsignsigningreasonRequest.prototype['objEzsignsigningreasonDescription'] = undefined;
/**
 * Whether the ezsignsigningreason is active or not
 * @member {Boolean} bEzsignsigningreasonIsactive
 */
EzsignsigningreasonRequest.prototype['bEzsignsigningreasonIsactive'] = undefined;




export default EzsignsigningreasonRequestCompound;

