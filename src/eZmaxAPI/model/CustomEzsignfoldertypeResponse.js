/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomEzsignfoldertypeResponse model module.
 * @module eZmaxAPI/model/CustomEzsignfoldertypeResponse
 * @version 1.2.0
 */
class CustomEzsignfoldertypeResponse {
    /**
     * Constructs a new <code>CustomEzsignfoldertypeResponse</code>.
     * A Custom Ezsignfoldertype Object
     * @alias module:eZmaxAPI/model/CustomEzsignfoldertypeResponse
     * @param pkiEzsignfoldertypeID {Number} The unique ID of the Ezsignfoldertype.
     */
    constructor(pkiEzsignfoldertypeID) { 
        
        CustomEzsignfoldertypeResponse.initialize(this, pkiEzsignfoldertypeID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pkiEzsignfoldertypeID) { 
        obj['pkiEzsignfoldertypeID'] = pkiEzsignfoldertypeID;
    }

    /**
     * Constructs a <code>CustomEzsignfoldertypeResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/CustomEzsignfoldertypeResponse} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/CustomEzsignfoldertypeResponse} The populated <code>CustomEzsignfoldertypeResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomEzsignfoldertypeResponse();

            if (data.hasOwnProperty('pkiEzsignfoldertypeID')) {
                obj['pkiEzsignfoldertypeID'] = ApiClient.convertToType(data['pkiEzsignfoldertypeID'], 'Number');
            }
            if (data.hasOwnProperty('sEzsignfoldertypeNameX')) {
                obj['sEzsignfoldertypeNameX'] = ApiClient.convertToType(data['sEzsignfoldertypeNameX'], 'String');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendproofezsignsigner')) {
                obj['bEzsignfoldertypeSendproofezsignsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeSendproofezsignsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeIncludeproofsigner')) {
                obj['bEzsignfoldertypeIncludeproofsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeIncludeproofsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeIncludeproofuser')) {
                obj['bEzsignfoldertypeIncludeproofuser'] = ApiClient.convertToType(data['bEzsignfoldertypeIncludeproofuser'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeAllowdownloadattachmentezsignsigner')) {
                obj['bEzsignfoldertypeAllowdownloadattachmentezsignsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeAllowdownloadattachmentezsignsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeAllowdownloadproofezsignsigner')) {
                obj['bEzsignfoldertypeAllowdownloadproofezsignsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeAllowdownloadproofezsignsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeDelegate')) {
                obj['bEzsignfoldertypeDelegate'] = ApiClient.convertToType(data['bEzsignfoldertypeDelegate'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeReassign')) {
                obj['bEzsignfoldertypeReassign'] = ApiClient.convertToType(data['bEzsignfoldertypeReassign'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeReassignezsignsigner')) {
                obj['bEzsignfoldertypeReassignezsignsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeReassignezsignsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeReassignuser')) {
                obj['bEzsignfoldertypeReassignuser'] = ApiClient.convertToType(data['bEzsignfoldertypeReassignuser'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomEzsignfoldertypeResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomEzsignfoldertypeResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomEzsignfoldertypeResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sEzsignfoldertypeNameX'] && !(typeof data['sEzsignfoldertypeNameX'] === 'string' || data['sEzsignfoldertypeNameX'] instanceof String)) {
            throw new Error("Expected the field `sEzsignfoldertypeNameX` to be a primitive type in the JSON string but got " + data['sEzsignfoldertypeNameX']);
        }

        return true;
    }

/**
     * Returns The unique ID of the Ezsignfoldertype.
     * minimum: 0
     * @return {Number}
     */
    getPkiEzsignfoldertypeID() {
        return this.pkiEzsignfoldertypeID;
    }

    /**
     * Sets The unique ID of the Ezsignfoldertype.
     * @param {Number} pkiEzsignfoldertypeID The unique ID of the Ezsignfoldertype.
     */
    setPkiEzsignfoldertypeID(pkiEzsignfoldertypeID) {
        this['pkiEzsignfoldertypeID'] = pkiEzsignfoldertypeID;
    }
/**
     * Returns The name of the Ezsignfoldertype in the language of the requester
     * @return {String}
     */
    getSEzsignfoldertypeNameX() {
        return this.sEzsignfoldertypeNameX;
    }

    /**
     * Sets The name of the Ezsignfoldertype in the language of the requester
     * @param {String} sEzsignfoldertypeNameX The name of the Ezsignfoldertype in the language of the requester
     */
    setSEzsignfoldertypeNameX(sEzsignfoldertypeNameX) {
        this['sEzsignfoldertypeNameX'] = sEzsignfoldertypeNameX;
    }
/**
     * Returns Whether we send the proof in the email to Ezsignsigner
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendproofezsignsigner() {
        return this.bEzsignfoldertypeSendproofezsignsigner;
    }

    /**
     * Sets Whether we send the proof in the email to Ezsignsigner
     * @param {Boolean} bEzsignfoldertypeSendproofezsignsigner Whether we send the proof in the email to Ezsignsigner
     */
    setBEzsignfoldertypeSendproofezsignsigner(bEzsignfoldertypeSendproofezsignsigner) {
        this['bEzsignfoldertypeSendproofezsignsigner'] = bEzsignfoldertypeSendproofezsignsigner;
    }
/**
     * Returns THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
     * @return {Boolean}
     */
    getBEzsignfoldertypeIncludeproofsigner() {
        return this.bEzsignfoldertypeIncludeproofsigner;
    }

    /**
     * Sets THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
     * @param {Boolean} bEzsignfoldertypeIncludeproofsigner THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
     */
    setBEzsignfoldertypeIncludeproofsigner(bEzsignfoldertypeIncludeproofsigner) {
        this['bEzsignfoldertypeIncludeproofsigner'] = bEzsignfoldertypeIncludeproofsigner;
    }
/**
     * Returns Whether we include the proof with the signed Ezsigndocument for users
     * @return {Boolean}
     */
    getBEzsignfoldertypeIncludeproofuser() {
        return this.bEzsignfoldertypeIncludeproofuser;
    }

    /**
     * Sets Whether we include the proof with the signed Ezsigndocument for users
     * @param {Boolean} bEzsignfoldertypeIncludeproofuser Whether we include the proof with the signed Ezsigndocument for users
     */
    setBEzsignfoldertypeIncludeproofuser(bEzsignfoldertypeIncludeproofuser) {
        this['bEzsignfoldertypeIncludeproofuser'] = bEzsignfoldertypeIncludeproofuser;
    }
/**
     * Returns Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner
     * @return {Boolean}
     */
    getBEzsignfoldertypeAllowdownloadattachmentezsignsigner() {
        return this.bEzsignfoldertypeAllowdownloadattachmentezsignsigner;
    }

    /**
     * Sets Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner
     * @param {Boolean} bEzsignfoldertypeAllowdownloadattachmentezsignsigner Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner
     */
    setBEzsignfoldertypeAllowdownloadattachmentezsignsigner(bEzsignfoldertypeAllowdownloadattachmentezsignsigner) {
        this['bEzsignfoldertypeAllowdownloadattachmentezsignsigner'] = bEzsignfoldertypeAllowdownloadattachmentezsignsigner;
    }
/**
     * Returns Whether we allow the proof to be downloaded by an Ezsignsigner
     * @return {Boolean}
     */
    getBEzsignfoldertypeAllowdownloadproofezsignsigner() {
        return this.bEzsignfoldertypeAllowdownloadproofezsignsigner;
    }

    /**
     * Sets Whether we allow the proof to be downloaded by an Ezsignsigner
     * @param {Boolean} bEzsignfoldertypeAllowdownloadproofezsignsigner Whether we allow the proof to be downloaded by an Ezsignsigner
     */
    setBEzsignfoldertypeAllowdownloadproofezsignsigner(bEzsignfoldertypeAllowdownloadproofezsignsigner) {
        this['bEzsignfoldertypeAllowdownloadproofezsignsigner'] = bEzsignfoldertypeAllowdownloadproofezsignsigner;
    }
/**
     * Returns Wheter if delegation of signature is allowed to another user or not
     * @return {Boolean}
     */
    getBEzsignfoldertypeDelegate() {
        return this.bEzsignfoldertypeDelegate;
    }

    /**
     * Sets Wheter if delegation of signature is allowed to another user or not
     * @param {Boolean} bEzsignfoldertypeDelegate Wheter if delegation of signature is allowed to another user or not
     */
    setBEzsignfoldertypeDelegate(bEzsignfoldertypeDelegate) {
        this['bEzsignfoldertypeDelegate'] = bEzsignfoldertypeDelegate;
    }
/**
     * Returns Wheter if Reassignment of signature is allowed to another signatory or not
     * @return {Boolean}
     */
    getBEzsignfoldertypeReassign() {
        return this.bEzsignfoldertypeReassign;
    }

    /**
     * Sets Wheter if Reassignment of signature is allowed to another signatory or not
     * @param {Boolean} bEzsignfoldertypeReassign Wheter if Reassignment of signature is allowed to another signatory or not
     */
    setBEzsignfoldertypeReassign(bEzsignfoldertypeReassign) {
        this['bEzsignfoldertypeReassign'] = bEzsignfoldertypeReassign;
    }
/**
     * Returns Wheter if Reassignment of signature is allowed by a signatory to another signatory or not
     * @return {Boolean}
     */
    getBEzsignfoldertypeReassignezsignsigner() {
        return this.bEzsignfoldertypeReassignezsignsigner;
    }

    /**
     * Sets Wheter if Reassignment of signature is allowed by a signatory to another signatory or not
     * @param {Boolean} bEzsignfoldertypeReassignezsignsigner Wheter if Reassignment of signature is allowed by a signatory to another signatory or not
     */
    setBEzsignfoldertypeReassignezsignsigner(bEzsignfoldertypeReassignezsignsigner) {
        this['bEzsignfoldertypeReassignezsignsigner'] = bEzsignfoldertypeReassignezsignsigner;
    }
/**
     * Returns Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not
     * @return {Boolean}
     */
    getBEzsignfoldertypeReassignuser() {
        return this.bEzsignfoldertypeReassignuser;
    }

    /**
     * Sets Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not
     * @param {Boolean} bEzsignfoldertypeReassignuser Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not
     */
    setBEzsignfoldertypeReassignuser(bEzsignfoldertypeReassignuser) {
        this['bEzsignfoldertypeReassignuser'] = bEzsignfoldertypeReassignuser;
    }

}

CustomEzsignfoldertypeResponse.RequiredProperties = ["pkiEzsignfoldertypeID"];

/**
 * The unique ID of the Ezsignfoldertype.
 * @member {Number} pkiEzsignfoldertypeID
 */
CustomEzsignfoldertypeResponse.prototype['pkiEzsignfoldertypeID'] = undefined;

/**
 * The name of the Ezsignfoldertype in the language of the requester
 * @member {String} sEzsignfoldertypeNameX
 */
CustomEzsignfoldertypeResponse.prototype['sEzsignfoldertypeNameX'] = undefined;

/**
 * Whether we send the proof in the email to Ezsignsigner
 * @member {Boolean} bEzsignfoldertypeSendproofezsignsigner
 */
CustomEzsignfoldertypeResponse.prototype['bEzsignfoldertypeSendproofezsignsigner'] = undefined;

/**
 * THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
 * @member {Boolean} bEzsignfoldertypeIncludeproofsigner
 */
CustomEzsignfoldertypeResponse.prototype['bEzsignfoldertypeIncludeproofsigner'] = undefined;

/**
 * Whether we include the proof with the signed Ezsigndocument for users
 * @member {Boolean} bEzsignfoldertypeIncludeproofuser
 */
CustomEzsignfoldertypeResponse.prototype['bEzsignfoldertypeIncludeproofuser'] = undefined;

/**
 * Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner
 * @member {Boolean} bEzsignfoldertypeAllowdownloadattachmentezsignsigner
 */
CustomEzsignfoldertypeResponse.prototype['bEzsignfoldertypeAllowdownloadattachmentezsignsigner'] = undefined;

/**
 * Whether we allow the proof to be downloaded by an Ezsignsigner
 * @member {Boolean} bEzsignfoldertypeAllowdownloadproofezsignsigner
 */
CustomEzsignfoldertypeResponse.prototype['bEzsignfoldertypeAllowdownloadproofezsignsigner'] = undefined;

/**
 * Wheter if delegation of signature is allowed to another user or not
 * @member {Boolean} bEzsignfoldertypeDelegate
 */
CustomEzsignfoldertypeResponse.prototype['bEzsignfoldertypeDelegate'] = undefined;

/**
 * Wheter if Reassignment of signature is allowed to another signatory or not
 * @member {Boolean} bEzsignfoldertypeReassign
 */
CustomEzsignfoldertypeResponse.prototype['bEzsignfoldertypeReassign'] = undefined;

/**
 * Wheter if Reassignment of signature is allowed by a signatory to another signatory or not
 * @member {Boolean} bEzsignfoldertypeReassignezsignsigner
 */
CustomEzsignfoldertypeResponse.prototype['bEzsignfoldertypeReassignezsignsigner'] = undefined;

/**
 * Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not
 * @member {Boolean} bEzsignfoldertypeReassignuser
 */
CustomEzsignfoldertypeResponse.prototype['bEzsignfoldertypeReassignuser'] = undefined;






export default CustomEzsignfoldertypeResponse;

