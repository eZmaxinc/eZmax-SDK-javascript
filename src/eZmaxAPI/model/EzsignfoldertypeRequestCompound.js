/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EzsignfoldertypeRequest from './EzsignfoldertypeRequest';
import FieldEEzsignfoldertypeCompletion from './FieldEEzsignfoldertypeCompletion';
import FieldEEzsignfoldertypeDisposal from './FieldEEzsignfoldertypeDisposal';
import FieldEEzsignfoldertypePrivacylevel from './FieldEEzsignfoldertypePrivacylevel';
import FieldEEzsignfoldertypeSendreminderfrequency from './FieldEEzsignfoldertypeSendreminderfrequency';
import MultilingualEzsignfoldertypeName from './MultilingualEzsignfoldertypeName';

/**
 * The EzsignfoldertypeRequestCompound model module.
 * @module eZmaxAPI/model/EzsignfoldertypeRequestCompound
 * @version 1.2.0
 */
class EzsignfoldertypeRequestCompound {
    /**
     * Constructs a new <code>EzsignfoldertypeRequestCompound</code>.
     * A Ezsignfoldertype Object and children
     * @alias module:eZmaxAPI/model/EzsignfoldertypeRequestCompound
     * @implements module:eZmaxAPI/model/EzsignfoldertypeRequest
     * @param objEzsignfoldertypeName {module:eZmaxAPI/model/MultilingualEzsignfoldertypeName} 
     * @param fkiBrandingID {Number} The unique ID of the Branding
     * @param eEzsignfoldertypePrivacylevel {module:eZmaxAPI/model/FieldEEzsignfoldertypePrivacylevel} 
     * @param iEzsignfoldertypeArchivaldays {Number} The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
     * @param eEzsignfoldertypeDisposal {module:eZmaxAPI/model/FieldEEzsignfoldertypeDisposal} 
     * @param iEzsignfoldertypeDeadlinedays {Number} The number of days to get all Ezsignsignatures
     * @param bEzsignfoldertypeSendsignedtodocumentowner {Boolean} Whether we send the signed Ezsigndocument to the Ezsigndocument's owner
     * @param bEzsignfoldertypeSendsignedtofolderowner {Boolean} Whether we send the signed Ezsigndocument to the Ezsignfolder's owner
     * @param bEzsignfoldertypeSendsignedtocolleague {Boolean} Whether we send the signed Ezsigndocument to the colleagues
     * @param bEzsignfoldertypeSendsummarytodocumentowner {Boolean} Whether we send the summary to the Ezsigndocument's owner
     * @param bEzsignfoldertypeSendsummarytofolderowner {Boolean} Whether we send the summary to the Ezsignfolder's owner
     * @param bEzsignfoldertypeSendsummarytocolleague {Boolean} Whether we send the summary to the colleagues
     * @param bEzsignfoldertypeIncludeproofuser {Boolean} Whether we include the proof with the signed Ezsigndocument for users
     * @param bEzsignfoldertypeIsactive {Boolean} Whether the Ezsignfoldertype is active or not
     */
    constructor(objEzsignfoldertypeName, fkiBrandingID, eEzsignfoldertypePrivacylevel, iEzsignfoldertypeArchivaldays, eEzsignfoldertypeDisposal, iEzsignfoldertypeDeadlinedays, bEzsignfoldertypeSendsignedtodocumentowner, bEzsignfoldertypeSendsignedtofolderowner, bEzsignfoldertypeSendsignedtocolleague, bEzsignfoldertypeSendsummarytodocumentowner, bEzsignfoldertypeSendsummarytofolderowner, bEzsignfoldertypeSendsummarytocolleague, bEzsignfoldertypeIncludeproofuser, bEzsignfoldertypeIsactive) { 
        EzsignfoldertypeRequest.initialize(this, objEzsignfoldertypeName, fkiBrandingID, eEzsignfoldertypePrivacylevel, iEzsignfoldertypeArchivaldays, eEzsignfoldertypeDisposal, iEzsignfoldertypeDeadlinedays, bEzsignfoldertypeSendsignedtodocumentowner, bEzsignfoldertypeSendsignedtofolderowner, bEzsignfoldertypeSendsignedtocolleague, bEzsignfoldertypeSendsummarytodocumentowner, bEzsignfoldertypeSendsummarytofolderowner, bEzsignfoldertypeSendsummarytocolleague, bEzsignfoldertypeIncludeproofuser, bEzsignfoldertypeIsactive);
        EzsignfoldertypeRequestCompound.initialize(this, objEzsignfoldertypeName, fkiBrandingID, eEzsignfoldertypePrivacylevel, iEzsignfoldertypeArchivaldays, eEzsignfoldertypeDisposal, iEzsignfoldertypeDeadlinedays, bEzsignfoldertypeSendsignedtodocumentowner, bEzsignfoldertypeSendsignedtofolderowner, bEzsignfoldertypeSendsignedtocolleague, bEzsignfoldertypeSendsummarytodocumentowner, bEzsignfoldertypeSendsummarytofolderowner, bEzsignfoldertypeSendsummarytocolleague, bEzsignfoldertypeIncludeproofuser, bEzsignfoldertypeIsactive);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objEzsignfoldertypeName, fkiBrandingID, eEzsignfoldertypePrivacylevel, iEzsignfoldertypeArchivaldays, eEzsignfoldertypeDisposal, iEzsignfoldertypeDeadlinedays, bEzsignfoldertypeSendsignedtodocumentowner, bEzsignfoldertypeSendsignedtofolderowner, bEzsignfoldertypeSendsignedtocolleague, bEzsignfoldertypeSendsummarytodocumentowner, bEzsignfoldertypeSendsummarytofolderowner, bEzsignfoldertypeSendsummarytocolleague, bEzsignfoldertypeIncludeproofuser, bEzsignfoldertypeIsactive) { 
        obj['objEzsignfoldertypeName'] = objEzsignfoldertypeName;
        obj['fkiBrandingID'] = fkiBrandingID;
        obj['eEzsignfoldertypePrivacylevel'] = eEzsignfoldertypePrivacylevel;
        obj['iEzsignfoldertypeArchivaldays'] = iEzsignfoldertypeArchivaldays;
        obj['eEzsignfoldertypeDisposal'] = eEzsignfoldertypeDisposal;
        obj['iEzsignfoldertypeDeadlinedays'] = iEzsignfoldertypeDeadlinedays;
        obj['bEzsignfoldertypeSendsignedtodocumentowner'] = bEzsignfoldertypeSendsignedtodocumentowner;
        obj['bEzsignfoldertypeSendsignedtofolderowner'] = bEzsignfoldertypeSendsignedtofolderowner;
        obj['bEzsignfoldertypeSendsignedtocolleague'] = bEzsignfoldertypeSendsignedtocolleague;
        obj['bEzsignfoldertypeSendsummarytodocumentowner'] = bEzsignfoldertypeSendsummarytodocumentowner;
        obj['bEzsignfoldertypeSendsummarytofolderowner'] = bEzsignfoldertypeSendsummarytofolderowner;
        obj['bEzsignfoldertypeSendsummarytocolleague'] = bEzsignfoldertypeSendsummarytocolleague;
        obj['bEzsignfoldertypeIncludeproofuser'] = bEzsignfoldertypeIncludeproofuser;
        obj['bEzsignfoldertypeIsactive'] = bEzsignfoldertypeIsactive;
    }

    /**
     * Constructs a <code>EzsignfoldertypeRequestCompound</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/EzsignfoldertypeRequestCompound} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/EzsignfoldertypeRequestCompound} The populated <code>EzsignfoldertypeRequestCompound</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EzsignfoldertypeRequestCompound();
            EzsignfoldertypeRequest.constructFromObject(data, obj);

            if (data.hasOwnProperty('pkiEzsignfoldertypeID')) {
                obj['pkiEzsignfoldertypeID'] = ApiClient.convertToType(data['pkiEzsignfoldertypeID'], 'Number');
            }
            if (data.hasOwnProperty('objEzsignfoldertypeName')) {
                obj['objEzsignfoldertypeName'] = MultilingualEzsignfoldertypeName.constructFromObject(data['objEzsignfoldertypeName']);
            }
            if (data.hasOwnProperty('fkiBrandingID')) {
                obj['fkiBrandingID'] = ApiClient.convertToType(data['fkiBrandingID'], 'Number');
            }
            if (data.hasOwnProperty('fkiBillingentityinternalID')) {
                obj['fkiBillingentityinternalID'] = ApiClient.convertToType(data['fkiBillingentityinternalID'], 'Number');
            }
            if (data.hasOwnProperty('fkiUsergroupID')) {
                obj['fkiUsergroupID'] = ApiClient.convertToType(data['fkiUsergroupID'], 'Number');
            }
            if (data.hasOwnProperty('fkiUsergroupIDRestricted')) {
                obj['fkiUsergroupIDRestricted'] = ApiClient.convertToType(data['fkiUsergroupIDRestricted'], 'Number');
            }
            if (data.hasOwnProperty('fkiEzsigntsarequirementID')) {
                obj['fkiEzsigntsarequirementID'] = ApiClient.convertToType(data['fkiEzsigntsarequirementID'], 'Number');
            }
            if (data.hasOwnProperty('sEmailAddressSigned')) {
                obj['sEmailAddressSigned'] = ApiClient.convertToType(data['sEmailAddressSigned'], 'String');
            }
            if (data.hasOwnProperty('sEmailAddressSummary')) {
                obj['sEmailAddressSummary'] = ApiClient.convertToType(data['sEmailAddressSummary'], 'String');
            }
            if (data.hasOwnProperty('eEzsignfoldertypePrivacylevel')) {
                obj['eEzsignfoldertypePrivacylevel'] = FieldEEzsignfoldertypePrivacylevel.constructFromObject(data['eEzsignfoldertypePrivacylevel']);
            }
            if (data.hasOwnProperty('eEzsignfoldertypeSendreminderfrequency')) {
                obj['eEzsignfoldertypeSendreminderfrequency'] = FieldEEzsignfoldertypeSendreminderfrequency.constructFromObject(data['eEzsignfoldertypeSendreminderfrequency']);
            }
            if (data.hasOwnProperty('iEzsignfoldertypeArchivaldays')) {
                obj['iEzsignfoldertypeArchivaldays'] = ApiClient.convertToType(data['iEzsignfoldertypeArchivaldays'], 'Number');
            }
            if (data.hasOwnProperty('eEzsignfoldertypeDisposal')) {
                obj['eEzsignfoldertypeDisposal'] = FieldEEzsignfoldertypeDisposal.constructFromObject(data['eEzsignfoldertypeDisposal']);
            }
            if (data.hasOwnProperty('eEzsignfoldertypeCompletion')) {
                obj['eEzsignfoldertypeCompletion'] = FieldEEzsignfoldertypeCompletion.constructFromObject(data['eEzsignfoldertypeCompletion']);
            }
            if (data.hasOwnProperty('iEzsignfoldertypeDisposaldays')) {
                obj['iEzsignfoldertypeDisposaldays'] = ApiClient.convertToType(data['iEzsignfoldertypeDisposaldays'], 'Number');
            }
            if (data.hasOwnProperty('iEzsignfoldertypeDeadlinedays')) {
                obj['iEzsignfoldertypeDeadlinedays'] = ApiClient.convertToType(data['iEzsignfoldertypeDeadlinedays'], 'Number');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeDelegate')) {
                obj['bEzsignfoldertypeDelegate'] = ApiClient.convertToType(data['bEzsignfoldertypeDelegate'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeReassign')) {
                obj['bEzsignfoldertypeReassign'] = ApiClient.convertToType(data['bEzsignfoldertypeReassign'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeReassignezsignsigner')) {
                obj['bEzsignfoldertypeReassignezsignsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeReassignezsignsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeReassignuser')) {
                obj['bEzsignfoldertypeReassignuser'] = ApiClient.convertToType(data['bEzsignfoldertypeReassignuser'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendattatchmentsigner')) {
                obj['bEzsignfoldertypeSendattatchmentsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeSendattatchmentsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsignedtoezsignsigner')) {
                obj['bEzsignfoldertypeSendsignedtoezsignsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsignedtoezsignsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsignedtouser')) {
                obj['bEzsignfoldertypeSendsignedtouser'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsignedtouser'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendattachmentezsignsigner')) {
                obj['bEzsignfoldertypeSendattachmentezsignsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeSendattachmentezsignsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendproofezsignsigner')) {
                obj['bEzsignfoldertypeSendproofezsignsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeSendproofezsignsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendattachmentuser')) {
                obj['bEzsignfoldertypeSendattachmentuser'] = ApiClient.convertToType(data['bEzsignfoldertypeSendattachmentuser'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendproofuser')) {
                obj['bEzsignfoldertypeSendproofuser'] = ApiClient.convertToType(data['bEzsignfoldertypeSendproofuser'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendproofemail')) {
                obj['bEzsignfoldertypeSendproofemail'] = ApiClient.convertToType(data['bEzsignfoldertypeSendproofemail'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeAllowdownloadattachmentezsignsigner')) {
                obj['bEzsignfoldertypeAllowdownloadattachmentezsignsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeAllowdownloadattachmentezsignsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeAllowdownloadproofezsignsigner')) {
                obj['bEzsignfoldertypeAllowdownloadproofezsignsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeAllowdownloadproofezsignsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendproofreceivealldocument')) {
                obj['bEzsignfoldertypeSendproofreceivealldocument'] = ApiClient.convertToType(data['bEzsignfoldertypeSendproofreceivealldocument'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsignedtodocumentowner')) {
                obj['bEzsignfoldertypeSendsignedtodocumentowner'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsignedtodocumentowner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsignedtofolderowner')) {
                obj['bEzsignfoldertypeSendsignedtofolderowner'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsignedtofolderowner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsignedtofullgroup')) {
                obj['bEzsignfoldertypeSendsignedtofullgroup'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsignedtofullgroup'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsignedtolimitedgroup')) {
                obj['bEzsignfoldertypeSendsignedtolimitedgroup'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsignedtolimitedgroup'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsignedtocolleague')) {
                obj['bEzsignfoldertypeSendsignedtocolleague'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsignedtocolleague'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsummarytodocumentowner')) {
                obj['bEzsignfoldertypeSendsummarytodocumentowner'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsummarytodocumentowner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsummarytofolderowner')) {
                obj['bEzsignfoldertypeSendsummarytofolderowner'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsummarytofolderowner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsummarytofullgroup')) {
                obj['bEzsignfoldertypeSendsummarytofullgroup'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsummarytofullgroup'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsummarytolimitedgroup')) {
                obj['bEzsignfoldertypeSendsummarytolimitedgroup'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsummarytolimitedgroup'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsummarytocolleague')) {
                obj['bEzsignfoldertypeSendsummarytocolleague'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsummarytocolleague'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeIncludeproofsigner')) {
                obj['bEzsignfoldertypeIncludeproofsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeIncludeproofsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeIncludeproofuser')) {
                obj['bEzsignfoldertypeIncludeproofuser'] = ApiClient.convertToType(data['bEzsignfoldertypeIncludeproofuser'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeIsactive')) {
                obj['bEzsignfoldertypeIsactive'] = ApiClient.convertToType(data['bEzsignfoldertypeIsactive'], 'Boolean');
            }
            if (data.hasOwnProperty('a_fkiUserIDSigned')) {
                obj['a_fkiUserIDSigned'] = ApiClient.convertToType(data['a_fkiUserIDSigned'], ['Number']);
            }
            if (data.hasOwnProperty('a_fkiUserIDSummary')) {
                obj['a_fkiUserIDSummary'] = ApiClient.convertToType(data['a_fkiUserIDSummary'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EzsignfoldertypeRequestCompound</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EzsignfoldertypeRequestCompound</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EzsignfoldertypeRequestCompound.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `objEzsignfoldertypeName`
        if (data['objEzsignfoldertypeName']) { // data not null
          MultilingualEzsignfoldertypeName.validateJSON(data['objEzsignfoldertypeName']);
        }
        // ensure the json data is a string
        if (data['sEmailAddressSigned'] && !(typeof data['sEmailAddressSigned'] === 'string' || data['sEmailAddressSigned'] instanceof String)) {
            throw new Error("Expected the field `sEmailAddressSigned` to be a primitive type in the JSON string but got " + data['sEmailAddressSigned']);
        }
        // ensure the json data is a string
        if (data['sEmailAddressSummary'] && !(typeof data['sEmailAddressSummary'] === 'string' || data['sEmailAddressSummary'] instanceof String)) {
            throw new Error("Expected the field `sEmailAddressSummary` to be a primitive type in the JSON string but got " + data['sEmailAddressSummary']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['a_fkiUserIDSigned'])) {
            throw new Error("Expected the field `a_fkiUserIDSigned` to be an array in the JSON data but got " + data['a_fkiUserIDSigned']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['a_fkiUserIDSummary'])) {
            throw new Error("Expected the field `a_fkiUserIDSummary` to be an array in the JSON data but got " + data['a_fkiUserIDSummary']);
        }

        return true;
    }

/**
     * Returns The unique ID of the Ezsignfoldertype.
     * minimum: 0
     * @return {Number}
     */
    getPkiEzsignfoldertypeID() {
        return this.pkiEzsignfoldertypeID;
    }

    /**
     * Sets The unique ID of the Ezsignfoldertype.
     * @param {Number} pkiEzsignfoldertypeID The unique ID of the Ezsignfoldertype.
     */
    setPkiEzsignfoldertypeID(pkiEzsignfoldertypeID) {
        this['pkiEzsignfoldertypeID'] = pkiEzsignfoldertypeID;
    }
/**
     * @return {module:eZmaxAPI/model/MultilingualEzsignfoldertypeName}
     */
    getObjEzsignfoldertypeName() {
        return this.objEzsignfoldertypeName;
    }

    /**
     * @param {module:eZmaxAPI/model/MultilingualEzsignfoldertypeName} objEzsignfoldertypeName
     */
    setObjEzsignfoldertypeName(objEzsignfoldertypeName) {
        this['objEzsignfoldertypeName'] = objEzsignfoldertypeName;
    }
/**
     * Returns The unique ID of the Branding
     * minimum: 0
     * @return {Number}
     */
    getFkiBrandingID() {
        return this.fkiBrandingID;
    }

    /**
     * Sets The unique ID of the Branding
     * @param {Number} fkiBrandingID The unique ID of the Branding
     */
    setFkiBrandingID(fkiBrandingID) {
        this['fkiBrandingID'] = fkiBrandingID;
    }
/**
     * Returns The unique ID of the Billingentityinternal.
     * minimum: 0
     * @return {Number}
     */
    getFkiBillingentityinternalID() {
        return this.fkiBillingentityinternalID;
    }

    /**
     * Sets The unique ID of the Billingentityinternal.
     * @param {Number} fkiBillingentityinternalID The unique ID of the Billingentityinternal.
     */
    setFkiBillingentityinternalID(fkiBillingentityinternalID) {
        this['fkiBillingentityinternalID'] = fkiBillingentityinternalID;
    }
/**
     * Returns The unique ID of the Usergroup
     * minimum: 0
     * maximum: 255
     * @return {Number}
     */
    getFkiUsergroupID() {
        return this.fkiUsergroupID;
    }

    /**
     * Sets The unique ID of the Usergroup
     * @param {Number} fkiUsergroupID The unique ID of the Usergroup
     */
    setFkiUsergroupID(fkiUsergroupID) {
        this['fkiUsergroupID'] = fkiUsergroupID;
    }
/**
     * Returns The unique ID of the Usergroup
     * minimum: 0
     * maximum: 255
     * @return {Number}
     */
    getFkiUsergroupIDRestricted() {
        return this.fkiUsergroupIDRestricted;
    }

    /**
     * Sets The unique ID of the Usergroup
     * @param {Number} fkiUsergroupIDRestricted The unique ID of the Usergroup
     */
    setFkiUsergroupIDRestricted(fkiUsergroupIDRestricted) {
        this['fkiUsergroupIDRestricted'] = fkiUsergroupIDRestricted;
    }
/**
     * Returns The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * minimum: 1
     * maximum: 3
     * @return {Number}
     */
    getFkiEzsigntsarequirementID() {
        return this.fkiEzsigntsarequirementID;
    }

    /**
     * Sets The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * @param {Number} fkiEzsigntsarequirementID The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     */
    setFkiEzsigntsarequirementID(fkiEzsigntsarequirementID) {
        this['fkiEzsigntsarequirementID'] = fkiEzsigntsarequirementID;
    }
/**
     * Returns The email address.
     * @return {String}
     */
    getSEmailAddressSigned() {
        return this.sEmailAddressSigned;
    }

    /**
     * Sets The email address.
     * @param {String} sEmailAddressSigned The email address.
     */
    setSEmailAddressSigned(sEmailAddressSigned) {
        this['sEmailAddressSigned'] = sEmailAddressSigned;
    }
/**
     * Returns The email address.
     * @return {String}
     */
    getSEmailAddressSummary() {
        return this.sEmailAddressSummary;
    }

    /**
     * Sets The email address.
     * @param {String} sEmailAddressSummary The email address.
     */
    setSEmailAddressSummary(sEmailAddressSummary) {
        this['sEmailAddressSummary'] = sEmailAddressSummary;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsignfoldertypePrivacylevel}
     */
    getEEzsignfoldertypePrivacylevel() {
        return this.eEzsignfoldertypePrivacylevel;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsignfoldertypePrivacylevel} eEzsignfoldertypePrivacylevel
     */
    setEEzsignfoldertypePrivacylevel(eEzsignfoldertypePrivacylevel) {
        this['eEzsignfoldertypePrivacylevel'] = eEzsignfoldertypePrivacylevel;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsignfoldertypeSendreminderfrequency}
     */
    getEEzsignfoldertypeSendreminderfrequency() {
        return this.eEzsignfoldertypeSendreminderfrequency;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsignfoldertypeSendreminderfrequency} eEzsignfoldertypeSendreminderfrequency
     */
    setEEzsignfoldertypeSendreminderfrequency(eEzsignfoldertypeSendreminderfrequency) {
        this['eEzsignfoldertypeSendreminderfrequency'] = eEzsignfoldertypeSendreminderfrequency;
    }
/**
     * Returns The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
     * minimum: 0
     * maximum: 180
     * @return {Number}
     */
    getIEzsignfoldertypeArchivaldays() {
        return this.iEzsignfoldertypeArchivaldays;
    }

    /**
     * Sets The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
     * @param {Number} iEzsignfoldertypeArchivaldays The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
     */
    setIEzsignfoldertypeArchivaldays(iEzsignfoldertypeArchivaldays) {
        this['iEzsignfoldertypeArchivaldays'] = iEzsignfoldertypeArchivaldays;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsignfoldertypeDisposal}
     */
    getEEzsignfoldertypeDisposal() {
        return this.eEzsignfoldertypeDisposal;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsignfoldertypeDisposal} eEzsignfoldertypeDisposal
     */
    setEEzsignfoldertypeDisposal(eEzsignfoldertypeDisposal) {
        this['eEzsignfoldertypeDisposal'] = eEzsignfoldertypeDisposal;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsignfoldertypeCompletion}
     */
    getEEzsignfoldertypeCompletion() {
        return this.eEzsignfoldertypeCompletion;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsignfoldertypeCompletion} eEzsignfoldertypeCompletion
     */
    setEEzsignfoldertypeCompletion(eEzsignfoldertypeCompletion) {
        this['eEzsignfoldertypeCompletion'] = eEzsignfoldertypeCompletion;
    }
/**
     * Returns The number of days after the archival before the disposal of the Ezsignfolder
     * minimum: 0
     * maximum: 9999
     * @return {Number}
     */
    getIEzsignfoldertypeDisposaldays() {
        return this.iEzsignfoldertypeDisposaldays;
    }

    /**
     * Sets The number of days after the archival before the disposal of the Ezsignfolder
     * @param {Number} iEzsignfoldertypeDisposaldays The number of days after the archival before the disposal of the Ezsignfolder
     */
    setIEzsignfoldertypeDisposaldays(iEzsignfoldertypeDisposaldays) {
        this['iEzsignfoldertypeDisposaldays'] = iEzsignfoldertypeDisposaldays;
    }
/**
     * Returns The number of days to get all Ezsignsignatures
     * minimum: 1
     * maximum: 60
     * @return {Number}
     */
    getIEzsignfoldertypeDeadlinedays() {
        return this.iEzsignfoldertypeDeadlinedays;
    }

    /**
     * Sets The number of days to get all Ezsignsignatures
     * @param {Number} iEzsignfoldertypeDeadlinedays The number of days to get all Ezsignsignatures
     */
    setIEzsignfoldertypeDeadlinedays(iEzsignfoldertypeDeadlinedays) {
        this['iEzsignfoldertypeDeadlinedays'] = iEzsignfoldertypeDeadlinedays;
    }
/**
     * Returns Wheter if delegation of signature is allowed to another user or not
     * @return {Boolean}
     */
    getBEzsignfoldertypeDelegate() {
        return this.bEzsignfoldertypeDelegate;
    }

    /**
     * Sets Wheter if delegation of signature is allowed to another user or not
     * @param {Boolean} bEzsignfoldertypeDelegate Wheter if delegation of signature is allowed to another user or not
     */
    setBEzsignfoldertypeDelegate(bEzsignfoldertypeDelegate) {
        this['bEzsignfoldertypeDelegate'] = bEzsignfoldertypeDelegate;
    }
/**
     * Returns Wheter if Reassignment of signature is allowed to another signatory or not
     * @return {Boolean}
     */
    getBEzsignfoldertypeReassign() {
        return this.bEzsignfoldertypeReassign;
    }

    /**
     * Sets Wheter if Reassignment of signature is allowed to another signatory or not
     * @param {Boolean} bEzsignfoldertypeReassign Wheter if Reassignment of signature is allowed to another signatory or not
     */
    setBEzsignfoldertypeReassign(bEzsignfoldertypeReassign) {
        this['bEzsignfoldertypeReassign'] = bEzsignfoldertypeReassign;
    }
/**
     * Returns Wheter if Reassignment of signature is allowed by a signatory to another signatory or not
     * @return {Boolean}
     */
    getBEzsignfoldertypeReassignezsignsigner() {
        return this.bEzsignfoldertypeReassignezsignsigner;
    }

    /**
     * Sets Wheter if Reassignment of signature is allowed by a signatory to another signatory or not
     * @param {Boolean} bEzsignfoldertypeReassignezsignsigner Wheter if Reassignment of signature is allowed by a signatory to another signatory or not
     */
    setBEzsignfoldertypeReassignezsignsigner(bEzsignfoldertypeReassignezsignsigner) {
        this['bEzsignfoldertypeReassignezsignsigner'] = bEzsignfoldertypeReassignezsignsigner;
    }
/**
     * Returns Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not
     * @return {Boolean}
     */
    getBEzsignfoldertypeReassignuser() {
        return this.bEzsignfoldertypeReassignuser;
    }

    /**
     * Sets Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not
     * @param {Boolean} bEzsignfoldertypeReassignuser Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not
     */
    setBEzsignfoldertypeReassignuser(bEzsignfoldertypeReassignuser) {
        this['bEzsignfoldertypeReassignuser'] = bEzsignfoldertypeReassignuser;
    }
/**
     * Returns THIS FIELD WILL BE DELETED. Whether we send the Ezsigndocument and the proof as attachment in the email
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendattatchmentsigner() {
        return this.bEzsignfoldertypeSendattatchmentsigner;
    }

    /**
     * Sets THIS FIELD WILL BE DELETED. Whether we send the Ezsigndocument and the proof as attachment in the email
     * @param {Boolean} bEzsignfoldertypeSendattatchmentsigner THIS FIELD WILL BE DELETED. Whether we send the Ezsigndocument and the proof as attachment in the email
     */
    setBEzsignfoldertypeSendattatchmentsigner(bEzsignfoldertypeSendattatchmentsigner) {
        this['bEzsignfoldertypeSendattatchmentsigner'] = bEzsignfoldertypeSendattatchmentsigner;
    }
/**
     * Returns Whether we send an email to Ezsignsigner  when document is completed
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsignedtoezsignsigner() {
        return this.bEzsignfoldertypeSendsignedtoezsignsigner;
    }

    /**
     * Sets Whether we send an email to Ezsignsigner  when document is completed
     * @param {Boolean} bEzsignfoldertypeSendsignedtoezsignsigner Whether we send an email to Ezsignsigner  when document is completed
     */
    setBEzsignfoldertypeSendsignedtoezsignsigner(bEzsignfoldertypeSendsignedtoezsignsigner) {
        this['bEzsignfoldertypeSendsignedtoezsignsigner'] = bEzsignfoldertypeSendsignedtoezsignsigner;
    }
/**
     * Returns Whether we send an email to User who signed when document is completed
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsignedtouser() {
        return this.bEzsignfoldertypeSendsignedtouser;
    }

    /**
     * Sets Whether we send an email to User who signed when document is completed
     * @param {Boolean} bEzsignfoldertypeSendsignedtouser Whether we send an email to User who signed when document is completed
     */
    setBEzsignfoldertypeSendsignedtouser(bEzsignfoldertypeSendsignedtouser) {
        this['bEzsignfoldertypeSendsignedtouser'] = bEzsignfoldertypeSendsignedtouser;
    }
/**
     * Returns Whether we send the Ezsigndocument in the email to Ezsignsigner
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendattachmentezsignsigner() {
        return this.bEzsignfoldertypeSendattachmentezsignsigner;
    }

    /**
     * Sets Whether we send the Ezsigndocument in the email to Ezsignsigner
     * @param {Boolean} bEzsignfoldertypeSendattachmentezsignsigner Whether we send the Ezsigndocument in the email to Ezsignsigner
     */
    setBEzsignfoldertypeSendattachmentezsignsigner(bEzsignfoldertypeSendattachmentezsignsigner) {
        this['bEzsignfoldertypeSendattachmentezsignsigner'] = bEzsignfoldertypeSendattachmentezsignsigner;
    }
/**
     * Returns Whether we send the proof in the email to Ezsignsigner
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendproofezsignsigner() {
        return this.bEzsignfoldertypeSendproofezsignsigner;
    }

    /**
     * Sets Whether we send the proof in the email to Ezsignsigner
     * @param {Boolean} bEzsignfoldertypeSendproofezsignsigner Whether we send the proof in the email to Ezsignsigner
     */
    setBEzsignfoldertypeSendproofezsignsigner(bEzsignfoldertypeSendproofezsignsigner) {
        this['bEzsignfoldertypeSendproofezsignsigner'] = bEzsignfoldertypeSendproofezsignsigner;
    }
/**
     * Returns Whether we send the Ezsigndocument in the email to User
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendattachmentuser() {
        return this.bEzsignfoldertypeSendattachmentuser;
    }

    /**
     * Sets Whether we send the Ezsigndocument in the email to User
     * @param {Boolean} bEzsignfoldertypeSendattachmentuser Whether we send the Ezsigndocument in the email to User
     */
    setBEzsignfoldertypeSendattachmentuser(bEzsignfoldertypeSendattachmentuser) {
        this['bEzsignfoldertypeSendattachmentuser'] = bEzsignfoldertypeSendattachmentuser;
    }
/**
     * Returns Whether we send the proof in the email to User
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendproofuser() {
        return this.bEzsignfoldertypeSendproofuser;
    }

    /**
     * Sets Whether we send the proof in the email to User
     * @param {Boolean} bEzsignfoldertypeSendproofuser Whether we send the proof in the email to User
     */
    setBEzsignfoldertypeSendproofuser(bEzsignfoldertypeSendproofuser) {
        this['bEzsignfoldertypeSendproofuser'] = bEzsignfoldertypeSendproofuser;
    }
/**
     * Returns Whether we send the proof in the email to external recipient
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendproofemail() {
        return this.bEzsignfoldertypeSendproofemail;
    }

    /**
     * Sets Whether we send the proof in the email to external recipient
     * @param {Boolean} bEzsignfoldertypeSendproofemail Whether we send the proof in the email to external recipient
     */
    setBEzsignfoldertypeSendproofemail(bEzsignfoldertypeSendproofemail) {
        this['bEzsignfoldertypeSendproofemail'] = bEzsignfoldertypeSendproofemail;
    }
/**
     * Returns Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner
     * @return {Boolean}
     */
    getBEzsignfoldertypeAllowdownloadattachmentezsignsigner() {
        return this.bEzsignfoldertypeAllowdownloadattachmentezsignsigner;
    }

    /**
     * Sets Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner
     * @param {Boolean} bEzsignfoldertypeAllowdownloadattachmentezsignsigner Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner
     */
    setBEzsignfoldertypeAllowdownloadattachmentezsignsigner(bEzsignfoldertypeAllowdownloadattachmentezsignsigner) {
        this['bEzsignfoldertypeAllowdownloadattachmentezsignsigner'] = bEzsignfoldertypeAllowdownloadattachmentezsignsigner;
    }
/**
     * Returns Whether we allow the proof to be downloaded by an Ezsignsigner
     * @return {Boolean}
     */
    getBEzsignfoldertypeAllowdownloadproofezsignsigner() {
        return this.bEzsignfoldertypeAllowdownloadproofezsignsigner;
    }

    /**
     * Sets Whether we allow the proof to be downloaded by an Ezsignsigner
     * @param {Boolean} bEzsignfoldertypeAllowdownloadproofezsignsigner Whether we allow the proof to be downloaded by an Ezsignsigner
     */
    setBEzsignfoldertypeAllowdownloadproofezsignsigner(bEzsignfoldertypeAllowdownloadproofezsignsigner) {
        this['bEzsignfoldertypeAllowdownloadproofezsignsigner'] = bEzsignfoldertypeAllowdownloadproofezsignsigner;
    }
/**
     * Returns Whether we send the proof to user and Ezsignsigner who receive all documents.
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendproofreceivealldocument() {
        return this.bEzsignfoldertypeSendproofreceivealldocument;
    }

    /**
     * Sets Whether we send the proof to user and Ezsignsigner who receive all documents.
     * @param {Boolean} bEzsignfoldertypeSendproofreceivealldocument Whether we send the proof to user and Ezsignsigner who receive all documents.
     */
    setBEzsignfoldertypeSendproofreceivealldocument(bEzsignfoldertypeSendproofreceivealldocument) {
        this['bEzsignfoldertypeSendproofreceivealldocument'] = bEzsignfoldertypeSendproofreceivealldocument;
    }
/**
     * Returns Whether we send the signed Ezsigndocument to the Ezsigndocument's owner
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsignedtodocumentowner() {
        return this.bEzsignfoldertypeSendsignedtodocumentowner;
    }

    /**
     * Sets Whether we send the signed Ezsigndocument to the Ezsigndocument's owner
     * @param {Boolean} bEzsignfoldertypeSendsignedtodocumentowner Whether we send the signed Ezsigndocument to the Ezsigndocument's owner
     */
    setBEzsignfoldertypeSendsignedtodocumentowner(bEzsignfoldertypeSendsignedtodocumentowner) {
        this['bEzsignfoldertypeSendsignedtodocumentowner'] = bEzsignfoldertypeSendsignedtodocumentowner;
    }
/**
     * Returns Whether we send the signed Ezsigndocument to the Ezsignfolder's owner
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsignedtofolderowner() {
        return this.bEzsignfoldertypeSendsignedtofolderowner;
    }

    /**
     * Sets Whether we send the signed Ezsigndocument to the Ezsignfolder's owner
     * @param {Boolean} bEzsignfoldertypeSendsignedtofolderowner Whether we send the signed Ezsigndocument to the Ezsignfolder's owner
     */
    setBEzsignfoldertypeSendsignedtofolderowner(bEzsignfoldertypeSendsignedtofolderowner) {
        this['bEzsignfoldertypeSendsignedtofolderowner'] = bEzsignfoldertypeSendsignedtofolderowner;
    }
/**
     * Returns Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsignedtofullgroup() {
        return this.bEzsignfoldertypeSendsignedtofullgroup;
    }

    /**
     * Sets Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
     * @param {Boolean} bEzsignfoldertypeSendsignedtofullgroup Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
     */
    setBEzsignfoldertypeSendsignedtofullgroup(bEzsignfoldertypeSendsignedtofullgroup) {
        this['bEzsignfoldertypeSendsignedtofullgroup'] = bEzsignfoldertypeSendsignedtofullgroup;
    }
/**
     * Returns THIS FIELD WILL BE DELETED. Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsignedtolimitedgroup() {
        return this.bEzsignfoldertypeSendsignedtolimitedgroup;
    }

    /**
     * Sets THIS FIELD WILL BE DELETED. Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
     * @param {Boolean} bEzsignfoldertypeSendsignedtolimitedgroup THIS FIELD WILL BE DELETED. Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
     */
    setBEzsignfoldertypeSendsignedtolimitedgroup(bEzsignfoldertypeSendsignedtolimitedgroup) {
        this['bEzsignfoldertypeSendsignedtolimitedgroup'] = bEzsignfoldertypeSendsignedtolimitedgroup;
    }
/**
     * Returns Whether we send the signed Ezsigndocument to the colleagues
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsignedtocolleague() {
        return this.bEzsignfoldertypeSendsignedtocolleague;
    }

    /**
     * Sets Whether we send the signed Ezsigndocument to the colleagues
     * @param {Boolean} bEzsignfoldertypeSendsignedtocolleague Whether we send the signed Ezsigndocument to the colleagues
     */
    setBEzsignfoldertypeSendsignedtocolleague(bEzsignfoldertypeSendsignedtocolleague) {
        this['bEzsignfoldertypeSendsignedtocolleague'] = bEzsignfoldertypeSendsignedtocolleague;
    }
/**
     * Returns Whether we send the summary to the Ezsigndocument's owner
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsummarytodocumentowner() {
        return this.bEzsignfoldertypeSendsummarytodocumentowner;
    }

    /**
     * Sets Whether we send the summary to the Ezsigndocument's owner
     * @param {Boolean} bEzsignfoldertypeSendsummarytodocumentowner Whether we send the summary to the Ezsigndocument's owner
     */
    setBEzsignfoldertypeSendsummarytodocumentowner(bEzsignfoldertypeSendsummarytodocumentowner) {
        this['bEzsignfoldertypeSendsummarytodocumentowner'] = bEzsignfoldertypeSendsummarytodocumentowner;
    }
/**
     * Returns Whether we send the summary to the Ezsignfolder's owner
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsummarytofolderowner() {
        return this.bEzsignfoldertypeSendsummarytofolderowner;
    }

    /**
     * Sets Whether we send the summary to the Ezsignfolder's owner
     * @param {Boolean} bEzsignfoldertypeSendsummarytofolderowner Whether we send the summary to the Ezsignfolder's owner
     */
    setBEzsignfoldertypeSendsummarytofolderowner(bEzsignfoldertypeSendsummarytofolderowner) {
        this['bEzsignfoldertypeSendsummarytofolderowner'] = bEzsignfoldertypeSendsummarytofolderowner;
    }
/**
     * Returns Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsummarytofullgroup() {
        return this.bEzsignfoldertypeSendsummarytofullgroup;
    }

    /**
     * Sets Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
     * @param {Boolean} bEzsignfoldertypeSendsummarytofullgroup Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
     */
    setBEzsignfoldertypeSendsummarytofullgroup(bEzsignfoldertypeSendsummarytofullgroup) {
        this['bEzsignfoldertypeSendsummarytofullgroup'] = bEzsignfoldertypeSendsummarytofullgroup;
    }
/**
     * Returns Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsummarytolimitedgroup() {
        return this.bEzsignfoldertypeSendsummarytolimitedgroup;
    }

    /**
     * Sets Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
     * @param {Boolean} bEzsignfoldertypeSendsummarytolimitedgroup Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
     */
    setBEzsignfoldertypeSendsummarytolimitedgroup(bEzsignfoldertypeSendsummarytolimitedgroup) {
        this['bEzsignfoldertypeSendsummarytolimitedgroup'] = bEzsignfoldertypeSendsummarytolimitedgroup;
    }
/**
     * Returns Whether we send the summary to the colleagues
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsummarytocolleague() {
        return this.bEzsignfoldertypeSendsummarytocolleague;
    }

    /**
     * Sets Whether we send the summary to the colleagues
     * @param {Boolean} bEzsignfoldertypeSendsummarytocolleague Whether we send the summary to the colleagues
     */
    setBEzsignfoldertypeSendsummarytocolleague(bEzsignfoldertypeSendsummarytocolleague) {
        this['bEzsignfoldertypeSendsummarytocolleague'] = bEzsignfoldertypeSendsummarytocolleague;
    }
/**
     * Returns THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
     * @return {Boolean}
     */
    getBEzsignfoldertypeIncludeproofsigner() {
        return this.bEzsignfoldertypeIncludeproofsigner;
    }

    /**
     * Sets THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
     * @param {Boolean} bEzsignfoldertypeIncludeproofsigner THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
     */
    setBEzsignfoldertypeIncludeproofsigner(bEzsignfoldertypeIncludeproofsigner) {
        this['bEzsignfoldertypeIncludeproofsigner'] = bEzsignfoldertypeIncludeproofsigner;
    }
/**
     * Returns Whether we include the proof with the signed Ezsigndocument for users
     * @return {Boolean}
     */
    getBEzsignfoldertypeIncludeproofuser() {
        return this.bEzsignfoldertypeIncludeproofuser;
    }

    /**
     * Sets Whether we include the proof with the signed Ezsigndocument for users
     * @param {Boolean} bEzsignfoldertypeIncludeproofuser Whether we include the proof with the signed Ezsigndocument for users
     */
    setBEzsignfoldertypeIncludeproofuser(bEzsignfoldertypeIncludeproofuser) {
        this['bEzsignfoldertypeIncludeproofuser'] = bEzsignfoldertypeIncludeproofuser;
    }
/**
     * Returns Whether the Ezsignfoldertype is active or not
     * @return {Boolean}
     */
    getBEzsignfoldertypeIsactive() {
        return this.bEzsignfoldertypeIsactive;
    }

    /**
     * Sets Whether the Ezsignfoldertype is active or not
     * @param {Boolean} bEzsignfoldertypeIsactive Whether the Ezsignfoldertype is active or not
     */
    setBEzsignfoldertypeIsactive(bEzsignfoldertypeIsactive) {
        this['bEzsignfoldertypeIsactive'] = bEzsignfoldertypeIsactive;
    }
/**
     * @return {Array.<Number>}
     */
    getAFkiUserIDSigned() {
        return this.a_fkiUserIDSigned;
    }

    /**
     * @param {Array.<Number>} a_fkiUserIDSigned
     */
    setAFkiUserIDSigned(a_fkiUserIDSigned) {
        this['a_fkiUserIDSigned'] = a_fkiUserIDSigned;
    }
/**
     * @return {Array.<Number>}
     */
    getAFkiUserIDSummary() {
        return this.a_fkiUserIDSummary;
    }

    /**
     * @param {Array.<Number>} a_fkiUserIDSummary
     */
    setAFkiUserIDSummary(a_fkiUserIDSummary) {
        this['a_fkiUserIDSummary'] = a_fkiUserIDSummary;
    }

}

EzsignfoldertypeRequestCompound.RequiredProperties = ["objEzsignfoldertypeName", "fkiBrandingID", "eEzsignfoldertypePrivacylevel", "iEzsignfoldertypeArchivaldays", "eEzsignfoldertypeDisposal", "iEzsignfoldertypeDeadlinedays", "bEzsignfoldertypeSendsignedtodocumentowner", "bEzsignfoldertypeSendsignedtofolderowner", "bEzsignfoldertypeSendsignedtocolleague", "bEzsignfoldertypeSendsummarytodocumentowner", "bEzsignfoldertypeSendsummarytofolderowner", "bEzsignfoldertypeSendsummarytocolleague", "bEzsignfoldertypeIncludeproofuser", "bEzsignfoldertypeIsactive"];

/**
 * The unique ID of the Ezsignfoldertype.
 * @member {Number} pkiEzsignfoldertypeID
 */
EzsignfoldertypeRequestCompound.prototype['pkiEzsignfoldertypeID'] = undefined;

/**
 * @member {module:eZmaxAPI/model/MultilingualEzsignfoldertypeName} objEzsignfoldertypeName
 */
EzsignfoldertypeRequestCompound.prototype['objEzsignfoldertypeName'] = undefined;

/**
 * The unique ID of the Branding
 * @member {Number} fkiBrandingID
 */
EzsignfoldertypeRequestCompound.prototype['fkiBrandingID'] = undefined;

/**
 * The unique ID of the Billingentityinternal.
 * @member {Number} fkiBillingentityinternalID
 */
EzsignfoldertypeRequestCompound.prototype['fkiBillingentityinternalID'] = undefined;

/**
 * The unique ID of the Usergroup
 * @member {Number} fkiUsergroupID
 */
EzsignfoldertypeRequestCompound.prototype['fkiUsergroupID'] = undefined;

/**
 * The unique ID of the Usergroup
 * @member {Number} fkiUsergroupIDRestricted
 */
EzsignfoldertypeRequestCompound.prototype['fkiUsergroupIDRestricted'] = undefined;

/**
 * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
 * @member {Number} fkiEzsigntsarequirementID
 */
EzsignfoldertypeRequestCompound.prototype['fkiEzsigntsarequirementID'] = undefined;

/**
 * The email address.
 * @member {String} sEmailAddressSigned
 */
EzsignfoldertypeRequestCompound.prototype['sEmailAddressSigned'] = undefined;

/**
 * The email address.
 * @member {String} sEmailAddressSummary
 */
EzsignfoldertypeRequestCompound.prototype['sEmailAddressSummary'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfoldertypePrivacylevel} eEzsignfoldertypePrivacylevel
 */
EzsignfoldertypeRequestCompound.prototype['eEzsignfoldertypePrivacylevel'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfoldertypeSendreminderfrequency} eEzsignfoldertypeSendreminderfrequency
 */
EzsignfoldertypeRequestCompound.prototype['eEzsignfoldertypeSendreminderfrequency'] = undefined;

/**
 * The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
 * @member {Number} iEzsignfoldertypeArchivaldays
 */
EzsignfoldertypeRequestCompound.prototype['iEzsignfoldertypeArchivaldays'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfoldertypeDisposal} eEzsignfoldertypeDisposal
 */
EzsignfoldertypeRequestCompound.prototype['eEzsignfoldertypeDisposal'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfoldertypeCompletion} eEzsignfoldertypeCompletion
 */
EzsignfoldertypeRequestCompound.prototype['eEzsignfoldertypeCompletion'] = undefined;

/**
 * The number of days after the archival before the disposal of the Ezsignfolder
 * @member {Number} iEzsignfoldertypeDisposaldays
 */
EzsignfoldertypeRequestCompound.prototype['iEzsignfoldertypeDisposaldays'] = undefined;

/**
 * The number of days to get all Ezsignsignatures
 * @member {Number} iEzsignfoldertypeDeadlinedays
 */
EzsignfoldertypeRequestCompound.prototype['iEzsignfoldertypeDeadlinedays'] = undefined;

/**
 * Wheter if delegation of signature is allowed to another user or not
 * @member {Boolean} bEzsignfoldertypeDelegate
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeDelegate'] = undefined;

/**
 * Wheter if Reassignment of signature is allowed to another signatory or not
 * @member {Boolean} bEzsignfoldertypeReassign
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeReassign'] = undefined;

/**
 * Wheter if Reassignment of signature is allowed by a signatory to another signatory or not
 * @member {Boolean} bEzsignfoldertypeReassignezsignsigner
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeReassignezsignsigner'] = undefined;

/**
 * Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not
 * @member {Boolean} bEzsignfoldertypeReassignuser
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeReassignuser'] = undefined;

/**
 * THIS FIELD WILL BE DELETED. Whether we send the Ezsigndocument and the proof as attachment in the email
 * @member {Boolean} bEzsignfoldertypeSendattatchmentsigner
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendattatchmentsigner'] = undefined;

/**
 * Whether we send an email to Ezsignsigner  when document is completed
 * @member {Boolean} bEzsignfoldertypeSendsignedtoezsignsigner
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendsignedtoezsignsigner'] = undefined;

/**
 * Whether we send an email to User who signed when document is completed
 * @member {Boolean} bEzsignfoldertypeSendsignedtouser
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendsignedtouser'] = undefined;

/**
 * Whether we send the Ezsigndocument in the email to Ezsignsigner
 * @member {Boolean} bEzsignfoldertypeSendattachmentezsignsigner
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendattachmentezsignsigner'] = undefined;

/**
 * Whether we send the proof in the email to Ezsignsigner
 * @member {Boolean} bEzsignfoldertypeSendproofezsignsigner
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendproofezsignsigner'] = undefined;

/**
 * Whether we send the Ezsigndocument in the email to User
 * @member {Boolean} bEzsignfoldertypeSendattachmentuser
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendattachmentuser'] = undefined;

/**
 * Whether we send the proof in the email to User
 * @member {Boolean} bEzsignfoldertypeSendproofuser
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendproofuser'] = undefined;

/**
 * Whether we send the proof in the email to external recipient
 * @member {Boolean} bEzsignfoldertypeSendproofemail
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendproofemail'] = undefined;

/**
 * Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner
 * @member {Boolean} bEzsignfoldertypeAllowdownloadattachmentezsignsigner
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeAllowdownloadattachmentezsignsigner'] = undefined;

/**
 * Whether we allow the proof to be downloaded by an Ezsignsigner
 * @member {Boolean} bEzsignfoldertypeAllowdownloadproofezsignsigner
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeAllowdownloadproofezsignsigner'] = undefined;

/**
 * Whether we send the proof to user and Ezsignsigner who receive all documents.
 * @member {Boolean} bEzsignfoldertypeSendproofreceivealldocument
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendproofreceivealldocument'] = undefined;

/**
 * Whether we send the signed Ezsigndocument to the Ezsigndocument's owner
 * @member {Boolean} bEzsignfoldertypeSendsignedtodocumentowner
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendsignedtodocumentowner'] = undefined;

/**
 * Whether we send the signed Ezsigndocument to the Ezsignfolder's owner
 * @member {Boolean} bEzsignfoldertypeSendsignedtofolderowner
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendsignedtofolderowner'] = undefined;

/**
 * Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsignedtofullgroup
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendsignedtofullgroup'] = undefined;

/**
 * THIS FIELD WILL BE DELETED. Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsignedtolimitedgroup
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendsignedtolimitedgroup'] = undefined;

/**
 * Whether we send the signed Ezsigndocument to the colleagues
 * @member {Boolean} bEzsignfoldertypeSendsignedtocolleague
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendsignedtocolleague'] = undefined;

/**
 * Whether we send the summary to the Ezsigndocument's owner
 * @member {Boolean} bEzsignfoldertypeSendsummarytodocumentowner
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendsummarytodocumentowner'] = undefined;

/**
 * Whether we send the summary to the Ezsignfolder's owner
 * @member {Boolean} bEzsignfoldertypeSendsummarytofolderowner
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendsummarytofolderowner'] = undefined;

/**
 * Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsummarytofullgroup
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendsummarytofullgroup'] = undefined;

/**
 * Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsummarytolimitedgroup
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendsummarytolimitedgroup'] = undefined;

/**
 * Whether we send the summary to the colleagues
 * @member {Boolean} bEzsignfoldertypeSendsummarytocolleague
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeSendsummarytocolleague'] = undefined;

/**
 * THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
 * @member {Boolean} bEzsignfoldertypeIncludeproofsigner
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeIncludeproofsigner'] = undefined;

/**
 * Whether we include the proof with the signed Ezsigndocument for users
 * @member {Boolean} bEzsignfoldertypeIncludeproofuser
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeIncludeproofuser'] = undefined;

/**
 * Whether the Ezsignfoldertype is active or not
 * @member {Boolean} bEzsignfoldertypeIsactive
 */
EzsignfoldertypeRequestCompound.prototype['bEzsignfoldertypeIsactive'] = undefined;

/**
 * @member {Array.<Number>} a_fkiUserIDSigned
 */
EzsignfoldertypeRequestCompound.prototype['a_fkiUserIDSigned'] = undefined;

/**
 * @member {Array.<Number>} a_fkiUserIDSummary
 */
EzsignfoldertypeRequestCompound.prototype['a_fkiUserIDSummary'] = undefined;


// Implement EzsignfoldertypeRequest interface:
/**
 * The unique ID of the Ezsignfoldertype.
 * @member {Number} pkiEzsignfoldertypeID
 */
EzsignfoldertypeRequest.prototype['pkiEzsignfoldertypeID'] = undefined;
/**
 * @member {module:eZmaxAPI/model/MultilingualEzsignfoldertypeName} objEzsignfoldertypeName
 */
EzsignfoldertypeRequest.prototype['objEzsignfoldertypeName'] = undefined;
/**
 * The unique ID of the Branding
 * @member {Number} fkiBrandingID
 */
EzsignfoldertypeRequest.prototype['fkiBrandingID'] = undefined;
/**
 * The unique ID of the Billingentityinternal.
 * @member {Number} fkiBillingentityinternalID
 */
EzsignfoldertypeRequest.prototype['fkiBillingentityinternalID'] = undefined;
/**
 * The unique ID of the Usergroup
 * @member {Number} fkiUsergroupID
 */
EzsignfoldertypeRequest.prototype['fkiUsergroupID'] = undefined;
/**
 * The unique ID of the Usergroup
 * @member {Number} fkiUsergroupIDRestricted
 */
EzsignfoldertypeRequest.prototype['fkiUsergroupIDRestricted'] = undefined;
/**
 * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
 * @member {Number} fkiEzsigntsarequirementID
 */
EzsignfoldertypeRequest.prototype['fkiEzsigntsarequirementID'] = undefined;
/**
 * The email address.
 * @member {String} sEmailAddressSigned
 */
EzsignfoldertypeRequest.prototype['sEmailAddressSigned'] = undefined;
/**
 * The email address.
 * @member {String} sEmailAddressSummary
 */
EzsignfoldertypeRequest.prototype['sEmailAddressSummary'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfoldertypePrivacylevel} eEzsignfoldertypePrivacylevel
 */
EzsignfoldertypeRequest.prototype['eEzsignfoldertypePrivacylevel'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfoldertypeSendreminderfrequency} eEzsignfoldertypeSendreminderfrequency
 */
EzsignfoldertypeRequest.prototype['eEzsignfoldertypeSendreminderfrequency'] = undefined;
/**
 * The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
 * @member {Number} iEzsignfoldertypeArchivaldays
 */
EzsignfoldertypeRequest.prototype['iEzsignfoldertypeArchivaldays'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfoldertypeDisposal} eEzsignfoldertypeDisposal
 */
EzsignfoldertypeRequest.prototype['eEzsignfoldertypeDisposal'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfoldertypeCompletion} eEzsignfoldertypeCompletion
 */
EzsignfoldertypeRequest.prototype['eEzsignfoldertypeCompletion'] = undefined;
/**
 * The number of days after the archival before the disposal of the Ezsignfolder
 * @member {Number} iEzsignfoldertypeDisposaldays
 */
EzsignfoldertypeRequest.prototype['iEzsignfoldertypeDisposaldays'] = undefined;
/**
 * The number of days to get all Ezsignsignatures
 * @member {Number} iEzsignfoldertypeDeadlinedays
 */
EzsignfoldertypeRequest.prototype['iEzsignfoldertypeDeadlinedays'] = undefined;
/**
 * Wheter if delegation of signature is allowed to another user or not
 * @member {Boolean} bEzsignfoldertypeDelegate
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeDelegate'] = undefined;
/**
 * Wheter if Reassignment of signature is allowed to another signatory or not
 * @member {Boolean} bEzsignfoldertypeReassign
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeReassign'] = undefined;
/**
 * Wheter if Reassignment of signature is allowed by a signatory to another signatory or not
 * @member {Boolean} bEzsignfoldertypeReassignezsignsigner
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeReassignezsignsigner'] = undefined;
/**
 * Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not
 * @member {Boolean} bEzsignfoldertypeReassignuser
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeReassignuser'] = undefined;
/**
 * THIS FIELD WILL BE DELETED. Whether we send the Ezsigndocument and the proof as attachment in the email
 * @member {Boolean} bEzsignfoldertypeSendattatchmentsigner
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendattatchmentsigner'] = undefined;
/**
 * Whether we send an email to Ezsignsigner  when document is completed
 * @member {Boolean} bEzsignfoldertypeSendsignedtoezsignsigner
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendsignedtoezsignsigner'] = undefined;
/**
 * Whether we send an email to User who signed when document is completed
 * @member {Boolean} bEzsignfoldertypeSendsignedtouser
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendsignedtouser'] = undefined;
/**
 * Whether we send the Ezsigndocument in the email to Ezsignsigner
 * @member {Boolean} bEzsignfoldertypeSendattachmentezsignsigner
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendattachmentezsignsigner'] = undefined;
/**
 * Whether we send the proof in the email to Ezsignsigner
 * @member {Boolean} bEzsignfoldertypeSendproofezsignsigner
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendproofezsignsigner'] = undefined;
/**
 * Whether we send the Ezsigndocument in the email to User
 * @member {Boolean} bEzsignfoldertypeSendattachmentuser
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendattachmentuser'] = undefined;
/**
 * Whether we send the proof in the email to User
 * @member {Boolean} bEzsignfoldertypeSendproofuser
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendproofuser'] = undefined;
/**
 * Whether we send the proof in the email to external recipient
 * @member {Boolean} bEzsignfoldertypeSendproofemail
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendproofemail'] = undefined;
/**
 * Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner
 * @member {Boolean} bEzsignfoldertypeAllowdownloadattachmentezsignsigner
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeAllowdownloadattachmentezsignsigner'] = undefined;
/**
 * Whether we allow the proof to be downloaded by an Ezsignsigner
 * @member {Boolean} bEzsignfoldertypeAllowdownloadproofezsignsigner
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeAllowdownloadproofezsignsigner'] = undefined;
/**
 * Whether we send the proof to user and Ezsignsigner who receive all documents.
 * @member {Boolean} bEzsignfoldertypeSendproofreceivealldocument
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendproofreceivealldocument'] = undefined;
/**
 * Whether we send the signed Ezsigndocument to the Ezsigndocument's owner
 * @member {Boolean} bEzsignfoldertypeSendsignedtodocumentowner
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendsignedtodocumentowner'] = undefined;
/**
 * Whether we send the signed Ezsigndocument to the Ezsignfolder's owner
 * @member {Boolean} bEzsignfoldertypeSendsignedtofolderowner
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendsignedtofolderowner'] = undefined;
/**
 * Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsignedtofullgroup
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendsignedtofullgroup'] = undefined;
/**
 * THIS FIELD WILL BE DELETED. Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsignedtolimitedgroup
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendsignedtolimitedgroup'] = undefined;
/**
 * Whether we send the signed Ezsigndocument to the colleagues
 * @member {Boolean} bEzsignfoldertypeSendsignedtocolleague
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendsignedtocolleague'] = undefined;
/**
 * Whether we send the summary to the Ezsigndocument's owner
 * @member {Boolean} bEzsignfoldertypeSendsummarytodocumentowner
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendsummarytodocumentowner'] = undefined;
/**
 * Whether we send the summary to the Ezsignfolder's owner
 * @member {Boolean} bEzsignfoldertypeSendsummarytofolderowner
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendsummarytofolderowner'] = undefined;
/**
 * Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsummarytofullgroup
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendsummarytofullgroup'] = undefined;
/**
 * Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsummarytolimitedgroup
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendsummarytolimitedgroup'] = undefined;
/**
 * Whether we send the summary to the colleagues
 * @member {Boolean} bEzsignfoldertypeSendsummarytocolleague
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeSendsummarytocolleague'] = undefined;
/**
 * THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
 * @member {Boolean} bEzsignfoldertypeIncludeproofsigner
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeIncludeproofsigner'] = undefined;
/**
 * Whether we include the proof with the signed Ezsigndocument for users
 * @member {Boolean} bEzsignfoldertypeIncludeproofuser
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeIncludeproofuser'] = undefined;
/**
 * Whether the Ezsignfoldertype is active or not
 * @member {Boolean} bEzsignfoldertypeIsactive
 */
EzsignfoldertypeRequest.prototype['bEzsignfoldertypeIsactive'] = undefined;




export default EzsignfoldertypeRequestCompound;

