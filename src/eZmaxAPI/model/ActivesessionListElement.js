/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ActivesessionListElement model module.
 * @module eZmaxAPI/model/ActivesessionListElement
 * @version 1.2.0
 */
class ActivesessionListElement {
    /**
     * Constructs a new <code>ActivesessionListElement</code>.
     * A Activesession List Element
     * @alias module:eZmaxAPI/model/ActivesessionListElement
     * @param pkiActivesessionID {Number} The unique ID of the Activesession
     * @param fkiUserID {Number} The unique ID of the User
     * @param fkiComputerID {Number} The unique ID of the Computer
     * @param fkiCompanyID {Number} The unique ID of the Company
     * @param fkiDepartmentID {Number} The unique ID of the Department
     * @param sCompanyNameX {String} The Name of the Company in the language of the requester
     * @param sDepartmentNameX {String} The Name of the Department in the language of the requester
     * @param sActivesessionLoginname {String} The loginname of the Activesession
     * @param sComputerDescription {String} The description of the Computer
     * @param dtActivesessionFirsthit {String} The first hit of the Activesession
     * @param dtActivesessionLasthit {String} The last hit of the Activesession
     * @param sActivesessionIP {String} Represent an IP address.
     */
    constructor(pkiActivesessionID, fkiUserID, fkiComputerID, fkiCompanyID, fkiDepartmentID, sCompanyNameX, sDepartmentNameX, sActivesessionLoginname, sComputerDescription, dtActivesessionFirsthit, dtActivesessionLasthit, sActivesessionIP) { 
        
        ActivesessionListElement.initialize(this, pkiActivesessionID, fkiUserID, fkiComputerID, fkiCompanyID, fkiDepartmentID, sCompanyNameX, sDepartmentNameX, sActivesessionLoginname, sComputerDescription, dtActivesessionFirsthit, dtActivesessionLasthit, sActivesessionIP);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pkiActivesessionID, fkiUserID, fkiComputerID, fkiCompanyID, fkiDepartmentID, sCompanyNameX, sDepartmentNameX, sActivesessionLoginname, sComputerDescription, dtActivesessionFirsthit, dtActivesessionLasthit, sActivesessionIP) { 
        obj['pkiActivesessionID'] = pkiActivesessionID;
        obj['fkiUserID'] = fkiUserID;
        obj['fkiComputerID'] = fkiComputerID;
        obj['fkiCompanyID'] = fkiCompanyID;
        obj['fkiDepartmentID'] = fkiDepartmentID;
        obj['sCompanyNameX'] = sCompanyNameX;
        obj['sDepartmentNameX'] = sDepartmentNameX;
        obj['sActivesessionLoginname'] = sActivesessionLoginname;
        obj['sComputerDescription'] = sComputerDescription;
        obj['dtActivesessionFirsthit'] = dtActivesessionFirsthit;
        obj['dtActivesessionLasthit'] = dtActivesessionLasthit;
        obj['sActivesessionIP'] = sActivesessionIP;
    }

    /**
     * Constructs a <code>ActivesessionListElement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/ActivesessionListElement} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/ActivesessionListElement} The populated <code>ActivesessionListElement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivesessionListElement();

            if (data.hasOwnProperty('pkiActivesessionID')) {
                obj['pkiActivesessionID'] = ApiClient.convertToType(data['pkiActivesessionID'], 'Number');
            }
            if (data.hasOwnProperty('fkiUserID')) {
                obj['fkiUserID'] = ApiClient.convertToType(data['fkiUserID'], 'Number');
            }
            if (data.hasOwnProperty('fkiComputerID')) {
                obj['fkiComputerID'] = ApiClient.convertToType(data['fkiComputerID'], 'Number');
            }
            if (data.hasOwnProperty('fkiCompanyID')) {
                obj['fkiCompanyID'] = ApiClient.convertToType(data['fkiCompanyID'], 'Number');
            }
            if (data.hasOwnProperty('fkiDepartmentID')) {
                obj['fkiDepartmentID'] = ApiClient.convertToType(data['fkiDepartmentID'], 'Number');
            }
            if (data.hasOwnProperty('sCompanyNameX')) {
                obj['sCompanyNameX'] = ApiClient.convertToType(data['sCompanyNameX'], 'String');
            }
            if (data.hasOwnProperty('sDepartmentNameX')) {
                obj['sDepartmentNameX'] = ApiClient.convertToType(data['sDepartmentNameX'], 'String');
            }
            if (data.hasOwnProperty('sActivesessionLoginname')) {
                obj['sActivesessionLoginname'] = ApiClient.convertToType(data['sActivesessionLoginname'], 'String');
            }
            if (data.hasOwnProperty('sComputerDescription')) {
                obj['sComputerDescription'] = ApiClient.convertToType(data['sComputerDescription'], 'String');
            }
            if (data.hasOwnProperty('dtActivesessionFirsthit')) {
                obj['dtActivesessionFirsthit'] = ApiClient.convertToType(data['dtActivesessionFirsthit'], 'String');
            }
            if (data.hasOwnProperty('dtActivesessionLasthit')) {
                obj['dtActivesessionLasthit'] = ApiClient.convertToType(data['dtActivesessionLasthit'], 'String');
            }
            if (data.hasOwnProperty('sActivesessionIP')) {
                obj['sActivesessionIP'] = ApiClient.convertToType(data['sActivesessionIP'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivesessionListElement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivesessionListElement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ActivesessionListElement.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sCompanyNameX'] && !(typeof data['sCompanyNameX'] === 'string' || data['sCompanyNameX'] instanceof String)) {
            throw new Error("Expected the field `sCompanyNameX` to be a primitive type in the JSON string but got " + data['sCompanyNameX']);
        }
        // ensure the json data is a string
        if (data['sDepartmentNameX'] && !(typeof data['sDepartmentNameX'] === 'string' || data['sDepartmentNameX'] instanceof String)) {
            throw new Error("Expected the field `sDepartmentNameX` to be a primitive type in the JSON string but got " + data['sDepartmentNameX']);
        }
        // ensure the json data is a string
        if (data['sActivesessionLoginname'] && !(typeof data['sActivesessionLoginname'] === 'string' || data['sActivesessionLoginname'] instanceof String)) {
            throw new Error("Expected the field `sActivesessionLoginname` to be a primitive type in the JSON string but got " + data['sActivesessionLoginname']);
        }
        // ensure the json data is a string
        if (data['sComputerDescription'] && !(typeof data['sComputerDescription'] === 'string' || data['sComputerDescription'] instanceof String)) {
            throw new Error("Expected the field `sComputerDescription` to be a primitive type in the JSON string but got " + data['sComputerDescription']);
        }
        // ensure the json data is a string
        if (data['dtActivesessionFirsthit'] && !(typeof data['dtActivesessionFirsthit'] === 'string' || data['dtActivesessionFirsthit'] instanceof String)) {
            throw new Error("Expected the field `dtActivesessionFirsthit` to be a primitive type in the JSON string but got " + data['dtActivesessionFirsthit']);
        }
        // ensure the json data is a string
        if (data['dtActivesessionLasthit'] && !(typeof data['dtActivesessionLasthit'] === 'string' || data['dtActivesessionLasthit'] instanceof String)) {
            throw new Error("Expected the field `dtActivesessionLasthit` to be a primitive type in the JSON string but got " + data['dtActivesessionLasthit']);
        }
        // ensure the json data is a string
        if (data['sActivesessionIP'] && !(typeof data['sActivesessionIP'] === 'string' || data['sActivesessionIP'] instanceof String)) {
            throw new Error("Expected the field `sActivesessionIP` to be a primitive type in the JSON string but got " + data['sActivesessionIP']);
        }

        return true;
    }

/**
     * Returns The unique ID of the Activesession
     * @return {Number}
     */
    getPkiActivesessionID() {
        return this.pkiActivesessionID;
    }

    /**
     * Sets The unique ID of the Activesession
     * @param {Number} pkiActivesessionID The unique ID of the Activesession
     */
    setPkiActivesessionID(pkiActivesessionID) {
        this['pkiActivesessionID'] = pkiActivesessionID;
    }
/**
     * Returns The unique ID of the User
     * minimum: 0
     * @return {Number}
     */
    getFkiUserID() {
        return this.fkiUserID;
    }

    /**
     * Sets The unique ID of the User
     * @param {Number} fkiUserID The unique ID of the User
     */
    setFkiUserID(fkiUserID) {
        this['fkiUserID'] = fkiUserID;
    }
/**
     * Returns The unique ID of the Computer
     * minimum: 1
     * maximum: 65535
     * @return {Number}
     */
    getFkiComputerID() {
        return this.fkiComputerID;
    }

    /**
     * Sets The unique ID of the Computer
     * @param {Number} fkiComputerID The unique ID of the Computer
     */
    setFkiComputerID(fkiComputerID) {
        this['fkiComputerID'] = fkiComputerID;
    }
/**
     * Returns The unique ID of the Company
     * minimum: 1
     * maximum: 255
     * @return {Number}
     */
    getFkiCompanyID() {
        return this.fkiCompanyID;
    }

    /**
     * Sets The unique ID of the Company
     * @param {Number} fkiCompanyID The unique ID of the Company
     */
    setFkiCompanyID(fkiCompanyID) {
        this['fkiCompanyID'] = fkiCompanyID;
    }
/**
     * Returns The unique ID of the Department
     * minimum: 0
     * @return {Number}
     */
    getFkiDepartmentID() {
        return this.fkiDepartmentID;
    }

    /**
     * Sets The unique ID of the Department
     * @param {Number} fkiDepartmentID The unique ID of the Department
     */
    setFkiDepartmentID(fkiDepartmentID) {
        this['fkiDepartmentID'] = fkiDepartmentID;
    }
/**
     * Returns The Name of the Company in the language of the requester
     * @return {String}
     */
    getSCompanyNameX() {
        return this.sCompanyNameX;
    }

    /**
     * Sets The Name of the Company in the language of the requester
     * @param {String} sCompanyNameX The Name of the Company in the language of the requester
     */
    setSCompanyNameX(sCompanyNameX) {
        this['sCompanyNameX'] = sCompanyNameX;
    }
/**
     * Returns The Name of the Department in the language of the requester
     * @return {String}
     */
    getSDepartmentNameX() {
        return this.sDepartmentNameX;
    }

    /**
     * Sets The Name of the Department in the language of the requester
     * @param {String} sDepartmentNameX The Name of the Department in the language of the requester
     */
    setSDepartmentNameX(sDepartmentNameX) {
        this['sDepartmentNameX'] = sDepartmentNameX;
    }
/**
     * Returns The loginname of the Activesession
     * @return {String}
     */
    getSActivesessionLoginname() {
        return this.sActivesessionLoginname;
    }

    /**
     * Sets The loginname of the Activesession
     * @param {String} sActivesessionLoginname The loginname of the Activesession
     */
    setSActivesessionLoginname(sActivesessionLoginname) {
        this['sActivesessionLoginname'] = sActivesessionLoginname;
    }
/**
     * Returns The description of the Computer
     * @return {String}
     */
    getSComputerDescription() {
        return this.sComputerDescription;
    }

    /**
     * Sets The description of the Computer
     * @param {String} sComputerDescription The description of the Computer
     */
    setSComputerDescription(sComputerDescription) {
        this['sComputerDescription'] = sComputerDescription;
    }
/**
     * Returns The first hit of the Activesession
     * @return {String}
     */
    getDtActivesessionFirsthit() {
        return this.dtActivesessionFirsthit;
    }

    /**
     * Sets The first hit of the Activesession
     * @param {String} dtActivesessionFirsthit The first hit of the Activesession
     */
    setDtActivesessionFirsthit(dtActivesessionFirsthit) {
        this['dtActivesessionFirsthit'] = dtActivesessionFirsthit;
    }
/**
     * Returns The last hit of the Activesession
     * @return {String}
     */
    getDtActivesessionLasthit() {
        return this.dtActivesessionLasthit;
    }

    /**
     * Sets The last hit of the Activesession
     * @param {String} dtActivesessionLasthit The last hit of the Activesession
     */
    setDtActivesessionLasthit(dtActivesessionLasthit) {
        this['dtActivesessionLasthit'] = dtActivesessionLasthit;
    }
/**
     * Returns Represent an IP address.
     * @return {String}
     */
    getSActivesessionIP() {
        return this.sActivesessionIP;
    }

    /**
     * Sets Represent an IP address.
     * @param {String} sActivesessionIP Represent an IP address.
     */
    setSActivesessionIP(sActivesessionIP) {
        this['sActivesessionIP'] = sActivesessionIP;
    }

}

ActivesessionListElement.RequiredProperties = ["pkiActivesessionID", "fkiUserID", "fkiComputerID", "fkiCompanyID", "fkiDepartmentID", "sCompanyNameX", "sDepartmentNameX", "sActivesessionLoginname", "sComputerDescription", "dtActivesessionFirsthit", "dtActivesessionLasthit", "sActivesessionIP"];

/**
 * The unique ID of the Activesession
 * @member {Number} pkiActivesessionID
 */
ActivesessionListElement.prototype['pkiActivesessionID'] = undefined;

/**
 * The unique ID of the User
 * @member {Number} fkiUserID
 */
ActivesessionListElement.prototype['fkiUserID'] = undefined;

/**
 * The unique ID of the Computer
 * @member {Number} fkiComputerID
 */
ActivesessionListElement.prototype['fkiComputerID'] = undefined;

/**
 * The unique ID of the Company
 * @member {Number} fkiCompanyID
 */
ActivesessionListElement.prototype['fkiCompanyID'] = undefined;

/**
 * The unique ID of the Department
 * @member {Number} fkiDepartmentID
 */
ActivesessionListElement.prototype['fkiDepartmentID'] = undefined;

/**
 * The Name of the Company in the language of the requester
 * @member {String} sCompanyNameX
 */
ActivesessionListElement.prototype['sCompanyNameX'] = undefined;

/**
 * The Name of the Department in the language of the requester
 * @member {String} sDepartmentNameX
 */
ActivesessionListElement.prototype['sDepartmentNameX'] = undefined;

/**
 * The loginname of the Activesession
 * @member {String} sActivesessionLoginname
 */
ActivesessionListElement.prototype['sActivesessionLoginname'] = undefined;

/**
 * The description of the Computer
 * @member {String} sComputerDescription
 */
ActivesessionListElement.prototype['sComputerDescription'] = undefined;

/**
 * The first hit of the Activesession
 * @member {String} dtActivesessionFirsthit
 */
ActivesessionListElement.prototype['dtActivesessionFirsthit'] = undefined;

/**
 * The last hit of the Activesession
 * @member {String} dtActivesessionLasthit
 */
ActivesessionListElement.prototype['dtActivesessionLasthit'] = undefined;

/**
 * Represent an IP address.
 * @member {String} sActivesessionIP
 */
ActivesessionListElement.prototype['sActivesessionIP'] = undefined;






export default ActivesessionListElement;

