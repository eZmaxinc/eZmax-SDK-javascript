/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommonFile from './CommonFile';

/**
 * The EzsignsignatureSignV1Request model module.
 * @module eZmaxAPI/model/EzsignsignatureSignV1Request
 * @version 1.2.0
 */
class EzsignsignatureSignV1Request {
    /**
     * Constructs a new <code>EzsignsignatureSignV1Request</code>.
     * Request for POST /1/object/ezsignsignature/{pkiEzsignsignatureID}/sign
     * @alias module:eZmaxAPI/model/EzsignsignatureSignV1Request
     * @param bIsAutomatic {Boolean} Indicates if the Ezsignsignature was part of an automatic process or not.  This can only be true if eEzsignsignatureType is **Acknowledgement**, **City**, **Handwritten**, **Initials**, **Name** or **Stamp**. 
     */
    constructor(bIsAutomatic) { 
        
        EzsignsignatureSignV1Request.initialize(this, bIsAutomatic);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bIsAutomatic) { 
        obj['bIsAutomatic'] = bIsAutomatic;
    }

    /**
     * Constructs a <code>EzsignsignatureSignV1Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/EzsignsignatureSignV1Request} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/EzsignsignatureSignV1Request} The populated <code>EzsignsignatureSignV1Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EzsignsignatureSignV1Request();

            if (data.hasOwnProperty('sValue')) {
                obj['sValue'] = ApiClient.convertToType(data['sValue'], 'String');
            }
            if (data.hasOwnProperty('eAttachmentsConfirmationDecision')) {
                obj['eAttachmentsConfirmationDecision'] = ApiClient.convertToType(data['eAttachmentsConfirmationDecision'], 'String');
            }
            if (data.hasOwnProperty('sAttachmentsRefusalReason')) {
                obj['sAttachmentsRefusalReason'] = ApiClient.convertToType(data['sAttachmentsRefusalReason'], 'String');
            }
            if (data.hasOwnProperty('sSvg')) {
                obj['sSvg'] = ApiClient.convertToType(data['sSvg'], 'String');
            }
            if (data.hasOwnProperty('a_objFile')) {
                obj['a_objFile'] = ApiClient.convertToType(data['a_objFile'], [CommonFile]);
            }
            if (data.hasOwnProperty('bIsAutomatic')) {
                obj['bIsAutomatic'] = ApiClient.convertToType(data['bIsAutomatic'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EzsignsignatureSignV1Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EzsignsignatureSignV1Request</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EzsignsignatureSignV1Request.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sValue'] && !(typeof data['sValue'] === 'string' || data['sValue'] instanceof String)) {
            throw new Error("Expected the field `sValue` to be a primitive type in the JSON string but got " + data['sValue']);
        }
        // ensure the json data is a string
        if (data['eAttachmentsConfirmationDecision'] && !(typeof data['eAttachmentsConfirmationDecision'] === 'string' || data['eAttachmentsConfirmationDecision'] instanceof String)) {
            throw new Error("Expected the field `eAttachmentsConfirmationDecision` to be a primitive type in the JSON string but got " + data['eAttachmentsConfirmationDecision']);
        }
        // ensure the json data is a string
        if (data['sAttachmentsRefusalReason'] && !(typeof data['sAttachmentsRefusalReason'] === 'string' || data['sAttachmentsRefusalReason'] instanceof String)) {
            throw new Error("Expected the field `sAttachmentsRefusalReason` to be a primitive type in the JSON string but got " + data['sAttachmentsRefusalReason']);
        }
        // ensure the json data is a string
        if (data['sSvg'] && !(typeof data['sSvg'] === 'string' || data['sSvg'] instanceof String)) {
            throw new Error("Expected the field `sSvg` to be a primitive type in the JSON string but got " + data['sSvg']);
        }
        if (data['a_objFile']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['a_objFile'])) {
                throw new Error("Expected the field `a_objFile` to be an array in the JSON data but got " + data['a_objFile']);
            }
            // validate the optional field `a_objFile` (array)
            for (const item of data['a_objFile']) {
                CommonFile.validateJSON(item);
            };
        }

        return true;
    }

/**
     * Returns The value required for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **City**, **FieldText** or **FieldTextarea**
     * @return {String}
     */
    getSValue() {
        return this.sValue;
    }

    /**
     * Sets The value required for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **City**, **FieldText** or **FieldTextarea**
     * @param {String} sValue The value required for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **City**, **FieldText** or **FieldTextarea**
     */
    setSValue(sValue) {
        this['sValue'] = sValue;
    }
/**
     * Returns Whether the attachment are accepted or refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
     * @return {module:eZmaxAPI/model/EzsignsignatureSignV1Request.EAttachmentsConfirmationDecisionEnum}
     */
    getEAttachmentsConfirmationDecision() {
        return this.eAttachmentsConfirmationDecision;
    }

    /**
     * Sets Whether the attachment are accepted or refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
     * @param {module:eZmaxAPI/model/EzsignsignatureSignV1Request.EAttachmentsConfirmationDecisionEnum} eAttachmentsConfirmationDecision Whether the attachment are accepted or refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
     */
    setEAttachmentsConfirmationDecision(eAttachmentsConfirmationDecision) {
        this['eAttachmentsConfirmationDecision'] = eAttachmentsConfirmationDecision;
    }
/**
     * Returns The reason of refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
     * @return {String}
     */
    getSAttachmentsRefusalReason() {
        return this.sAttachmentsRefusalReason;
    }

    /**
     * Sets The reason of refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
     * @param {String} sAttachmentsRefusalReason The reason of refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
     */
    setSAttachmentsRefusalReason(sAttachmentsRefusalReason) {
        this['sAttachmentsRefusalReason'] = sAttachmentsRefusalReason;
    }
/**
     * Returns The SVG of the handwritten signature.  This can only be set if eEzsignsignatureType is **Handwritten** and **bIsAutomatic** is false
     * @return {String}
     */
    getSSvg() {
        return this.sSvg;
    }

    /**
     * Sets The SVG of the handwritten signature.  This can only be set if eEzsignsignatureType is **Handwritten** and **bIsAutomatic** is false
     * @param {String} sSvg The SVG of the handwritten signature.  This can only be set if eEzsignsignatureType is **Handwritten** and **bIsAutomatic** is false
     */
    setSSvg(sSvg) {
        this['sSvg'] = sSvg;
    }
/**
     * @return {Array.<module:eZmaxAPI/model/CommonFile>}
     */
    getAObjFile() {
        return this.a_objFile;
    }

    /**
     * @param {Array.<module:eZmaxAPI/model/CommonFile>} a_objFile
     */
    setAObjFile(a_objFile) {
        this['a_objFile'] = a_objFile;
    }
/**
     * Returns Indicates if the Ezsignsignature was part of an automatic process or not.  This can only be true if eEzsignsignatureType is **Acknowledgement**, **City**, **Handwritten**, **Initials**, **Name** or **Stamp**. 
     * @return {Boolean}
     */
    getBIsAutomatic() {
        return this.bIsAutomatic;
    }

    /**
     * Sets Indicates if the Ezsignsignature was part of an automatic process or not.  This can only be true if eEzsignsignatureType is **Acknowledgement**, **City**, **Handwritten**, **Initials**, **Name** or **Stamp**. 
     * @param {Boolean} bIsAutomatic Indicates if the Ezsignsignature was part of an automatic process or not.  This can only be true if eEzsignsignatureType is **Acknowledgement**, **City**, **Handwritten**, **Initials**, **Name** or **Stamp**. 
     */
    setBIsAutomatic(bIsAutomatic) {
        this['bIsAutomatic'] = bIsAutomatic;
    }

}

EzsignsignatureSignV1Request.RequiredProperties = ["bIsAutomatic"];

/**
 * The value required for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **City**, **FieldText** or **FieldTextarea**
 * @member {String} sValue
 */
EzsignsignatureSignV1Request.prototype['sValue'] = undefined;

/**
 * Whether the attachment are accepted or refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
 * @member {module:eZmaxAPI/model/EzsignsignatureSignV1Request.EAttachmentsConfirmationDecisionEnum} eAttachmentsConfirmationDecision
 */
EzsignsignatureSignV1Request.prototype['eAttachmentsConfirmationDecision'] = undefined;

/**
 * The reason of refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
 * @member {String} sAttachmentsRefusalReason
 */
EzsignsignatureSignV1Request.prototype['sAttachmentsRefusalReason'] = undefined;

/**
 * The SVG of the handwritten signature.  This can only be set if eEzsignsignatureType is **Handwritten** and **bIsAutomatic** is false
 * @member {String} sSvg
 */
EzsignsignatureSignV1Request.prototype['sSvg'] = undefined;

/**
 * @member {Array.<module:eZmaxAPI/model/CommonFile>} a_objFile
 */
EzsignsignatureSignV1Request.prototype['a_objFile'] = undefined;

/**
 * Indicates if the Ezsignsignature was part of an automatic process or not.  This can only be true if eEzsignsignatureType is **Acknowledgement**, **City**, **Handwritten**, **Initials**, **Name** or **Stamp**. 
 * @member {Boolean} bIsAutomatic
 */
EzsignsignatureSignV1Request.prototype['bIsAutomatic'] = undefined;





/**
 * Allowed values for the <code>eAttachmentsConfirmationDecision</code> property.
 * @enum {String}
 * @readonly
 */
EzsignsignatureSignV1Request['EAttachmentsConfirmationDecisionEnum'] = {

    /**
     * value: "Accepted"
     * @const
     */
    "Accepted": "Accepted",

    /**
     * value: "Refused"
     * @const
     */
    "Refused": "Refused"
};



export default EzsignsignatureSignV1Request;

