/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScimUser from './ScimUser';

/**
 * The ScimUserList model module.
 * @module eZmaxAPI/model/ScimUserList
 * @version 1.2.0
 */
class ScimUserList {
    /**
     * Constructs a new <code>ScimUserList</code>.
     * @alias module:eZmaxAPI/model/ScimUserList
     */
    constructor() { 
        
        ScimUserList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScimUserList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/ScimUserList} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/ScimUserList} The populated <code>ScimUserList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScimUserList();

            if (data.hasOwnProperty('totalResults')) {
                obj['totalResults'] = ApiClient.convertToType(data['totalResults'], 'Number');
            }
            if (data.hasOwnProperty('itemsPerPage')) {
                obj['itemsPerPage'] = ApiClient.convertToType(data['itemsPerPage'], 'Number');
            }
            if (data.hasOwnProperty('startIndex')) {
                obj['startIndex'] = ApiClient.convertToType(data['startIndex'], 'Number');
            }
            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], ['String']);
            }
            if (data.hasOwnProperty('Resources')) {
                obj['Resources'] = ApiClient.convertToType(data['Resources'], [ScimUser]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScimUserList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScimUserList</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['schemas'])) {
            throw new Error("Expected the field `schemas` to be an array in the JSON data but got " + data['schemas']);
        }
        if (data['Resources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Resources'])) {
                throw new Error("Expected the field `Resources` to be an array in the JSON data but got " + data['Resources']);
            }
            // validate the optional field `Resources` (array)
            for (const item of data['Resources']) {
                ScimUser.validateJSON(item);
            };
        }

        return true;
    }

/**
     * @return {Number}
     */
    getTotalResults() {
        return this.totalResults;
    }

    /**
     * @param {Number} totalResults
     */
    setTotalResults(totalResults) {
        this['totalResults'] = totalResults;
    }
/**
     * @return {Number}
     */
    getItemsPerPage() {
        return this.itemsPerPage;
    }

    /**
     * @param {Number} itemsPerPage
     */
    setItemsPerPage(itemsPerPage) {
        this['itemsPerPage'] = itemsPerPage;
    }
/**
     * @return {Number}
     */
    getStartIndex() {
        return this.startIndex;
    }

    /**
     * @param {Number} startIndex
     */
    setStartIndex(startIndex) {
        this['startIndex'] = startIndex;
    }
/**
     * @return {Array.<String>}
     */
    getSchemas() {
        return this.schemas;
    }

    /**
     * @param {Array.<String>} schemas
     */
    setSchemas(schemas) {
        this['schemas'] = schemas;
    }
/**
     * @return {Array.<module:eZmaxAPI/model/ScimUser>}
     */
    getResources() {
        return this.Resources;
    }

    /**
     * @param {Array.<module:eZmaxAPI/model/ScimUser>} Resources
     */
    setResources(Resources) {
        this['Resources'] = Resources;
    }

}



/**
 * @member {Number} totalResults
 */
ScimUserList.prototype['totalResults'] = undefined;

/**
 * @member {Number} itemsPerPage
 */
ScimUserList.prototype['itemsPerPage'] = undefined;

/**
 * @member {Number} startIndex
 */
ScimUserList.prototype['startIndex'] = undefined;

/**
 * @member {Array.<String>} schemas
 */
ScimUserList.prototype['schemas'] = undefined;

/**
 * @member {Array.<module:eZmaxAPI/model/ScimUser>} Resources
 */
ScimUserList.prototype['Resources'] = undefined;






export default ScimUserList;

