/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScimAuthenticationScheme from './ScimAuthenticationScheme';
import ScimServiceProviderConfigBulk from './ScimServiceProviderConfigBulk';
import ScimServiceProviderConfigChangePassword from './ScimServiceProviderConfigChangePassword';
import ScimServiceProviderConfigEtag from './ScimServiceProviderConfigEtag';
import ScimServiceProviderConfigFilter from './ScimServiceProviderConfigFilter';
import ScimServiceProviderConfigPatch from './ScimServiceProviderConfigPatch';
import ScimServiceProviderConfigSort from './ScimServiceProviderConfigSort';

/**
 * The ScimServiceProviderConfig model module.
 * @module eZmaxAPI/model/ScimServiceProviderConfig
 * @version 1.1.18
 */
class ScimServiceProviderConfig {
    /**
     * Constructs a new <code>ScimServiceProviderConfig</code>.
     * @alias module:eZmaxAPI/model/ScimServiceProviderConfig
     * @param authenticationSchemes {Array.<module:eZmaxAPI/model/ScimAuthenticationScheme>} A multi-valued complex type that specifies supported authentication scheme properties.
     * @param bulk {module:eZmaxAPI/model/ScimServiceProviderConfigBulk} 
     * @param changePassword {module:eZmaxAPI/model/ScimServiceProviderConfigChangePassword} 
     * @param documentationUri {String} An HTTP-addressable URL pointing to the service provider's human-consumable help documentation
     * @param etag {module:eZmaxAPI/model/ScimServiceProviderConfigEtag} 
     * @param filter {module:eZmaxAPI/model/ScimServiceProviderConfigFilter} 
     * @param patch {module:eZmaxAPI/model/ScimServiceProviderConfigPatch} 
     * @param sort {module:eZmaxAPI/model/ScimServiceProviderConfigSort} 
     */
    constructor(authenticationSchemes, bulk, changePassword, documentationUri, etag, filter, patch, sort) { 
        
        ScimServiceProviderConfig.initialize(this, authenticationSchemes, bulk, changePassword, documentationUri, etag, filter, patch, sort);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authenticationSchemes, bulk, changePassword, documentationUri, etag, filter, patch, sort) { 
        obj['authenticationSchemes'] = authenticationSchemes;
        obj['bulk'] = bulk;
        obj['changePassword'] = changePassword;
        obj['documentationUri'] = documentationUri;
        obj['etag'] = etag;
        obj['filter'] = filter;
        obj['patch'] = patch;
        obj['sort'] = sort;
    }

    /**
     * Constructs a <code>ScimServiceProviderConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/ScimServiceProviderConfig} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/ScimServiceProviderConfig} The populated <code>ScimServiceProviderConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScimServiceProviderConfig();

            if (data.hasOwnProperty('authenticationSchemes')) {
                obj['authenticationSchemes'] = ApiClient.convertToType(data['authenticationSchemes'], [ScimAuthenticationScheme]);
            }
            if (data.hasOwnProperty('bulk')) {
                obj['bulk'] = ScimServiceProviderConfigBulk.constructFromObject(data['bulk']);
            }
            if (data.hasOwnProperty('changePassword')) {
                obj['changePassword'] = ScimServiceProviderConfigChangePassword.constructFromObject(data['changePassword']);
            }
            if (data.hasOwnProperty('documentationUri')) {
                obj['documentationUri'] = ApiClient.convertToType(data['documentationUri'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ScimServiceProviderConfigEtag.constructFromObject(data['etag']);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ScimServiceProviderConfigFilter.constructFromObject(data['filter']);
            }
            if (data.hasOwnProperty('patch')) {
                obj['patch'] = ScimServiceProviderConfigPatch.constructFromObject(data['patch']);
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ScimServiceProviderConfigSort.constructFromObject(data['sort']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScimServiceProviderConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScimServiceProviderConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ScimServiceProviderConfig.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['authenticationSchemes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authenticationSchemes'])) {
                throw new Error("Expected the field `authenticationSchemes` to be an array in the JSON data but got " + data['authenticationSchemes']);
            }
            // validate the optional field `authenticationSchemes` (array)
            for (const item of data['authenticationSchemes']) {
                ScimAuthenticationScheme.validateJSON(item);
            };
        }
        // validate the optional field `bulk`
        if (data['bulk']) { // data not null
          ScimServiceProviderConfigBulk.validateJSON(data['bulk']);
        }
        // validate the optional field `changePassword`
        if (data['changePassword']) { // data not null
          ScimServiceProviderConfigChangePassword.validateJSON(data['changePassword']);
        }
        // ensure the json data is a string
        if (data['documentationUri'] && !(typeof data['documentationUri'] === 'string' || data['documentationUri'] instanceof String)) {
            throw new Error("Expected the field `documentationUri` to be a primitive type in the JSON string but got " + data['documentationUri']);
        }
        // validate the optional field `etag`
        if (data['etag']) { // data not null
          ScimServiceProviderConfigEtag.validateJSON(data['etag']);
        }
        // validate the optional field `filter`
        if (data['filter']) { // data not null
          ScimServiceProviderConfigFilter.validateJSON(data['filter']);
        }
        // validate the optional field `patch`
        if (data['patch']) { // data not null
          ScimServiceProviderConfigPatch.validateJSON(data['patch']);
        }
        // validate the optional field `sort`
        if (data['sort']) { // data not null
          ScimServiceProviderConfigSort.validateJSON(data['sort']);
        }

        return true;
    }

/**
     * Returns A multi-valued complex type that specifies supported authentication scheme properties.
     * @return {Array.<module:eZmaxAPI/model/ScimAuthenticationScheme>}
     */
    getAuthenticationSchemes() {
        return this.authenticationSchemes;
    }

    /**
     * Sets A multi-valued complex type that specifies supported authentication scheme properties.
     * @param {Array.<module:eZmaxAPI/model/ScimAuthenticationScheme>} authenticationSchemes A multi-valued complex type that specifies supported authentication scheme properties.
     */
    setAuthenticationSchemes(authenticationSchemes) {
        this['authenticationSchemes'] = authenticationSchemes;
    }
/**
     * @return {module:eZmaxAPI/model/ScimServiceProviderConfigBulk}
     */
    getBulk() {
        return this.bulk;
    }

    /**
     * @param {module:eZmaxAPI/model/ScimServiceProviderConfigBulk} bulk
     */
    setBulk(bulk) {
        this['bulk'] = bulk;
    }
/**
     * @return {module:eZmaxAPI/model/ScimServiceProviderConfigChangePassword}
     */
    getChangePassword() {
        return this.changePassword;
    }

    /**
     * @param {module:eZmaxAPI/model/ScimServiceProviderConfigChangePassword} changePassword
     */
    setChangePassword(changePassword) {
        this['changePassword'] = changePassword;
    }
/**
     * Returns An HTTP-addressable URL pointing to the service provider's human-consumable help documentation
     * @return {String}
     */
    getDocumentationUri() {
        return this.documentationUri;
    }

    /**
     * Sets An HTTP-addressable URL pointing to the service provider's human-consumable help documentation
     * @param {String} documentationUri An HTTP-addressable URL pointing to the service provider's human-consumable help documentation
     */
    setDocumentationUri(documentationUri) {
        this['documentationUri'] = documentationUri;
    }
/**
     * @return {module:eZmaxAPI/model/ScimServiceProviderConfigEtag}
     */
    getEtag() {
        return this.etag;
    }

    /**
     * @param {module:eZmaxAPI/model/ScimServiceProviderConfigEtag} etag
     */
    setEtag(etag) {
        this['etag'] = etag;
    }
/**
     * @return {module:eZmaxAPI/model/ScimServiceProviderConfigFilter}
     */
    getFilter() {
        return this.filter;
    }

    /**
     * @param {module:eZmaxAPI/model/ScimServiceProviderConfigFilter} filter
     */
    setFilter(filter) {
        this['filter'] = filter;
    }
/**
     * @return {module:eZmaxAPI/model/ScimServiceProviderConfigPatch}
     */
    getPatch() {
        return this.patch;
    }

    /**
     * @param {module:eZmaxAPI/model/ScimServiceProviderConfigPatch} patch
     */
    setPatch(patch) {
        this['patch'] = patch;
    }
/**
     * @return {module:eZmaxAPI/model/ScimServiceProviderConfigSort}
     */
    getSort() {
        return this.sort;
    }

    /**
     * @param {module:eZmaxAPI/model/ScimServiceProviderConfigSort} sort
     */
    setSort(sort) {
        this['sort'] = sort;
    }

}

ScimServiceProviderConfig.RequiredProperties = ["authenticationSchemes", "bulk", "changePassword", "documentationUri", "etag", "filter", "patch", "sort"];

/**
 * A multi-valued complex type that specifies supported authentication scheme properties.
 * @member {Array.<module:eZmaxAPI/model/ScimAuthenticationScheme>} authenticationSchemes
 */
ScimServiceProviderConfig.prototype['authenticationSchemes'] = undefined;

/**
 * @member {module:eZmaxAPI/model/ScimServiceProviderConfigBulk} bulk
 */
ScimServiceProviderConfig.prototype['bulk'] = undefined;

/**
 * @member {module:eZmaxAPI/model/ScimServiceProviderConfigChangePassword} changePassword
 */
ScimServiceProviderConfig.prototype['changePassword'] = undefined;

/**
 * An HTTP-addressable URL pointing to the service provider's human-consumable help documentation
 * @member {String} documentationUri
 */
ScimServiceProviderConfig.prototype['documentationUri'] = undefined;

/**
 * @member {module:eZmaxAPI/model/ScimServiceProviderConfigEtag} etag
 */
ScimServiceProviderConfig.prototype['etag'] = undefined;

/**
 * @member {module:eZmaxAPI/model/ScimServiceProviderConfigFilter} filter
 */
ScimServiceProviderConfig.prototype['filter'] = undefined;

/**
 * @member {module:eZmaxAPI/model/ScimServiceProviderConfigPatch} patch
 */
ScimServiceProviderConfig.prototype['patch'] = undefined;

/**
 * @member {module:eZmaxAPI/model/ScimServiceProviderConfigSort} sort
 */
ScimServiceProviderConfig.prototype['sort'] = undefined;






export default ScimServiceProviderConfig;

