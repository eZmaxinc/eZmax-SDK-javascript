/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommonAudit from './CommonAudit';
import FieldEEzsigndocumentStep from './FieldEEzsigndocumentStep';

/**
 * The EzsigndocumentResponse model module.
 * @module eZmaxAPI/model/EzsigndocumentResponse
 * @version 1.1.17
 */
class EzsigndocumentResponse {
    /**
     * Constructs a new <code>EzsigndocumentResponse</code>.
     * An Ezsigndocument Object
     * @alias module:eZmaxAPI/model/EzsigndocumentResponse
     * @param fkiEzsignfolderID {Number} The unique ID of the Ezsignfolder
     * @param dtEzsigndocumentDuedate {String} The maximum date and time at which the Ezsigndocument can be signed.
     * @param fkiLanguageID {Number} The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
     * @param sEzsigndocumentName {String} The name of the document that will be presented to Ezsignfoldersignerassociations
     * @param pkiEzsigndocumentID {Number} The unique ID of the Ezsigndocument
     * @param eEzsigndocumentStep {module:eZmaxAPI/model/FieldEEzsigndocumentStep} 
     * @param iEzsigndocumentOrder {Number} The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder.
     * @param iEzsigndocumentPagetotal {Number} The number of pages in the Ezsigndocument.
     * @param iEzsigndocumentSignaturesigned {Number} The number of signatures that were signed in the document.
     * @param iEzsigndocumentSignaturetotal {Number} The number of total signatures that were requested in the Ezsigndocument.
     * @param sEzsigndocumentMD5initial {String} MD5 Hash of the initial PDF Document before signatures were applied to it.
     * @param sEzsigndocumentMD5signed {String} MD5 Hash of the final PDF Document after all signatures were applied to it.
     * @param bEzsigndocumentEzsignform {Boolean} If the Ezsigndocument contains an Ezsignform or not
     * @param bEzsigndocumentHassignedsignatures {Boolean} If the Ezsigndocument contains signed signatures (From internal or external sources)
     * @param objAudit {module:eZmaxAPI/model/CommonAudit} 
     * @param sEzsigndocumentExternalid {String} This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
     */
    constructor(fkiEzsignfolderID, dtEzsigndocumentDuedate, fkiLanguageID, sEzsigndocumentName, pkiEzsigndocumentID, eEzsigndocumentStep, iEzsigndocumentOrder, iEzsigndocumentPagetotal, iEzsigndocumentSignaturesigned, iEzsigndocumentSignaturetotal, sEzsigndocumentMD5initial, sEzsigndocumentMD5signed, bEzsigndocumentEzsignform, bEzsigndocumentHassignedsignatures, objAudit, sEzsigndocumentExternalid) { 
        
        EzsigndocumentResponse.initialize(this, fkiEzsignfolderID, dtEzsigndocumentDuedate, fkiLanguageID, sEzsigndocumentName, pkiEzsigndocumentID, eEzsigndocumentStep, iEzsigndocumentOrder, iEzsigndocumentPagetotal, iEzsigndocumentSignaturesigned, iEzsigndocumentSignaturetotal, sEzsigndocumentMD5initial, sEzsigndocumentMD5signed, bEzsigndocumentEzsignform, bEzsigndocumentHassignedsignatures, objAudit, sEzsigndocumentExternalid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fkiEzsignfolderID, dtEzsigndocumentDuedate, fkiLanguageID, sEzsigndocumentName, pkiEzsigndocumentID, eEzsigndocumentStep, iEzsigndocumentOrder, iEzsigndocumentPagetotal, iEzsigndocumentSignaturesigned, iEzsigndocumentSignaturetotal, sEzsigndocumentMD5initial, sEzsigndocumentMD5signed, bEzsigndocumentEzsignform, bEzsigndocumentHassignedsignatures, objAudit, sEzsigndocumentExternalid) { 
        obj['fkiEzsignfolderID'] = fkiEzsignfolderID;
        obj['dtEzsigndocumentDuedate'] = dtEzsigndocumentDuedate;
        obj['fkiLanguageID'] = fkiLanguageID;
        obj['sEzsigndocumentName'] = sEzsigndocumentName;
        obj['pkiEzsigndocumentID'] = pkiEzsigndocumentID;
        obj['eEzsigndocumentStep'] = eEzsigndocumentStep;
        obj['iEzsigndocumentOrder'] = iEzsigndocumentOrder;
        obj['iEzsigndocumentPagetotal'] = iEzsigndocumentPagetotal;
        obj['iEzsigndocumentSignaturesigned'] = iEzsigndocumentSignaturesigned;
        obj['iEzsigndocumentSignaturetotal'] = iEzsigndocumentSignaturetotal;
        obj['sEzsigndocumentMD5initial'] = sEzsigndocumentMD5initial;
        obj['sEzsigndocumentMD5signed'] = sEzsigndocumentMD5signed;
        obj['bEzsigndocumentEzsignform'] = bEzsigndocumentEzsignform;
        obj['bEzsigndocumentHassignedsignatures'] = bEzsigndocumentHassignedsignatures;
        obj['objAudit'] = objAudit;
        obj['sEzsigndocumentExternalid'] = sEzsigndocumentExternalid;
    }

    /**
     * Constructs a <code>EzsigndocumentResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/EzsigndocumentResponse} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/EzsigndocumentResponse} The populated <code>EzsigndocumentResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EzsigndocumentResponse();

            if (data.hasOwnProperty('fkiEzsignfolderID')) {
                obj['fkiEzsignfolderID'] = ApiClient.convertToType(data['fkiEzsignfolderID'], 'Number');
            }
            if (data.hasOwnProperty('fkiEzsignfoldersignerassociationIDDeclinedtosign')) {
                obj['fkiEzsignfoldersignerassociationIDDeclinedtosign'] = ApiClient.convertToType(data['fkiEzsignfoldersignerassociationIDDeclinedtosign'], 'Number');
            }
            if (data.hasOwnProperty('dtEzsigndocumentDuedate')) {
                obj['dtEzsigndocumentDuedate'] = ApiClient.convertToType(data['dtEzsigndocumentDuedate'], 'String');
            }
            if (data.hasOwnProperty('dtEzsignformCompleted')) {
                obj['dtEzsignformCompleted'] = ApiClient.convertToType(data['dtEzsignformCompleted'], 'String');
            }
            if (data.hasOwnProperty('fkiLanguageID')) {
                obj['fkiLanguageID'] = ApiClient.convertToType(data['fkiLanguageID'], 'Number');
            }
            if (data.hasOwnProperty('sEzsigndocumentName')) {
                obj['sEzsigndocumentName'] = ApiClient.convertToType(data['sEzsigndocumentName'], 'String');
            }
            if (data.hasOwnProperty('pkiEzsigndocumentID')) {
                obj['pkiEzsigndocumentID'] = ApiClient.convertToType(data['pkiEzsigndocumentID'], 'Number');
            }
            if (data.hasOwnProperty('eEzsigndocumentStep')) {
                obj['eEzsigndocumentStep'] = FieldEEzsigndocumentStep.constructFromObject(data['eEzsigndocumentStep']);
            }
            if (data.hasOwnProperty('dtEzsigndocumentFirstsend')) {
                obj['dtEzsigndocumentFirstsend'] = ApiClient.convertToType(data['dtEzsigndocumentFirstsend'], 'String');
            }
            if (data.hasOwnProperty('dtEzsigndocumentLastsend')) {
                obj['dtEzsigndocumentLastsend'] = ApiClient.convertToType(data['dtEzsigndocumentLastsend'], 'String');
            }
            if (data.hasOwnProperty('iEzsigndocumentOrder')) {
                obj['iEzsigndocumentOrder'] = ApiClient.convertToType(data['iEzsigndocumentOrder'], 'Number');
            }
            if (data.hasOwnProperty('iEzsigndocumentPagetotal')) {
                obj['iEzsigndocumentPagetotal'] = ApiClient.convertToType(data['iEzsigndocumentPagetotal'], 'Number');
            }
            if (data.hasOwnProperty('iEzsigndocumentSignaturesigned')) {
                obj['iEzsigndocumentSignaturesigned'] = ApiClient.convertToType(data['iEzsigndocumentSignaturesigned'], 'Number');
            }
            if (data.hasOwnProperty('iEzsigndocumentSignaturetotal')) {
                obj['iEzsigndocumentSignaturetotal'] = ApiClient.convertToType(data['iEzsigndocumentSignaturetotal'], 'Number');
            }
            if (data.hasOwnProperty('sEzsigndocumentMD5initial')) {
                obj['sEzsigndocumentMD5initial'] = ApiClient.convertToType(data['sEzsigndocumentMD5initial'], 'String');
            }
            if (data.hasOwnProperty('tEzsigndocumentDeclinedtosignreason')) {
                obj['tEzsigndocumentDeclinedtosignreason'] = ApiClient.convertToType(data['tEzsigndocumentDeclinedtosignreason'], 'String');
            }
            if (data.hasOwnProperty('sEzsigndocumentMD5signed')) {
                obj['sEzsigndocumentMD5signed'] = ApiClient.convertToType(data['sEzsigndocumentMD5signed'], 'String');
            }
            if (data.hasOwnProperty('bEzsigndocumentEzsignform')) {
                obj['bEzsigndocumentEzsignform'] = ApiClient.convertToType(data['bEzsigndocumentEzsignform'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsigndocumentHassignedsignatures')) {
                obj['bEzsigndocumentHassignedsignatures'] = ApiClient.convertToType(data['bEzsigndocumentHassignedsignatures'], 'Boolean');
            }
            if (data.hasOwnProperty('objAudit')) {
                obj['objAudit'] = CommonAudit.constructFromObject(data['objAudit']);
            }
            if (data.hasOwnProperty('sEzsigndocumentExternalid')) {
                obj['sEzsigndocumentExternalid'] = ApiClient.convertToType(data['sEzsigndocumentExternalid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EzsigndocumentResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EzsigndocumentResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EzsigndocumentResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dtEzsigndocumentDuedate'] && !(typeof data['dtEzsigndocumentDuedate'] === 'string' || data['dtEzsigndocumentDuedate'] instanceof String)) {
            throw new Error("Expected the field `dtEzsigndocumentDuedate` to be a primitive type in the JSON string but got " + data['dtEzsigndocumentDuedate']);
        }
        // ensure the json data is a string
        if (data['dtEzsignformCompleted'] && !(typeof data['dtEzsignformCompleted'] === 'string' || data['dtEzsignformCompleted'] instanceof String)) {
            throw new Error("Expected the field `dtEzsignformCompleted` to be a primitive type in the JSON string but got " + data['dtEzsignformCompleted']);
        }
        // ensure the json data is a string
        if (data['sEzsigndocumentName'] && !(typeof data['sEzsigndocumentName'] === 'string' || data['sEzsigndocumentName'] instanceof String)) {
            throw new Error("Expected the field `sEzsigndocumentName` to be a primitive type in the JSON string but got " + data['sEzsigndocumentName']);
        }
        // ensure the json data is a string
        if (data['dtEzsigndocumentFirstsend'] && !(typeof data['dtEzsigndocumentFirstsend'] === 'string' || data['dtEzsigndocumentFirstsend'] instanceof String)) {
            throw new Error("Expected the field `dtEzsigndocumentFirstsend` to be a primitive type in the JSON string but got " + data['dtEzsigndocumentFirstsend']);
        }
        // ensure the json data is a string
        if (data['dtEzsigndocumentLastsend'] && !(typeof data['dtEzsigndocumentLastsend'] === 'string' || data['dtEzsigndocumentLastsend'] instanceof String)) {
            throw new Error("Expected the field `dtEzsigndocumentLastsend` to be a primitive type in the JSON string but got " + data['dtEzsigndocumentLastsend']);
        }
        // ensure the json data is a string
        if (data['sEzsigndocumentMD5initial'] && !(typeof data['sEzsigndocumentMD5initial'] === 'string' || data['sEzsigndocumentMD5initial'] instanceof String)) {
            throw new Error("Expected the field `sEzsigndocumentMD5initial` to be a primitive type in the JSON string but got " + data['sEzsigndocumentMD5initial']);
        }
        // ensure the json data is a string
        if (data['tEzsigndocumentDeclinedtosignreason'] && !(typeof data['tEzsigndocumentDeclinedtosignreason'] === 'string' || data['tEzsigndocumentDeclinedtosignreason'] instanceof String)) {
            throw new Error("Expected the field `tEzsigndocumentDeclinedtosignreason` to be a primitive type in the JSON string but got " + data['tEzsigndocumentDeclinedtosignreason']);
        }
        // ensure the json data is a string
        if (data['sEzsigndocumentMD5signed'] && !(typeof data['sEzsigndocumentMD5signed'] === 'string' || data['sEzsigndocumentMD5signed'] instanceof String)) {
            throw new Error("Expected the field `sEzsigndocumentMD5signed` to be a primitive type in the JSON string but got " + data['sEzsigndocumentMD5signed']);
        }
        // validate the optional field `objAudit`
        if (data['objAudit']) { // data not null
          CommonAudit.validateJSON(data['objAudit']);
        }
        // ensure the json data is a string
        if (data['sEzsigndocumentExternalid'] && !(typeof data['sEzsigndocumentExternalid'] === 'string' || data['sEzsigndocumentExternalid'] instanceof String)) {
            throw new Error("Expected the field `sEzsigndocumentExternalid` to be a primitive type in the JSON string but got " + data['sEzsigndocumentExternalid']);
        }

        return true;
    }

/**
     * Returns The unique ID of the Ezsignfolder
     * minimum: 0
     * @return {Number}
     */
    getFkiEzsignfolderID() {
        return this.fkiEzsignfolderID;
    }

    /**
     * Sets The unique ID of the Ezsignfolder
     * @param {Number} fkiEzsignfolderID The unique ID of the Ezsignfolder
     */
    setFkiEzsignfolderID(fkiEzsignfolderID) {
        this['fkiEzsignfolderID'] = fkiEzsignfolderID;
    }
/**
     * Returns The unique ID of the Ezsignfoldersignerassociation
     * minimum: 0
     * @return {Number}
     */
    getFkiEzsignfoldersignerassociationIDDeclinedtosign() {
        return this.fkiEzsignfoldersignerassociationIDDeclinedtosign;
    }

    /**
     * Sets The unique ID of the Ezsignfoldersignerassociation
     * @param {Number} fkiEzsignfoldersignerassociationIDDeclinedtosign The unique ID of the Ezsignfoldersignerassociation
     */
    setFkiEzsignfoldersignerassociationIDDeclinedtosign(fkiEzsignfoldersignerassociationIDDeclinedtosign) {
        this['fkiEzsignfoldersignerassociationIDDeclinedtosign'] = fkiEzsignfoldersignerassociationIDDeclinedtosign;
    }
/**
     * Returns The maximum date and time at which the Ezsigndocument can be signed.
     * @return {String}
     */
    getDtEzsigndocumentDuedate() {
        return this.dtEzsigndocumentDuedate;
    }

    /**
     * Sets The maximum date and time at which the Ezsigndocument can be signed.
     * @param {String} dtEzsigndocumentDuedate The maximum date and time at which the Ezsigndocument can be signed.
     */
    setDtEzsigndocumentDuedate(dtEzsigndocumentDuedate) {
        this['dtEzsigndocumentDuedate'] = dtEzsigndocumentDuedate;
    }
/**
     * Returns The date and time at which the Ezsignform has been completed.
     * @return {String}
     */
    getDtEzsignformCompleted() {
        return this.dtEzsignformCompleted;
    }

    /**
     * Sets The date and time at which the Ezsignform has been completed.
     * @param {String} dtEzsignformCompleted The date and time at which the Ezsignform has been completed.
     */
    setDtEzsignformCompleted(dtEzsignformCompleted) {
        this['dtEzsignformCompleted'] = dtEzsignformCompleted;
    }
/**
     * Returns The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
     * minimum: 1
     * maximum: 2
     * @return {Number}
     */
    getFkiLanguageID() {
        return this.fkiLanguageID;
    }

    /**
     * Sets The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
     * @param {Number} fkiLanguageID The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
     */
    setFkiLanguageID(fkiLanguageID) {
        this['fkiLanguageID'] = fkiLanguageID;
    }
/**
     * Returns The name of the document that will be presented to Ezsignfoldersignerassociations
     * @return {String}
     */
    getSEzsigndocumentName() {
        return this.sEzsigndocumentName;
    }

    /**
     * Sets The name of the document that will be presented to Ezsignfoldersignerassociations
     * @param {String} sEzsigndocumentName The name of the document that will be presented to Ezsignfoldersignerassociations
     */
    setSEzsigndocumentName(sEzsigndocumentName) {
        this['sEzsigndocumentName'] = sEzsigndocumentName;
    }
/**
     * Returns The unique ID of the Ezsigndocument
     * minimum: 0
     * @return {Number}
     */
    getPkiEzsigndocumentID() {
        return this.pkiEzsigndocumentID;
    }

    /**
     * Sets The unique ID of the Ezsigndocument
     * @param {Number} pkiEzsigndocumentID The unique ID of the Ezsigndocument
     */
    setPkiEzsigndocumentID(pkiEzsigndocumentID) {
        this['pkiEzsigndocumentID'] = pkiEzsigndocumentID;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsigndocumentStep}
     */
    getEEzsigndocumentStep() {
        return this.eEzsigndocumentStep;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsigndocumentStep} eEzsigndocumentStep
     */
    setEEzsigndocumentStep(eEzsigndocumentStep) {
        this['eEzsigndocumentStep'] = eEzsigndocumentStep;
    }
/**
     * Returns The date and time when the Ezsigndocument was first sent.
     * @return {String}
     */
    getDtEzsigndocumentFirstsend() {
        return this.dtEzsigndocumentFirstsend;
    }

    /**
     * Sets The date and time when the Ezsigndocument was first sent.
     * @param {String} dtEzsigndocumentFirstsend The date and time when the Ezsigndocument was first sent.
     */
    setDtEzsigndocumentFirstsend(dtEzsigndocumentFirstsend) {
        this['dtEzsigndocumentFirstsend'] = dtEzsigndocumentFirstsend;
    }
/**
     * Returns The date and time when the Ezsigndocument was sent the last time.
     * @return {String}
     */
    getDtEzsigndocumentLastsend() {
        return this.dtEzsigndocumentLastsend;
    }

    /**
     * Sets The date and time when the Ezsigndocument was sent the last time.
     * @param {String} dtEzsigndocumentLastsend The date and time when the Ezsigndocument was sent the last time.
     */
    setDtEzsigndocumentLastsend(dtEzsigndocumentLastsend) {
        this['dtEzsigndocumentLastsend'] = dtEzsigndocumentLastsend;
    }
/**
     * Returns The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder.
     * minimum: 1
     * @return {Number}
     */
    getIEzsigndocumentOrder() {
        return this.iEzsigndocumentOrder;
    }

    /**
     * Sets The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder.
     * @param {Number} iEzsigndocumentOrder The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder.
     */
    setIEzsigndocumentOrder(iEzsigndocumentOrder) {
        this['iEzsigndocumentOrder'] = iEzsigndocumentOrder;
    }
/**
     * Returns The number of pages in the Ezsigndocument.
     * minimum: 1
     * @return {Number}
     */
    getIEzsigndocumentPagetotal() {
        return this.iEzsigndocumentPagetotal;
    }

    /**
     * Sets The number of pages in the Ezsigndocument.
     * @param {Number} iEzsigndocumentPagetotal The number of pages in the Ezsigndocument.
     */
    setIEzsigndocumentPagetotal(iEzsigndocumentPagetotal) {
        this['iEzsigndocumentPagetotal'] = iEzsigndocumentPagetotal;
    }
/**
     * Returns The number of signatures that were signed in the document.
     * minimum: 0
     * @return {Number}
     */
    getIEzsigndocumentSignaturesigned() {
        return this.iEzsigndocumentSignaturesigned;
    }

    /**
     * Sets The number of signatures that were signed in the document.
     * @param {Number} iEzsigndocumentSignaturesigned The number of signatures that were signed in the document.
     */
    setIEzsigndocumentSignaturesigned(iEzsigndocumentSignaturesigned) {
        this['iEzsigndocumentSignaturesigned'] = iEzsigndocumentSignaturesigned;
    }
/**
     * Returns The number of total signatures that were requested in the Ezsigndocument.
     * minimum: 0
     * @return {Number}
     */
    getIEzsigndocumentSignaturetotal() {
        return this.iEzsigndocumentSignaturetotal;
    }

    /**
     * Sets The number of total signatures that were requested in the Ezsigndocument.
     * @param {Number} iEzsigndocumentSignaturetotal The number of total signatures that were requested in the Ezsigndocument.
     */
    setIEzsigndocumentSignaturetotal(iEzsigndocumentSignaturetotal) {
        this['iEzsigndocumentSignaturetotal'] = iEzsigndocumentSignaturetotal;
    }
/**
     * Returns MD5 Hash of the initial PDF Document before signatures were applied to it.
     * @return {String}
     */
    getSEzsigndocumentMD5initial() {
        return this.sEzsigndocumentMD5initial;
    }

    /**
     * Sets MD5 Hash of the initial PDF Document before signatures were applied to it.
     * @param {String} sEzsigndocumentMD5initial MD5 Hash of the initial PDF Document before signatures were applied to it.
     */
    setSEzsigndocumentMD5initial(sEzsigndocumentMD5initial) {
        this['sEzsigndocumentMD5initial'] = sEzsigndocumentMD5initial;
    }
/**
     * Returns A custom text message that will contain the refusal message if the Ezsigndocument is declined to sign
     * @return {String}
     */
    getTEzsigndocumentDeclinedtosignreason() {
        return this.tEzsigndocumentDeclinedtosignreason;
    }

    /**
     * Sets A custom text message that will contain the refusal message if the Ezsigndocument is declined to sign
     * @param {String} tEzsigndocumentDeclinedtosignreason A custom text message that will contain the refusal message if the Ezsigndocument is declined to sign
     */
    setTEzsigndocumentDeclinedtosignreason(tEzsigndocumentDeclinedtosignreason) {
        this['tEzsigndocumentDeclinedtosignreason'] = tEzsigndocumentDeclinedtosignreason;
    }
/**
     * Returns MD5 Hash of the final PDF Document after all signatures were applied to it.
     * @return {String}
     */
    getSEzsigndocumentMD5signed() {
        return this.sEzsigndocumentMD5signed;
    }

    /**
     * Sets MD5 Hash of the final PDF Document after all signatures were applied to it.
     * @param {String} sEzsigndocumentMD5signed MD5 Hash of the final PDF Document after all signatures were applied to it.
     */
    setSEzsigndocumentMD5signed(sEzsigndocumentMD5signed) {
        this['sEzsigndocumentMD5signed'] = sEzsigndocumentMD5signed;
    }
/**
     * Returns If the Ezsigndocument contains an Ezsignform or not
     * @return {Boolean}
     */
    getBEzsigndocumentEzsignform() {
        return this.bEzsigndocumentEzsignform;
    }

    /**
     * Sets If the Ezsigndocument contains an Ezsignform or not
     * @param {Boolean} bEzsigndocumentEzsignform If the Ezsigndocument contains an Ezsignform or not
     */
    setBEzsigndocumentEzsignform(bEzsigndocumentEzsignform) {
        this['bEzsigndocumentEzsignform'] = bEzsigndocumentEzsignform;
    }
/**
     * Returns If the Ezsigndocument contains signed signatures (From internal or external sources)
     * @return {Boolean}
     */
    getBEzsigndocumentHassignedsignatures() {
        return this.bEzsigndocumentHassignedsignatures;
    }

    /**
     * Sets If the Ezsigndocument contains signed signatures (From internal or external sources)
     * @param {Boolean} bEzsigndocumentHassignedsignatures If the Ezsigndocument contains signed signatures (From internal or external sources)
     */
    setBEzsigndocumentHassignedsignatures(bEzsigndocumentHassignedsignatures) {
        this['bEzsigndocumentHassignedsignatures'] = bEzsigndocumentHassignedsignatures;
    }
/**
     * @return {module:eZmaxAPI/model/CommonAudit}
     */
    getObjAudit() {
        return this.objAudit;
    }

    /**
     * @param {module:eZmaxAPI/model/CommonAudit} objAudit
     */
    setObjAudit(objAudit) {
        this['objAudit'] = objAudit;
    }
/**
     * Returns This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
     * @return {String}
     */
    getSEzsigndocumentExternalid() {
        return this.sEzsigndocumentExternalid;
    }

    /**
     * Sets This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
     * @param {String} sEzsigndocumentExternalid This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
     */
    setSEzsigndocumentExternalid(sEzsigndocumentExternalid) {
        this['sEzsigndocumentExternalid'] = sEzsigndocumentExternalid;
    }

}

EzsigndocumentResponse.RequiredProperties = ["fkiEzsignfolderID", "dtEzsigndocumentDuedate", "fkiLanguageID", "sEzsigndocumentName", "pkiEzsigndocumentID", "eEzsigndocumentStep", "iEzsigndocumentOrder", "iEzsigndocumentPagetotal", "iEzsigndocumentSignaturesigned", "iEzsigndocumentSignaturetotal", "sEzsigndocumentMD5initial", "sEzsigndocumentMD5signed", "bEzsigndocumentEzsignform", "bEzsigndocumentHassignedsignatures", "objAudit", "sEzsigndocumentExternalid"];

/**
 * The unique ID of the Ezsignfolder
 * @member {Number} fkiEzsignfolderID
 */
EzsigndocumentResponse.prototype['fkiEzsignfolderID'] = undefined;

/**
 * The unique ID of the Ezsignfoldersignerassociation
 * @member {Number} fkiEzsignfoldersignerassociationIDDeclinedtosign
 */
EzsigndocumentResponse.prototype['fkiEzsignfoldersignerassociationIDDeclinedtosign'] = undefined;

/**
 * The maximum date and time at which the Ezsigndocument can be signed.
 * @member {String} dtEzsigndocumentDuedate
 */
EzsigndocumentResponse.prototype['dtEzsigndocumentDuedate'] = undefined;

/**
 * The date and time at which the Ezsignform has been completed.
 * @member {String} dtEzsignformCompleted
 */
EzsigndocumentResponse.prototype['dtEzsignformCompleted'] = undefined;

/**
 * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
 * @member {Number} fkiLanguageID
 */
EzsigndocumentResponse.prototype['fkiLanguageID'] = undefined;

/**
 * The name of the document that will be presented to Ezsignfoldersignerassociations
 * @member {String} sEzsigndocumentName
 */
EzsigndocumentResponse.prototype['sEzsigndocumentName'] = undefined;

/**
 * The unique ID of the Ezsigndocument
 * @member {Number} pkiEzsigndocumentID
 */
EzsigndocumentResponse.prototype['pkiEzsigndocumentID'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsigndocumentStep} eEzsigndocumentStep
 */
EzsigndocumentResponse.prototype['eEzsigndocumentStep'] = undefined;

/**
 * The date and time when the Ezsigndocument was first sent.
 * @member {String} dtEzsigndocumentFirstsend
 */
EzsigndocumentResponse.prototype['dtEzsigndocumentFirstsend'] = undefined;

/**
 * The date and time when the Ezsigndocument was sent the last time.
 * @member {String} dtEzsigndocumentLastsend
 */
EzsigndocumentResponse.prototype['dtEzsigndocumentLastsend'] = undefined;

/**
 * The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder.
 * @member {Number} iEzsigndocumentOrder
 */
EzsigndocumentResponse.prototype['iEzsigndocumentOrder'] = undefined;

/**
 * The number of pages in the Ezsigndocument.
 * @member {Number} iEzsigndocumentPagetotal
 */
EzsigndocumentResponse.prototype['iEzsigndocumentPagetotal'] = undefined;

/**
 * The number of signatures that were signed in the document.
 * @member {Number} iEzsigndocumentSignaturesigned
 */
EzsigndocumentResponse.prototype['iEzsigndocumentSignaturesigned'] = undefined;

/**
 * The number of total signatures that were requested in the Ezsigndocument.
 * @member {Number} iEzsigndocumentSignaturetotal
 */
EzsigndocumentResponse.prototype['iEzsigndocumentSignaturetotal'] = undefined;

/**
 * MD5 Hash of the initial PDF Document before signatures were applied to it.
 * @member {String} sEzsigndocumentMD5initial
 */
EzsigndocumentResponse.prototype['sEzsigndocumentMD5initial'] = undefined;

/**
 * A custom text message that will contain the refusal message if the Ezsigndocument is declined to sign
 * @member {String} tEzsigndocumentDeclinedtosignreason
 */
EzsigndocumentResponse.prototype['tEzsigndocumentDeclinedtosignreason'] = undefined;

/**
 * MD5 Hash of the final PDF Document after all signatures were applied to it.
 * @member {String} sEzsigndocumentMD5signed
 */
EzsigndocumentResponse.prototype['sEzsigndocumentMD5signed'] = undefined;

/**
 * If the Ezsigndocument contains an Ezsignform or not
 * @member {Boolean} bEzsigndocumentEzsignform
 */
EzsigndocumentResponse.prototype['bEzsigndocumentEzsignform'] = undefined;

/**
 * If the Ezsigndocument contains signed signatures (From internal or external sources)
 * @member {Boolean} bEzsigndocumentHassignedsignatures
 */
EzsigndocumentResponse.prototype['bEzsigndocumentHassignedsignatures'] = undefined;

/**
 * @member {module:eZmaxAPI/model/CommonAudit} objAudit
 */
EzsigndocumentResponse.prototype['objAudit'] = undefined;

/**
 * This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
 * @member {String} sEzsigndocumentExternalid
 */
EzsigndocumentResponse.prototype['sEzsigndocumentExternalid'] = undefined;






export default EzsigndocumentResponse;

