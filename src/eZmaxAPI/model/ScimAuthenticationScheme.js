/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScimAuthenticationScheme model module.
 * @module eZmaxAPI/model/ScimAuthenticationScheme
 * @version 1.2.0
 */
class ScimAuthenticationScheme {
    /**
     * Constructs a new <code>ScimAuthenticationScheme</code>.
     * @alias module:eZmaxAPI/model/ScimAuthenticationScheme
     * @param description {String} A description of the authentication scheme.
     * @param name {String} The common authentication scheme name
     * @param type {module:eZmaxAPI/model/ScimAuthenticationScheme.TypeEnum} The authentication scheme.
     */
    constructor(description, name, type) { 
        
        ScimAuthenticationScheme.initialize(this, description, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, name, type) { 
        obj['description'] = description;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ScimAuthenticationScheme</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/ScimAuthenticationScheme} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/ScimAuthenticationScheme} The populated <code>ScimAuthenticationScheme</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScimAuthenticationScheme();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScimAuthenticationScheme</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScimAuthenticationScheme</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ScimAuthenticationScheme.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }

/**
     * Returns A description of the authentication scheme.
     * @return {String}
     */
    getDescription() {
        return this.description;
    }

    /**
     * Sets A description of the authentication scheme.
     * @param {String} description A description of the authentication scheme.
     */
    setDescription(description) {
        this['description'] = description;
    }
/**
     * Returns The common authentication scheme name
     * @return {String}
     */
    getName() {
        return this.name;
    }

    /**
     * Sets The common authentication scheme name
     * @param {String} name The common authentication scheme name
     */
    setName(name) {
        this['name'] = name;
    }
/**
     * Returns The authentication scheme.
     * @return {module:eZmaxAPI/model/ScimAuthenticationScheme.TypeEnum}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets The authentication scheme.
     * @param {module:eZmaxAPI/model/ScimAuthenticationScheme.TypeEnum} type The authentication scheme.
     */
    setType(type) {
        this['type'] = type;
    }

}

ScimAuthenticationScheme.RequiredProperties = ["description", "name", "type"];

/**
 * A description of the authentication scheme.
 * @member {String} description
 */
ScimAuthenticationScheme.prototype['description'] = undefined;

/**
 * The common authentication scheme name
 * @member {String} name
 */
ScimAuthenticationScheme.prototype['name'] = undefined;

/**
 * The authentication scheme.
 * @member {module:eZmaxAPI/model/ScimAuthenticationScheme.TypeEnum} type
 */
ScimAuthenticationScheme.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ScimAuthenticationScheme['TypeEnum'] = {

    /**
     * value: "oauth"
     * @const
     */
    "oauth": "oauth",

    /**
     * value: "oauth2"
     * @const
     */
    "oauth2": "oauth2",

    /**
     * value: "oauthbearertoken"
     * @const
     */
    "oauthbearertoken": "oauthbearertoken",

    /**
     * value: "httpbasic"
     * @const
     */
    "httpbasic": "httpbasic",

    /**
     * value: "httpdigest"
     * @const
     */
    "httpdigest": "httpdigest"
};



export default ScimAuthenticationScheme;

