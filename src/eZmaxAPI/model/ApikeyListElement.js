/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApikeyListElement model module.
 * @module eZmaxAPI/model/ApikeyListElement
 * @version 1.2.0
 */
class ApikeyListElement {
    /**
     * Constructs a new <code>ApikeyListElement</code>.
     * A Branding List Element
     * @alias module:eZmaxAPI/model/ApikeyListElement
     * @param pkiApikeyID {Number} The unique ID of the Apikey
     * @param sApikeyDescriptionX {String} The description of the Apikey in the language of the requester
     * @param sUserFirstname {String} The first name of the user
     * @param sUserLastname {String} The last name of the user
     * @param bApikeyIsactive {Boolean} Whether the apikey is active or not
     * @param bApikeyIssigned {Boolean} Whether the apikey is signed or not
     */
    constructor(pkiApikeyID, sApikeyDescriptionX, sUserFirstname, sUserLastname, bApikeyIsactive, bApikeyIssigned) { 
        
        ApikeyListElement.initialize(this, pkiApikeyID, sApikeyDescriptionX, sUserFirstname, sUserLastname, bApikeyIsactive, bApikeyIssigned);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pkiApikeyID, sApikeyDescriptionX, sUserFirstname, sUserLastname, bApikeyIsactive, bApikeyIssigned) { 
        obj['pkiApikeyID'] = pkiApikeyID;
        obj['sApikeyDescriptionX'] = sApikeyDescriptionX;
        obj['sUserFirstname'] = sUserFirstname;
        obj['sUserLastname'] = sUserLastname;
        obj['bApikeyIsactive'] = bApikeyIsactive;
        obj['bApikeyIssigned'] = bApikeyIssigned;
    }

    /**
     * Constructs a <code>ApikeyListElement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/ApikeyListElement} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/ApikeyListElement} The populated <code>ApikeyListElement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApikeyListElement();

            if (data.hasOwnProperty('pkiApikeyID')) {
                obj['pkiApikeyID'] = ApiClient.convertToType(data['pkiApikeyID'], 'Number');
            }
            if (data.hasOwnProperty('sApikeyDescriptionX')) {
                obj['sApikeyDescriptionX'] = ApiClient.convertToType(data['sApikeyDescriptionX'], 'String');
            }
            if (data.hasOwnProperty('sUserFirstname')) {
                obj['sUserFirstname'] = ApiClient.convertToType(data['sUserFirstname'], 'String');
            }
            if (data.hasOwnProperty('sUserLastname')) {
                obj['sUserLastname'] = ApiClient.convertToType(data['sUserLastname'], 'String');
            }
            if (data.hasOwnProperty('bApikeyIsactive')) {
                obj['bApikeyIsactive'] = ApiClient.convertToType(data['bApikeyIsactive'], 'Boolean');
            }
            if (data.hasOwnProperty('bApikeyIssigned')) {
                obj['bApikeyIssigned'] = ApiClient.convertToType(data['bApikeyIssigned'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApikeyListElement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApikeyListElement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApikeyListElement.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sApikeyDescriptionX'] && !(typeof data['sApikeyDescriptionX'] === 'string' || data['sApikeyDescriptionX'] instanceof String)) {
            throw new Error("Expected the field `sApikeyDescriptionX` to be a primitive type in the JSON string but got " + data['sApikeyDescriptionX']);
        }
        // ensure the json data is a string
        if (data['sUserFirstname'] && !(typeof data['sUserFirstname'] === 'string' || data['sUserFirstname'] instanceof String)) {
            throw new Error("Expected the field `sUserFirstname` to be a primitive type in the JSON string but got " + data['sUserFirstname']);
        }
        // ensure the json data is a string
        if (data['sUserLastname'] && !(typeof data['sUserLastname'] === 'string' || data['sUserLastname'] instanceof String)) {
            throw new Error("Expected the field `sUserLastname` to be a primitive type in the JSON string but got " + data['sUserLastname']);
        }

        return true;
    }

/**
     * Returns The unique ID of the Apikey
     * minimum: 0
     * @return {Number}
     */
    getPkiApikeyID() {
        return this.pkiApikeyID;
    }

    /**
     * Sets The unique ID of the Apikey
     * @param {Number} pkiApikeyID The unique ID of the Apikey
     */
    setPkiApikeyID(pkiApikeyID) {
        this['pkiApikeyID'] = pkiApikeyID;
    }
/**
     * Returns The description of the Apikey in the language of the requester
     * @return {String}
     */
    getSApikeyDescriptionX() {
        return this.sApikeyDescriptionX;
    }

    /**
     * Sets The description of the Apikey in the language of the requester
     * @param {String} sApikeyDescriptionX The description of the Apikey in the language of the requester
     */
    setSApikeyDescriptionX(sApikeyDescriptionX) {
        this['sApikeyDescriptionX'] = sApikeyDescriptionX;
    }
/**
     * Returns The first name of the user
     * @return {String}
     */
    getSUserFirstname() {
        return this.sUserFirstname;
    }

    /**
     * Sets The first name of the user
     * @param {String} sUserFirstname The first name of the user
     */
    setSUserFirstname(sUserFirstname) {
        this['sUserFirstname'] = sUserFirstname;
    }
/**
     * Returns The last name of the user
     * @return {String}
     */
    getSUserLastname() {
        return this.sUserLastname;
    }

    /**
     * Sets The last name of the user
     * @param {String} sUserLastname The last name of the user
     */
    setSUserLastname(sUserLastname) {
        this['sUserLastname'] = sUserLastname;
    }
/**
     * Returns Whether the apikey is active or not
     * @return {Boolean}
     */
    getBApikeyIsactive() {
        return this.bApikeyIsactive;
    }

    /**
     * Sets Whether the apikey is active or not
     * @param {Boolean} bApikeyIsactive Whether the apikey is active or not
     */
    setBApikeyIsactive(bApikeyIsactive) {
        this['bApikeyIsactive'] = bApikeyIsactive;
    }
/**
     * Returns Whether the apikey is signed or not
     * @return {Boolean}
     */
    getBApikeyIssigned() {
        return this.bApikeyIssigned;
    }

    /**
     * Sets Whether the apikey is signed or not
     * @param {Boolean} bApikeyIssigned Whether the apikey is signed or not
     */
    setBApikeyIssigned(bApikeyIssigned) {
        this['bApikeyIssigned'] = bApikeyIssigned;
    }

}

ApikeyListElement.RequiredProperties = ["pkiApikeyID", "sApikeyDescriptionX", "sUserFirstname", "sUserLastname", "bApikeyIsactive", "bApikeyIssigned"];

/**
 * The unique ID of the Apikey
 * @member {Number} pkiApikeyID
 */
ApikeyListElement.prototype['pkiApikeyID'] = undefined;

/**
 * The description of the Apikey in the language of the requester
 * @member {String} sApikeyDescriptionX
 */
ApikeyListElement.prototype['sApikeyDescriptionX'] = undefined;

/**
 * The first name of the user
 * @member {String} sUserFirstname
 */
ApikeyListElement.prototype['sUserFirstname'] = undefined;

/**
 * The last name of the user
 * @member {String} sUserLastname
 */
ApikeyListElement.prototype['sUserLastname'] = undefined;

/**
 * Whether the apikey is active or not
 * @member {Boolean} bApikeyIsactive
 */
ApikeyListElement.prototype['bApikeyIsactive'] = undefined;

/**
 * Whether the apikey is signed or not
 * @member {Boolean} bApikeyIssigned
 */
ApikeyListElement.prototype['bApikeyIssigned'] = undefined;






export default ApikeyListElement;

