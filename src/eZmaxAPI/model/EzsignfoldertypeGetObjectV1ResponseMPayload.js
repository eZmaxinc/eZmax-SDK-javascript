/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.14
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EzsignfoldertypeResponseCompound from './EzsignfoldertypeResponseCompound';
import FieldEEzsignfoldertypeDisposal from './FieldEEzsignfoldertypeDisposal';
import FieldEEzsignfoldertypePrivacylevel from './FieldEEzsignfoldertypePrivacylevel';
import FieldEEzsignfoldertypeSendreminderfrequency from './FieldEEzsignfoldertypeSendreminderfrequency';
import MultilingualEzsignfoldertypeName from './MultilingualEzsignfoldertypeName';

/**
 * The EzsignfoldertypeGetObjectV1ResponseMPayload model module.
 * @module eZmaxAPI/model/EzsignfoldertypeGetObjectV1ResponseMPayload
 * @version 1.1.14
 */
class EzsignfoldertypeGetObjectV1ResponseMPayload {
    /**
     * Constructs a new <code>EzsignfoldertypeGetObjectV1ResponseMPayload</code>.
     * Payload for GET /1/object/ezsignfoldertype/{pkiEzsignfoldertypeID}
     * @alias module:eZmaxAPI/model/EzsignfoldertypeGetObjectV1ResponseMPayload
     * @implements module:eZmaxAPI/model/EzsignfoldertypeResponseCompound
     * @param pkiEzsignfoldertypeID {Number} The unique ID of the Ezsignfoldertype.
     * @param objEzsignfoldertypeName {module:eZmaxAPI/model/MultilingualEzsignfoldertypeName} 
     * @param fkiBrandingID {Number} The unique ID of the Branding
     * @param sBrandingDescriptionX {String} The Description of the Branding in the language of the requester
     * @param eEzsignfoldertypePrivacylevel {module:eZmaxAPI/model/FieldEEzsignfoldertypePrivacylevel} 
     * @param iEzsignfoldertypeArchivaldays {Number} The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
     * @param eEzsignfoldertypeDisposal {module:eZmaxAPI/model/FieldEEzsignfoldertypeDisposal} 
     * @param iEzsignfoldertypeDeadlinedays {Number} The number of days to get all Ezsignsignatures
     * @param bEzsignfoldertypeSendattatchmentsigner {Boolean} Whether we send the Ezsigndocument and the proof as attachment in the email
     * @param bEzsignfoldertypeSendsignedtodocumentowner {Boolean} Whether we send the signed Ezsigndocument to the Ezsigndocument's owner
     * @param bEzsignfoldertypeSendsignedtofolderowner {Boolean} Whether we send the signed Ezsigndocument to the Ezsignfolder's owner
     * @param bEzsignfoldertypeSendsignedtocolleague {Boolean} Whether we send the signed Ezsigndocument to the colleagues
     * @param bEzsignfoldertypeSendsummarytodocumentowner {Boolean} Whether we send the summary to the Ezsigndocument's owner
     * @param bEzsignfoldertypeSendsummarytofolderowner {Boolean} Whether we send the summary to the Ezsignfolder's owner
     * @param bEzsignfoldertypeSendsummarytocolleague {Boolean} Whether we send the summary to the colleagues
     * @param bEzsignfoldertypeIncludeproofsigner {Boolean} Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
     * @param bEzsignfoldertypeIncludeproofuser {Boolean} Whether we include the proof with the signed Ezsigndocument for users
     * @param bEzsignfoldertypeIsactive {Boolean} Whether the Ezsignfoldertype is active or not
     */
    constructor(pkiEzsignfoldertypeID, objEzsignfoldertypeName, fkiBrandingID, sBrandingDescriptionX, eEzsignfoldertypePrivacylevel, iEzsignfoldertypeArchivaldays, eEzsignfoldertypeDisposal, iEzsignfoldertypeDeadlinedays, bEzsignfoldertypeSendattatchmentsigner, bEzsignfoldertypeSendsignedtodocumentowner, bEzsignfoldertypeSendsignedtofolderowner, bEzsignfoldertypeSendsignedtocolleague, bEzsignfoldertypeSendsummarytodocumentowner, bEzsignfoldertypeSendsummarytofolderowner, bEzsignfoldertypeSendsummarytocolleague, bEzsignfoldertypeIncludeproofsigner, bEzsignfoldertypeIncludeproofuser, bEzsignfoldertypeIsactive) { 
        EzsignfoldertypeResponseCompound.initialize(this, pkiEzsignfoldertypeID, objEzsignfoldertypeName, fkiBrandingID, sBrandingDescriptionX, eEzsignfoldertypePrivacylevel, iEzsignfoldertypeArchivaldays, eEzsignfoldertypeDisposal, iEzsignfoldertypeDeadlinedays, bEzsignfoldertypeSendattatchmentsigner, bEzsignfoldertypeSendsignedtodocumentowner, bEzsignfoldertypeSendsignedtofolderowner, bEzsignfoldertypeSendsignedtocolleague, bEzsignfoldertypeSendsummarytodocumentowner, bEzsignfoldertypeSendsummarytofolderowner, bEzsignfoldertypeSendsummarytocolleague, bEzsignfoldertypeIncludeproofsigner, bEzsignfoldertypeIncludeproofuser, bEzsignfoldertypeIsactive);
        EzsignfoldertypeGetObjectV1ResponseMPayload.initialize(this, pkiEzsignfoldertypeID, objEzsignfoldertypeName, fkiBrandingID, sBrandingDescriptionX, eEzsignfoldertypePrivacylevel, iEzsignfoldertypeArchivaldays, eEzsignfoldertypeDisposal, iEzsignfoldertypeDeadlinedays, bEzsignfoldertypeSendattatchmentsigner, bEzsignfoldertypeSendsignedtodocumentowner, bEzsignfoldertypeSendsignedtofolderowner, bEzsignfoldertypeSendsignedtocolleague, bEzsignfoldertypeSendsummarytodocumentowner, bEzsignfoldertypeSendsummarytofolderowner, bEzsignfoldertypeSendsummarytocolleague, bEzsignfoldertypeIncludeproofsigner, bEzsignfoldertypeIncludeproofuser, bEzsignfoldertypeIsactive);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pkiEzsignfoldertypeID, objEzsignfoldertypeName, fkiBrandingID, sBrandingDescriptionX, eEzsignfoldertypePrivacylevel, iEzsignfoldertypeArchivaldays, eEzsignfoldertypeDisposal, iEzsignfoldertypeDeadlinedays, bEzsignfoldertypeSendattatchmentsigner, bEzsignfoldertypeSendsignedtodocumentowner, bEzsignfoldertypeSendsignedtofolderowner, bEzsignfoldertypeSendsignedtocolleague, bEzsignfoldertypeSendsummarytodocumentowner, bEzsignfoldertypeSendsummarytofolderowner, bEzsignfoldertypeSendsummarytocolleague, bEzsignfoldertypeIncludeproofsigner, bEzsignfoldertypeIncludeproofuser, bEzsignfoldertypeIsactive) { 
        obj['pkiEzsignfoldertypeID'] = pkiEzsignfoldertypeID;
        obj['objEzsignfoldertypeName'] = objEzsignfoldertypeName;
        obj['fkiBrandingID'] = fkiBrandingID;
        obj['sBrandingDescriptionX'] = sBrandingDescriptionX;
        obj['eEzsignfoldertypePrivacylevel'] = eEzsignfoldertypePrivacylevel;
        obj['iEzsignfoldertypeArchivaldays'] = iEzsignfoldertypeArchivaldays;
        obj['eEzsignfoldertypeDisposal'] = eEzsignfoldertypeDisposal;
        obj['iEzsignfoldertypeDeadlinedays'] = iEzsignfoldertypeDeadlinedays;
        obj['bEzsignfoldertypeSendattatchmentsigner'] = bEzsignfoldertypeSendattatchmentsigner;
        obj['bEzsignfoldertypeSendsignedtodocumentowner'] = bEzsignfoldertypeSendsignedtodocumentowner;
        obj['bEzsignfoldertypeSendsignedtofolderowner'] = bEzsignfoldertypeSendsignedtofolderowner;
        obj['bEzsignfoldertypeSendsignedtocolleague'] = bEzsignfoldertypeSendsignedtocolleague;
        obj['bEzsignfoldertypeSendsummarytodocumentowner'] = bEzsignfoldertypeSendsummarytodocumentowner;
        obj['bEzsignfoldertypeSendsummarytofolderowner'] = bEzsignfoldertypeSendsummarytofolderowner;
        obj['bEzsignfoldertypeSendsummarytocolleague'] = bEzsignfoldertypeSendsummarytocolleague;
        obj['bEzsignfoldertypeIncludeproofsigner'] = bEzsignfoldertypeIncludeproofsigner;
        obj['bEzsignfoldertypeIncludeproofuser'] = bEzsignfoldertypeIncludeproofuser;
        obj['bEzsignfoldertypeIsactive'] = bEzsignfoldertypeIsactive;
    }

    /**
     * Constructs a <code>EzsignfoldertypeGetObjectV1ResponseMPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/EzsignfoldertypeGetObjectV1ResponseMPayload} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/EzsignfoldertypeGetObjectV1ResponseMPayload} The populated <code>EzsignfoldertypeGetObjectV1ResponseMPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EzsignfoldertypeGetObjectV1ResponseMPayload();
            EzsignfoldertypeResponseCompound.constructFromObject(data, obj);

            if (data.hasOwnProperty('pkiEzsignfoldertypeID')) {
                obj['pkiEzsignfoldertypeID'] = ApiClient.convertToType(data['pkiEzsignfoldertypeID'], 'Number');
            }
            if (data.hasOwnProperty('objEzsignfoldertypeName')) {
                obj['objEzsignfoldertypeName'] = MultilingualEzsignfoldertypeName.constructFromObject(data['objEzsignfoldertypeName']);
            }
            if (data.hasOwnProperty('fkiBrandingID')) {
                obj['fkiBrandingID'] = ApiClient.convertToType(data['fkiBrandingID'], 'Number');
            }
            if (data.hasOwnProperty('fkiBillingentityinternalID')) {
                obj['fkiBillingentityinternalID'] = ApiClient.convertToType(data['fkiBillingentityinternalID'], 'Number');
            }
            if (data.hasOwnProperty('fkiUsergroupID')) {
                obj['fkiUsergroupID'] = ApiClient.convertToType(data['fkiUsergroupID'], 'Number');
            }
            if (data.hasOwnProperty('fkiUsergroupIDRestricted')) {
                obj['fkiUsergroupIDRestricted'] = ApiClient.convertToType(data['fkiUsergroupIDRestricted'], 'Number');
            }
            if (data.hasOwnProperty('fkiEzsigntsarequirementID')) {
                obj['fkiEzsigntsarequirementID'] = ApiClient.convertToType(data['fkiEzsigntsarequirementID'], 'Number');
            }
            if (data.hasOwnProperty('sBrandingDescriptionX')) {
                obj['sBrandingDescriptionX'] = ApiClient.convertToType(data['sBrandingDescriptionX'], 'String');
            }
            if (data.hasOwnProperty('sBillingentityinternalDescriptionX')) {
                obj['sBillingentityinternalDescriptionX'] = ApiClient.convertToType(data['sBillingentityinternalDescriptionX'], 'String');
            }
            if (data.hasOwnProperty('sEzsigntsarequirementDescriptionX')) {
                obj['sEzsigntsarequirementDescriptionX'] = ApiClient.convertToType(data['sEzsigntsarequirementDescriptionX'], 'String');
            }
            if (data.hasOwnProperty('sEmailAddressSigned')) {
                obj['sEmailAddressSigned'] = ApiClient.convertToType(data['sEmailAddressSigned'], 'String');
            }
            if (data.hasOwnProperty('sEmailAddressSummary')) {
                obj['sEmailAddressSummary'] = ApiClient.convertToType(data['sEmailAddressSummary'], 'String');
            }
            if (data.hasOwnProperty('sUsergroupNameX')) {
                obj['sUsergroupNameX'] = ApiClient.convertToType(data['sUsergroupNameX'], 'String');
            }
            if (data.hasOwnProperty('sUsergroupNameXRestricted')) {
                obj['sUsergroupNameXRestricted'] = ApiClient.convertToType(data['sUsergroupNameXRestricted'], 'String');
            }
            if (data.hasOwnProperty('eEzsignfoldertypePrivacylevel')) {
                obj['eEzsignfoldertypePrivacylevel'] = FieldEEzsignfoldertypePrivacylevel.constructFromObject(data['eEzsignfoldertypePrivacylevel']);
            }
            if (data.hasOwnProperty('eEzsignfoldertypeSendreminderfrequency')) {
                obj['eEzsignfoldertypeSendreminderfrequency'] = FieldEEzsignfoldertypeSendreminderfrequency.constructFromObject(data['eEzsignfoldertypeSendreminderfrequency']);
            }
            if (data.hasOwnProperty('iEzsignfoldertypeArchivaldays')) {
                obj['iEzsignfoldertypeArchivaldays'] = ApiClient.convertToType(data['iEzsignfoldertypeArchivaldays'], 'Number');
            }
            if (data.hasOwnProperty('eEzsignfoldertypeDisposal')) {
                obj['eEzsignfoldertypeDisposal'] = FieldEEzsignfoldertypeDisposal.constructFromObject(data['eEzsignfoldertypeDisposal']);
            }
            if (data.hasOwnProperty('iEzsignfoldertypeDisposaldays')) {
                obj['iEzsignfoldertypeDisposaldays'] = ApiClient.convertToType(data['iEzsignfoldertypeDisposaldays'], 'Number');
            }
            if (data.hasOwnProperty('iEzsignfoldertypeDeadlinedays')) {
                obj['iEzsignfoldertypeDeadlinedays'] = ApiClient.convertToType(data['iEzsignfoldertypeDeadlinedays'], 'Number');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendattatchmentsigner')) {
                obj['bEzsignfoldertypeSendattatchmentsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeSendattatchmentsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsignedtodocumentowner')) {
                obj['bEzsignfoldertypeSendsignedtodocumentowner'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsignedtodocumentowner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsignedtofolderowner')) {
                obj['bEzsignfoldertypeSendsignedtofolderowner'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsignedtofolderowner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsignedtofullgroup')) {
                obj['bEzsignfoldertypeSendsignedtofullgroup'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsignedtofullgroup'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsignedtolimitedgroup')) {
                obj['bEzsignfoldertypeSendsignedtolimitedgroup'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsignedtolimitedgroup'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsignedtocolleague')) {
                obj['bEzsignfoldertypeSendsignedtocolleague'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsignedtocolleague'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsummarytodocumentowner')) {
                obj['bEzsignfoldertypeSendsummarytodocumentowner'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsummarytodocumentowner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsummarytofolderowner')) {
                obj['bEzsignfoldertypeSendsummarytofolderowner'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsummarytofolderowner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsummarytofullgroup')) {
                obj['bEzsignfoldertypeSendsummarytofullgroup'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsummarytofullgroup'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsummarytolimitedgroup')) {
                obj['bEzsignfoldertypeSendsummarytolimitedgroup'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsummarytolimitedgroup'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeSendsummarytocolleague')) {
                obj['bEzsignfoldertypeSendsummarytocolleague'] = ApiClient.convertToType(data['bEzsignfoldertypeSendsummarytocolleague'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeIncludeproofsigner')) {
                obj['bEzsignfoldertypeIncludeproofsigner'] = ApiClient.convertToType(data['bEzsignfoldertypeIncludeproofsigner'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeIncludeproofuser')) {
                obj['bEzsignfoldertypeIncludeproofuser'] = ApiClient.convertToType(data['bEzsignfoldertypeIncludeproofuser'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldertypeIsactive')) {
                obj['bEzsignfoldertypeIsactive'] = ApiClient.convertToType(data['bEzsignfoldertypeIsactive'], 'Boolean');
            }
            if (data.hasOwnProperty('a_fkiUserIDSigned')) {
                obj['a_fkiUserIDSigned'] = ApiClient.convertToType(data['a_fkiUserIDSigned'], ['Number']);
            }
            if (data.hasOwnProperty('a_fkiUserIDSummary')) {
                obj['a_fkiUserIDSummary'] = ApiClient.convertToType(data['a_fkiUserIDSummary'], ['Number']);
            }
        }
        return obj;
    }

/**
     * Returns The unique ID of the Ezsignfoldertype.
     * minimum: 0
     * @return {Number}
     */
    getPkiEzsignfoldertypeID() {
        return this.pkiEzsignfoldertypeID;
    }

    /**
     * Sets The unique ID of the Ezsignfoldertype.
     * @param {Number} pkiEzsignfoldertypeID The unique ID of the Ezsignfoldertype.
     */
    setPkiEzsignfoldertypeID(pkiEzsignfoldertypeID) {
        this['pkiEzsignfoldertypeID'] = pkiEzsignfoldertypeID;
    }
/**
     * @return {module:eZmaxAPI/model/MultilingualEzsignfoldertypeName}
     */
    getObjEzsignfoldertypeName() {
        return this.objEzsignfoldertypeName;
    }

    /**
     * @param {module:eZmaxAPI/model/MultilingualEzsignfoldertypeName} objEzsignfoldertypeName
     */
    setObjEzsignfoldertypeName(objEzsignfoldertypeName) {
        this['objEzsignfoldertypeName'] = objEzsignfoldertypeName;
    }
/**
     * Returns The unique ID of the Branding
     * minimum: 0
     * @return {Number}
     */
    getFkiBrandingID() {
        return this.fkiBrandingID;
    }

    /**
     * Sets The unique ID of the Branding
     * @param {Number} fkiBrandingID The unique ID of the Branding
     */
    setFkiBrandingID(fkiBrandingID) {
        this['fkiBrandingID'] = fkiBrandingID;
    }
/**
     * Returns The unique ID of the Billingentityinternal.
     * minimum: 0
     * @return {Number}
     */
    getFkiBillingentityinternalID() {
        return this.fkiBillingentityinternalID;
    }

    /**
     * Sets The unique ID of the Billingentityinternal.
     * @param {Number} fkiBillingentityinternalID The unique ID of the Billingentityinternal.
     */
    setFkiBillingentityinternalID(fkiBillingentityinternalID) {
        this['fkiBillingentityinternalID'] = fkiBillingentityinternalID;
    }
/**
     * Returns The unique ID of the Usergroup
     * minimum: 0
     * @return {Number}
     */
    getFkiUsergroupID() {
        return this.fkiUsergroupID;
    }

    /**
     * Sets The unique ID of the Usergroup
     * @param {Number} fkiUsergroupID The unique ID of the Usergroup
     */
    setFkiUsergroupID(fkiUsergroupID) {
        this['fkiUsergroupID'] = fkiUsergroupID;
    }
/**
     * Returns The unique ID of the Usergroup
     * minimum: 0
     * @return {Number}
     */
    getFkiUsergroupIDRestricted() {
        return this.fkiUsergroupIDRestricted;
    }

    /**
     * Sets The unique ID of the Usergroup
     * @param {Number} fkiUsergroupIDRestricted The unique ID of the Usergroup
     */
    setFkiUsergroupIDRestricted(fkiUsergroupIDRestricted) {
        this['fkiUsergroupIDRestricted'] = fkiUsergroupIDRestricted;
    }
/**
     * Returns The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * minimum: 1
     * maximum: 3
     * @return {Number}
     */
    getFkiEzsigntsarequirementID() {
        return this.fkiEzsigntsarequirementID;
    }

    /**
     * Sets The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * @param {Number} fkiEzsigntsarequirementID The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     */
    setFkiEzsigntsarequirementID(fkiEzsigntsarequirementID) {
        this['fkiEzsigntsarequirementID'] = fkiEzsigntsarequirementID;
    }
/**
     * Returns The Description of the Branding in the language of the requester
     * @return {String}
     */
    getSBrandingDescriptionX() {
        return this.sBrandingDescriptionX;
    }

    /**
     * Sets The Description of the Branding in the language of the requester
     * @param {String} sBrandingDescriptionX The Description of the Branding in the language of the requester
     */
    setSBrandingDescriptionX(sBrandingDescriptionX) {
        this['sBrandingDescriptionX'] = sBrandingDescriptionX;
    }
/**
     * Returns The description of the Billingentityinternal in the language of the requester
     * @return {String}
     */
    getSBillingentityinternalDescriptionX() {
        return this.sBillingentityinternalDescriptionX;
    }

    /**
     * Sets The description of the Billingentityinternal in the language of the requester
     * @param {String} sBillingentityinternalDescriptionX The description of the Billingentityinternal in the language of the requester
     */
    setSBillingentityinternalDescriptionX(sBillingentityinternalDescriptionX) {
        this['sBillingentityinternalDescriptionX'] = sBillingentityinternalDescriptionX;
    }
/**
     * Returns The description of the Ezsigntsarequirement in the language of the requester
     * @return {String}
     */
    getSEzsigntsarequirementDescriptionX() {
        return this.sEzsigntsarequirementDescriptionX;
    }

    /**
     * Sets The description of the Ezsigntsarequirement in the language of the requester
     * @param {String} sEzsigntsarequirementDescriptionX The description of the Ezsigntsarequirement in the language of the requester
     */
    setSEzsigntsarequirementDescriptionX(sEzsigntsarequirementDescriptionX) {
        this['sEzsigntsarequirementDescriptionX'] = sEzsigntsarequirementDescriptionX;
    }
/**
     * Returns The email address.
     * @return {String}
     */
    getSEmailAddressSigned() {
        return this.sEmailAddressSigned;
    }

    /**
     * Sets The email address.
     * @param {String} sEmailAddressSigned The email address.
     */
    setSEmailAddressSigned(sEmailAddressSigned) {
        this['sEmailAddressSigned'] = sEmailAddressSigned;
    }
/**
     * Returns The email address.
     * @return {String}
     */
    getSEmailAddressSummary() {
        return this.sEmailAddressSummary;
    }

    /**
     * Sets The email address.
     * @param {String} sEmailAddressSummary The email address.
     */
    setSEmailAddressSummary(sEmailAddressSummary) {
        this['sEmailAddressSummary'] = sEmailAddressSummary;
    }
/**
     * Returns The Name of the Usergroup in the language of the requester
     * @return {String}
     */
    getSUsergroupNameX() {
        return this.sUsergroupNameX;
    }

    /**
     * Sets The Name of the Usergroup in the language of the requester
     * @param {String} sUsergroupNameX The Name of the Usergroup in the language of the requester
     */
    setSUsergroupNameX(sUsergroupNameX) {
        this['sUsergroupNameX'] = sUsergroupNameX;
    }
/**
     * Returns The Name of the Usergroup in the language of the requester
     * @return {String}
     */
    getSUsergroupNameXRestricted() {
        return this.sUsergroupNameXRestricted;
    }

    /**
     * Sets The Name of the Usergroup in the language of the requester
     * @param {String} sUsergroupNameXRestricted The Name of the Usergroup in the language of the requester
     */
    setSUsergroupNameXRestricted(sUsergroupNameXRestricted) {
        this['sUsergroupNameXRestricted'] = sUsergroupNameXRestricted;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsignfoldertypePrivacylevel}
     */
    getEEzsignfoldertypePrivacylevel() {
        return this.eEzsignfoldertypePrivacylevel;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsignfoldertypePrivacylevel} eEzsignfoldertypePrivacylevel
     */
    setEEzsignfoldertypePrivacylevel(eEzsignfoldertypePrivacylevel) {
        this['eEzsignfoldertypePrivacylevel'] = eEzsignfoldertypePrivacylevel;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsignfoldertypeSendreminderfrequency}
     */
    getEEzsignfoldertypeSendreminderfrequency() {
        return this.eEzsignfoldertypeSendreminderfrequency;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsignfoldertypeSendreminderfrequency} eEzsignfoldertypeSendreminderfrequency
     */
    setEEzsignfoldertypeSendreminderfrequency(eEzsignfoldertypeSendreminderfrequency) {
        this['eEzsignfoldertypeSendreminderfrequency'] = eEzsignfoldertypeSendreminderfrequency;
    }
/**
     * Returns The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
     * minimum: 0
     * maximum: 180
     * @return {Number}
     */
    getIEzsignfoldertypeArchivaldays() {
        return this.iEzsignfoldertypeArchivaldays;
    }

    /**
     * Sets The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
     * @param {Number} iEzsignfoldertypeArchivaldays The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
     */
    setIEzsignfoldertypeArchivaldays(iEzsignfoldertypeArchivaldays) {
        this['iEzsignfoldertypeArchivaldays'] = iEzsignfoldertypeArchivaldays;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsignfoldertypeDisposal}
     */
    getEEzsignfoldertypeDisposal() {
        return this.eEzsignfoldertypeDisposal;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsignfoldertypeDisposal} eEzsignfoldertypeDisposal
     */
    setEEzsignfoldertypeDisposal(eEzsignfoldertypeDisposal) {
        this['eEzsignfoldertypeDisposal'] = eEzsignfoldertypeDisposal;
    }
/**
     * Returns The number of days after the archival before the disposal of the Ezsignfolder
     * minimum: 0
     * maximum: 9999
     * @return {Number}
     */
    getIEzsignfoldertypeDisposaldays() {
        return this.iEzsignfoldertypeDisposaldays;
    }

    /**
     * Sets The number of days after the archival before the disposal of the Ezsignfolder
     * @param {Number} iEzsignfoldertypeDisposaldays The number of days after the archival before the disposal of the Ezsignfolder
     */
    setIEzsignfoldertypeDisposaldays(iEzsignfoldertypeDisposaldays) {
        this['iEzsignfoldertypeDisposaldays'] = iEzsignfoldertypeDisposaldays;
    }
/**
     * Returns The number of days to get all Ezsignsignatures
     * minimum: 1
     * maximum: 60
     * @return {Number}
     */
    getIEzsignfoldertypeDeadlinedays() {
        return this.iEzsignfoldertypeDeadlinedays;
    }

    /**
     * Sets The number of days to get all Ezsignsignatures
     * @param {Number} iEzsignfoldertypeDeadlinedays The number of days to get all Ezsignsignatures
     */
    setIEzsignfoldertypeDeadlinedays(iEzsignfoldertypeDeadlinedays) {
        this['iEzsignfoldertypeDeadlinedays'] = iEzsignfoldertypeDeadlinedays;
    }
/**
     * Returns Whether we send the Ezsigndocument and the proof as attachment in the email
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendattatchmentsigner() {
        return this.bEzsignfoldertypeSendattatchmentsigner;
    }

    /**
     * Sets Whether we send the Ezsigndocument and the proof as attachment in the email
     * @param {Boolean} bEzsignfoldertypeSendattatchmentsigner Whether we send the Ezsigndocument and the proof as attachment in the email
     */
    setBEzsignfoldertypeSendattatchmentsigner(bEzsignfoldertypeSendattatchmentsigner) {
        this['bEzsignfoldertypeSendattatchmentsigner'] = bEzsignfoldertypeSendattatchmentsigner;
    }
/**
     * Returns Whether we send the signed Ezsigndocument to the Ezsigndocument's owner
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsignedtodocumentowner() {
        return this.bEzsignfoldertypeSendsignedtodocumentowner;
    }

    /**
     * Sets Whether we send the signed Ezsigndocument to the Ezsigndocument's owner
     * @param {Boolean} bEzsignfoldertypeSendsignedtodocumentowner Whether we send the signed Ezsigndocument to the Ezsigndocument's owner
     */
    setBEzsignfoldertypeSendsignedtodocumentowner(bEzsignfoldertypeSendsignedtodocumentowner) {
        this['bEzsignfoldertypeSendsignedtodocumentowner'] = bEzsignfoldertypeSendsignedtodocumentowner;
    }
/**
     * Returns Whether we send the signed Ezsigndocument to the Ezsignfolder's owner
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsignedtofolderowner() {
        return this.bEzsignfoldertypeSendsignedtofolderowner;
    }

    /**
     * Sets Whether we send the signed Ezsigndocument to the Ezsignfolder's owner
     * @param {Boolean} bEzsignfoldertypeSendsignedtofolderowner Whether we send the signed Ezsigndocument to the Ezsignfolder's owner
     */
    setBEzsignfoldertypeSendsignedtofolderowner(bEzsignfoldertypeSendsignedtofolderowner) {
        this['bEzsignfoldertypeSendsignedtofolderowner'] = bEzsignfoldertypeSendsignedtofolderowner;
    }
/**
     * Returns Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsignedtofullgroup() {
        return this.bEzsignfoldertypeSendsignedtofullgroup;
    }

    /**
     * Sets Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
     * @param {Boolean} bEzsignfoldertypeSendsignedtofullgroup Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
     */
    setBEzsignfoldertypeSendsignedtofullgroup(bEzsignfoldertypeSendsignedtofullgroup) {
        this['bEzsignfoldertypeSendsignedtofullgroup'] = bEzsignfoldertypeSendsignedtofullgroup;
    }
/**
     * Returns Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsignedtolimitedgroup() {
        return this.bEzsignfoldertypeSendsignedtolimitedgroup;
    }

    /**
     * Sets Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
     * @param {Boolean} bEzsignfoldertypeSendsignedtolimitedgroup Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
     */
    setBEzsignfoldertypeSendsignedtolimitedgroup(bEzsignfoldertypeSendsignedtolimitedgroup) {
        this['bEzsignfoldertypeSendsignedtolimitedgroup'] = bEzsignfoldertypeSendsignedtolimitedgroup;
    }
/**
     * Returns Whether we send the signed Ezsigndocument to the colleagues
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsignedtocolleague() {
        return this.bEzsignfoldertypeSendsignedtocolleague;
    }

    /**
     * Sets Whether we send the signed Ezsigndocument to the colleagues
     * @param {Boolean} bEzsignfoldertypeSendsignedtocolleague Whether we send the signed Ezsigndocument to the colleagues
     */
    setBEzsignfoldertypeSendsignedtocolleague(bEzsignfoldertypeSendsignedtocolleague) {
        this['bEzsignfoldertypeSendsignedtocolleague'] = bEzsignfoldertypeSendsignedtocolleague;
    }
/**
     * Returns Whether we send the summary to the Ezsigndocument's owner
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsummarytodocumentowner() {
        return this.bEzsignfoldertypeSendsummarytodocumentowner;
    }

    /**
     * Sets Whether we send the summary to the Ezsigndocument's owner
     * @param {Boolean} bEzsignfoldertypeSendsummarytodocumentowner Whether we send the summary to the Ezsigndocument's owner
     */
    setBEzsignfoldertypeSendsummarytodocumentowner(bEzsignfoldertypeSendsummarytodocumentowner) {
        this['bEzsignfoldertypeSendsummarytodocumentowner'] = bEzsignfoldertypeSendsummarytodocumentowner;
    }
/**
     * Returns Whether we send the summary to the Ezsignfolder's owner
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsummarytofolderowner() {
        return this.bEzsignfoldertypeSendsummarytofolderowner;
    }

    /**
     * Sets Whether we send the summary to the Ezsignfolder's owner
     * @param {Boolean} bEzsignfoldertypeSendsummarytofolderowner Whether we send the summary to the Ezsignfolder's owner
     */
    setBEzsignfoldertypeSendsummarytofolderowner(bEzsignfoldertypeSendsummarytofolderowner) {
        this['bEzsignfoldertypeSendsummarytofolderowner'] = bEzsignfoldertypeSendsummarytofolderowner;
    }
/**
     * Returns Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsummarytofullgroup() {
        return this.bEzsignfoldertypeSendsummarytofullgroup;
    }

    /**
     * Sets Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
     * @param {Boolean} bEzsignfoldertypeSendsummarytofullgroup Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
     */
    setBEzsignfoldertypeSendsummarytofullgroup(bEzsignfoldertypeSendsummarytofullgroup) {
        this['bEzsignfoldertypeSendsummarytofullgroup'] = bEzsignfoldertypeSendsummarytofullgroup;
    }
/**
     * Returns Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsummarytolimitedgroup() {
        return this.bEzsignfoldertypeSendsummarytolimitedgroup;
    }

    /**
     * Sets Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
     * @param {Boolean} bEzsignfoldertypeSendsummarytolimitedgroup Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
     */
    setBEzsignfoldertypeSendsummarytolimitedgroup(bEzsignfoldertypeSendsummarytolimitedgroup) {
        this['bEzsignfoldertypeSendsummarytolimitedgroup'] = bEzsignfoldertypeSendsummarytolimitedgroup;
    }
/**
     * Returns Whether we send the summary to the colleagues
     * @return {Boolean}
     */
    getBEzsignfoldertypeSendsummarytocolleague() {
        return this.bEzsignfoldertypeSendsummarytocolleague;
    }

    /**
     * Sets Whether we send the summary to the colleagues
     * @param {Boolean} bEzsignfoldertypeSendsummarytocolleague Whether we send the summary to the colleagues
     */
    setBEzsignfoldertypeSendsummarytocolleague(bEzsignfoldertypeSendsummarytocolleague) {
        this['bEzsignfoldertypeSendsummarytocolleague'] = bEzsignfoldertypeSendsummarytocolleague;
    }
/**
     * Returns Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
     * @return {Boolean}
     */
    getBEzsignfoldertypeIncludeproofsigner() {
        return this.bEzsignfoldertypeIncludeproofsigner;
    }

    /**
     * Sets Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
     * @param {Boolean} bEzsignfoldertypeIncludeproofsigner Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
     */
    setBEzsignfoldertypeIncludeproofsigner(bEzsignfoldertypeIncludeproofsigner) {
        this['bEzsignfoldertypeIncludeproofsigner'] = bEzsignfoldertypeIncludeproofsigner;
    }
/**
     * Returns Whether we include the proof with the signed Ezsigndocument for users
     * @return {Boolean}
     */
    getBEzsignfoldertypeIncludeproofuser() {
        return this.bEzsignfoldertypeIncludeproofuser;
    }

    /**
     * Sets Whether we include the proof with the signed Ezsigndocument for users
     * @param {Boolean} bEzsignfoldertypeIncludeproofuser Whether we include the proof with the signed Ezsigndocument for users
     */
    setBEzsignfoldertypeIncludeproofuser(bEzsignfoldertypeIncludeproofuser) {
        this['bEzsignfoldertypeIncludeproofuser'] = bEzsignfoldertypeIncludeproofuser;
    }
/**
     * Returns Whether the Ezsignfoldertype is active or not
     * @return {Boolean}
     */
    getBEzsignfoldertypeIsactive() {
        return this.bEzsignfoldertypeIsactive;
    }

    /**
     * Sets Whether the Ezsignfoldertype is active or not
     * @param {Boolean} bEzsignfoldertypeIsactive Whether the Ezsignfoldertype is active or not
     */
    setBEzsignfoldertypeIsactive(bEzsignfoldertypeIsactive) {
        this['bEzsignfoldertypeIsactive'] = bEzsignfoldertypeIsactive;
    }
/**
     * @return {Array.<Number>}
     */
    getAFkiUserIDSigned() {
        return this.a_fkiUserIDSigned;
    }

    /**
     * @param {Array.<Number>} a_fkiUserIDSigned
     */
    setAFkiUserIDSigned(a_fkiUserIDSigned) {
        this['a_fkiUserIDSigned'] = a_fkiUserIDSigned;
    }
/**
     * @return {Array.<Number>}
     */
    getAFkiUserIDSummary() {
        return this.a_fkiUserIDSummary;
    }

    /**
     * @param {Array.<Number>} a_fkiUserIDSummary
     */
    setAFkiUserIDSummary(a_fkiUserIDSummary) {
        this['a_fkiUserIDSummary'] = a_fkiUserIDSummary;
    }

}

/**
 * The unique ID of the Ezsignfoldertype.
 * @member {Number} pkiEzsignfoldertypeID
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['pkiEzsignfoldertypeID'] = undefined;

/**
 * @member {module:eZmaxAPI/model/MultilingualEzsignfoldertypeName} objEzsignfoldertypeName
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['objEzsignfoldertypeName'] = undefined;

/**
 * The unique ID of the Branding
 * @member {Number} fkiBrandingID
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['fkiBrandingID'] = undefined;

/**
 * The unique ID of the Billingentityinternal.
 * @member {Number} fkiBillingentityinternalID
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['fkiBillingentityinternalID'] = undefined;

/**
 * The unique ID of the Usergroup
 * @member {Number} fkiUsergroupID
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['fkiUsergroupID'] = undefined;

/**
 * The unique ID of the Usergroup
 * @member {Number} fkiUsergroupIDRestricted
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['fkiUsergroupIDRestricted'] = undefined;

/**
 * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
 * @member {Number} fkiEzsigntsarequirementID
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['fkiEzsigntsarequirementID'] = undefined;

/**
 * The Description of the Branding in the language of the requester
 * @member {String} sBrandingDescriptionX
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['sBrandingDescriptionX'] = undefined;

/**
 * The description of the Billingentityinternal in the language of the requester
 * @member {String} sBillingentityinternalDescriptionX
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['sBillingentityinternalDescriptionX'] = undefined;

/**
 * The description of the Ezsigntsarequirement in the language of the requester
 * @member {String} sEzsigntsarequirementDescriptionX
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['sEzsigntsarequirementDescriptionX'] = undefined;

/**
 * The email address.
 * @member {String} sEmailAddressSigned
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['sEmailAddressSigned'] = undefined;

/**
 * The email address.
 * @member {String} sEmailAddressSummary
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['sEmailAddressSummary'] = undefined;

/**
 * The Name of the Usergroup in the language of the requester
 * @member {String} sUsergroupNameX
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['sUsergroupNameX'] = undefined;

/**
 * The Name of the Usergroup in the language of the requester
 * @member {String} sUsergroupNameXRestricted
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['sUsergroupNameXRestricted'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfoldertypePrivacylevel} eEzsignfoldertypePrivacylevel
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['eEzsignfoldertypePrivacylevel'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfoldertypeSendreminderfrequency} eEzsignfoldertypeSendreminderfrequency
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['eEzsignfoldertypeSendreminderfrequency'] = undefined;

/**
 * The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
 * @member {Number} iEzsignfoldertypeArchivaldays
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['iEzsignfoldertypeArchivaldays'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfoldertypeDisposal} eEzsignfoldertypeDisposal
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['eEzsignfoldertypeDisposal'] = undefined;

/**
 * The number of days after the archival before the disposal of the Ezsignfolder
 * @member {Number} iEzsignfoldertypeDisposaldays
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['iEzsignfoldertypeDisposaldays'] = undefined;

/**
 * The number of days to get all Ezsignsignatures
 * @member {Number} iEzsignfoldertypeDeadlinedays
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['iEzsignfoldertypeDeadlinedays'] = undefined;

/**
 * Whether we send the Ezsigndocument and the proof as attachment in the email
 * @member {Boolean} bEzsignfoldertypeSendattatchmentsigner
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['bEzsignfoldertypeSendattatchmentsigner'] = undefined;

/**
 * Whether we send the signed Ezsigndocument to the Ezsigndocument's owner
 * @member {Boolean} bEzsignfoldertypeSendsignedtodocumentowner
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['bEzsignfoldertypeSendsignedtodocumentowner'] = undefined;

/**
 * Whether we send the signed Ezsigndocument to the Ezsignfolder's owner
 * @member {Boolean} bEzsignfoldertypeSendsignedtofolderowner
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['bEzsignfoldertypeSendsignedtofolderowner'] = undefined;

/**
 * Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsignedtofullgroup
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['bEzsignfoldertypeSendsignedtofullgroup'] = undefined;

/**
 * Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsignedtolimitedgroup
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['bEzsignfoldertypeSendsignedtolimitedgroup'] = undefined;

/**
 * Whether we send the signed Ezsigndocument to the colleagues
 * @member {Boolean} bEzsignfoldertypeSendsignedtocolleague
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['bEzsignfoldertypeSendsignedtocolleague'] = undefined;

/**
 * Whether we send the summary to the Ezsigndocument's owner
 * @member {Boolean} bEzsignfoldertypeSendsummarytodocumentowner
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['bEzsignfoldertypeSendsummarytodocumentowner'] = undefined;

/**
 * Whether we send the summary to the Ezsignfolder's owner
 * @member {Boolean} bEzsignfoldertypeSendsummarytofolderowner
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['bEzsignfoldertypeSendsummarytofolderowner'] = undefined;

/**
 * Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsummarytofullgroup
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['bEzsignfoldertypeSendsummarytofullgroup'] = undefined;

/**
 * Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsummarytolimitedgroup
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['bEzsignfoldertypeSendsummarytolimitedgroup'] = undefined;

/**
 * Whether we send the summary to the colleagues
 * @member {Boolean} bEzsignfoldertypeSendsummarytocolleague
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['bEzsignfoldertypeSendsummarytocolleague'] = undefined;

/**
 * Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
 * @member {Boolean} bEzsignfoldertypeIncludeproofsigner
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['bEzsignfoldertypeIncludeproofsigner'] = undefined;

/**
 * Whether we include the proof with the signed Ezsigndocument for users
 * @member {Boolean} bEzsignfoldertypeIncludeproofuser
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['bEzsignfoldertypeIncludeproofuser'] = undefined;

/**
 * Whether the Ezsignfoldertype is active or not
 * @member {Boolean} bEzsignfoldertypeIsactive
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['bEzsignfoldertypeIsactive'] = undefined;

/**
 * @member {Array.<Number>} a_fkiUserIDSigned
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['a_fkiUserIDSigned'] = undefined;

/**
 * @member {Array.<Number>} a_fkiUserIDSummary
 */
EzsignfoldertypeGetObjectV1ResponseMPayload.prototype['a_fkiUserIDSummary'] = undefined;


// Implement EzsignfoldertypeResponseCompound interface:
/**
 * The unique ID of the Ezsignfoldertype.
 * @member {Number} pkiEzsignfoldertypeID
 */
EzsignfoldertypeResponseCompound.prototype['pkiEzsignfoldertypeID'] = undefined;
/**
 * @member {module:eZmaxAPI/model/MultilingualEzsignfoldertypeName} objEzsignfoldertypeName
 */
EzsignfoldertypeResponseCompound.prototype['objEzsignfoldertypeName'] = undefined;
/**
 * The unique ID of the Branding
 * @member {Number} fkiBrandingID
 */
EzsignfoldertypeResponseCompound.prototype['fkiBrandingID'] = undefined;
/**
 * The unique ID of the Billingentityinternal.
 * @member {Number} fkiBillingentityinternalID
 */
EzsignfoldertypeResponseCompound.prototype['fkiBillingentityinternalID'] = undefined;
/**
 * The unique ID of the Usergroup
 * @member {Number} fkiUsergroupID
 */
EzsignfoldertypeResponseCompound.prototype['fkiUsergroupID'] = undefined;
/**
 * The unique ID of the Usergroup
 * @member {Number} fkiUsergroupIDRestricted
 */
EzsignfoldertypeResponseCompound.prototype['fkiUsergroupIDRestricted'] = undefined;
/**
 * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
 * @member {Number} fkiEzsigntsarequirementID
 */
EzsignfoldertypeResponseCompound.prototype['fkiEzsigntsarequirementID'] = undefined;
/**
 * The Description of the Branding in the language of the requester
 * @member {String} sBrandingDescriptionX
 */
EzsignfoldertypeResponseCompound.prototype['sBrandingDescriptionX'] = undefined;
/**
 * The description of the Billingentityinternal in the language of the requester
 * @member {String} sBillingentityinternalDescriptionX
 */
EzsignfoldertypeResponseCompound.prototype['sBillingentityinternalDescriptionX'] = undefined;
/**
 * The description of the Ezsigntsarequirement in the language of the requester
 * @member {String} sEzsigntsarequirementDescriptionX
 */
EzsignfoldertypeResponseCompound.prototype['sEzsigntsarequirementDescriptionX'] = undefined;
/**
 * The email address.
 * @member {String} sEmailAddressSigned
 */
EzsignfoldertypeResponseCompound.prototype['sEmailAddressSigned'] = undefined;
/**
 * The email address.
 * @member {String} sEmailAddressSummary
 */
EzsignfoldertypeResponseCompound.prototype['sEmailAddressSummary'] = undefined;
/**
 * The Name of the Usergroup in the language of the requester
 * @member {String} sUsergroupNameX
 */
EzsignfoldertypeResponseCompound.prototype['sUsergroupNameX'] = undefined;
/**
 * The Name of the Usergroup in the language of the requester
 * @member {String} sUsergroupNameXRestricted
 */
EzsignfoldertypeResponseCompound.prototype['sUsergroupNameXRestricted'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfoldertypePrivacylevel} eEzsignfoldertypePrivacylevel
 */
EzsignfoldertypeResponseCompound.prototype['eEzsignfoldertypePrivacylevel'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfoldertypeSendreminderfrequency} eEzsignfoldertypeSendreminderfrequency
 */
EzsignfoldertypeResponseCompound.prototype['eEzsignfoldertypeSendreminderfrequency'] = undefined;
/**
 * The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
 * @member {Number} iEzsignfoldertypeArchivaldays
 */
EzsignfoldertypeResponseCompound.prototype['iEzsignfoldertypeArchivaldays'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfoldertypeDisposal} eEzsignfoldertypeDisposal
 */
EzsignfoldertypeResponseCompound.prototype['eEzsignfoldertypeDisposal'] = undefined;
/**
 * The number of days after the archival before the disposal of the Ezsignfolder
 * @member {Number} iEzsignfoldertypeDisposaldays
 */
EzsignfoldertypeResponseCompound.prototype['iEzsignfoldertypeDisposaldays'] = undefined;
/**
 * The number of days to get all Ezsignsignatures
 * @member {Number} iEzsignfoldertypeDeadlinedays
 */
EzsignfoldertypeResponseCompound.prototype['iEzsignfoldertypeDeadlinedays'] = undefined;
/**
 * Whether we send the Ezsigndocument and the proof as attachment in the email
 * @member {Boolean} bEzsignfoldertypeSendattatchmentsigner
 */
EzsignfoldertypeResponseCompound.prototype['bEzsignfoldertypeSendattatchmentsigner'] = undefined;
/**
 * Whether we send the signed Ezsigndocument to the Ezsigndocument's owner
 * @member {Boolean} bEzsignfoldertypeSendsignedtodocumentowner
 */
EzsignfoldertypeResponseCompound.prototype['bEzsignfoldertypeSendsignedtodocumentowner'] = undefined;
/**
 * Whether we send the signed Ezsigndocument to the Ezsignfolder's owner
 * @member {Boolean} bEzsignfoldertypeSendsignedtofolderowner
 */
EzsignfoldertypeResponseCompound.prototype['bEzsignfoldertypeSendsignedtofolderowner'] = undefined;
/**
 * Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsignedtofullgroup
 */
EzsignfoldertypeResponseCompound.prototype['bEzsignfoldertypeSendsignedtofullgroup'] = undefined;
/**
 * Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsignedtolimitedgroup
 */
EzsignfoldertypeResponseCompound.prototype['bEzsignfoldertypeSendsignedtolimitedgroup'] = undefined;
/**
 * Whether we send the signed Ezsigndocument to the colleagues
 * @member {Boolean} bEzsignfoldertypeSendsignedtocolleague
 */
EzsignfoldertypeResponseCompound.prototype['bEzsignfoldertypeSendsignedtocolleague'] = undefined;
/**
 * Whether we send the summary to the Ezsigndocument's owner
 * @member {Boolean} bEzsignfoldertypeSendsummarytodocumentowner
 */
EzsignfoldertypeResponseCompound.prototype['bEzsignfoldertypeSendsummarytodocumentowner'] = undefined;
/**
 * Whether we send the summary to the Ezsignfolder's owner
 * @member {Boolean} bEzsignfoldertypeSendsummarytofolderowner
 */
EzsignfoldertypeResponseCompound.prototype['bEzsignfoldertypeSendsummarytofolderowner'] = undefined;
/**
 * Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsummarytofullgroup
 */
EzsignfoldertypeResponseCompound.prototype['bEzsignfoldertypeSendsummarytofullgroup'] = undefined;
/**
 * Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
 * @member {Boolean} bEzsignfoldertypeSendsummarytolimitedgroup
 */
EzsignfoldertypeResponseCompound.prototype['bEzsignfoldertypeSendsummarytolimitedgroup'] = undefined;
/**
 * Whether we send the summary to the colleagues
 * @member {Boolean} bEzsignfoldertypeSendsummarytocolleague
 */
EzsignfoldertypeResponseCompound.prototype['bEzsignfoldertypeSendsummarytocolleague'] = undefined;
/**
 * Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
 * @member {Boolean} bEzsignfoldertypeIncludeproofsigner
 */
EzsignfoldertypeResponseCompound.prototype['bEzsignfoldertypeIncludeproofsigner'] = undefined;
/**
 * Whether we include the proof with the signed Ezsigndocument for users
 * @member {Boolean} bEzsignfoldertypeIncludeproofuser
 */
EzsignfoldertypeResponseCompound.prototype['bEzsignfoldertypeIncludeproofuser'] = undefined;
/**
 * Whether the Ezsignfoldertype is active or not
 * @member {Boolean} bEzsignfoldertypeIsactive
 */
EzsignfoldertypeResponseCompound.prototype['bEzsignfoldertypeIsactive'] = undefined;
/**
 * @member {Array.<Number>} a_fkiUserIDSigned
 */
EzsignfoldertypeResponseCompound.prototype['a_fkiUserIDSigned'] = undefined;
/**
 * @member {Array.<Number>} a_fkiUserIDSummary
 */
EzsignfoldertypeResponseCompound.prototype['a_fkiUserIDSummary'] = undefined;




export default EzsignfoldertypeGetObjectV1ResponseMPayload;

