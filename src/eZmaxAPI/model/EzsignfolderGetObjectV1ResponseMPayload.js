/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommonAudit from './CommonAudit';
import CustomEzsignfoldertypeResponse from './CustomEzsignfoldertypeResponse';
import EzsignfolderResponseCompound from './EzsignfolderResponseCompound';
import FieldEEzsignfolderCompletion from './FieldEEzsignfolderCompletion';
import FieldEEzsignfolderSendreminderfrequency from './FieldEEzsignfolderSendreminderfrequency';
import FieldEEzsignfolderStep from './FieldEEzsignfolderStep';

/**
 * The EzsignfolderGetObjectV1ResponseMPayload model module.
 * @module eZmaxAPI/model/EzsignfolderGetObjectV1ResponseMPayload
 * @version 1.2.0
 */
class EzsignfolderGetObjectV1ResponseMPayload {
    /**
     * Constructs a new <code>EzsignfolderGetObjectV1ResponseMPayload</code>.
     * Payload for GET /1/object/ezsignfolder/{pkiEzsignfolderID}
     * @alias module:eZmaxAPI/model/EzsignfolderGetObjectV1ResponseMPayload
     * @implements module:eZmaxAPI/model/EzsignfolderResponseCompound
     * @param pkiEzsignfolderID {Number} The unique ID of the Ezsignfolder
     * @param eEzsignfolderCompletion {module:eZmaxAPI/model/FieldEEzsignfolderCompletion} 
     * @param sEzsignfolderDescription {String} The description of the Ezsignfolder
     */
    constructor(pkiEzsignfolderID, eEzsignfolderCompletion, sEzsignfolderDescription) { 
        EzsignfolderResponseCompound.initialize(this, pkiEzsignfolderID, eEzsignfolderCompletion, sEzsignfolderDescription);
        EzsignfolderGetObjectV1ResponseMPayload.initialize(this, pkiEzsignfolderID, eEzsignfolderCompletion, sEzsignfolderDescription);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pkiEzsignfolderID, eEzsignfolderCompletion, sEzsignfolderDescription) { 
        obj['pkiEzsignfolderID'] = pkiEzsignfolderID;
        obj['eEzsignfolderCompletion'] = eEzsignfolderCompletion;
        obj['sEzsignfolderDescription'] = sEzsignfolderDescription;
    }

    /**
     * Constructs a <code>EzsignfolderGetObjectV1ResponseMPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/EzsignfolderGetObjectV1ResponseMPayload} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/EzsignfolderGetObjectV1ResponseMPayload} The populated <code>EzsignfolderGetObjectV1ResponseMPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EzsignfolderGetObjectV1ResponseMPayload();
            EzsignfolderResponseCompound.constructFromObject(data, obj);

            if (data.hasOwnProperty('pkiEzsignfolderID')) {
                obj['pkiEzsignfolderID'] = ApiClient.convertToType(data['pkiEzsignfolderID'], 'Number');
            }
            if (data.hasOwnProperty('fkiEzsignfoldertypeID')) {
                obj['fkiEzsignfoldertypeID'] = ApiClient.convertToType(data['fkiEzsignfoldertypeID'], 'Number');
            }
            if (data.hasOwnProperty('objEzsignfoldertype')) {
                obj['objEzsignfoldertype'] = CustomEzsignfoldertypeResponse.constructFromObject(data['objEzsignfoldertype']);
            }
            if (data.hasOwnProperty('eEzsignfolderCompletion')) {
                obj['eEzsignfolderCompletion'] = FieldEEzsignfolderCompletion.constructFromObject(data['eEzsignfolderCompletion']);
            }
            if (data.hasOwnProperty('sEzsignfoldertypeNameX')) {
                obj['sEzsignfoldertypeNameX'] = ApiClient.convertToType(data['sEzsignfoldertypeNameX'], 'String');
            }
            if (data.hasOwnProperty('fkiBillingentityinternalID')) {
                obj['fkiBillingentityinternalID'] = ApiClient.convertToType(data['fkiBillingentityinternalID'], 'Number');
            }
            if (data.hasOwnProperty('sBillingentityinternalDescriptionX')) {
                obj['sBillingentityinternalDescriptionX'] = ApiClient.convertToType(data['sBillingentityinternalDescriptionX'], 'String');
            }
            if (data.hasOwnProperty('fkiEzsigntsarequirementID')) {
                obj['fkiEzsigntsarequirementID'] = ApiClient.convertToType(data['fkiEzsigntsarequirementID'], 'Number');
            }
            if (data.hasOwnProperty('sEzsigntsarequirementDescriptionX')) {
                obj['sEzsigntsarequirementDescriptionX'] = ApiClient.convertToType(data['sEzsigntsarequirementDescriptionX'], 'String');
            }
            if (data.hasOwnProperty('sEzsignfolderDescription')) {
                obj['sEzsignfolderDescription'] = ApiClient.convertToType(data['sEzsignfolderDescription'], 'String');
            }
            if (data.hasOwnProperty('tEzsignfolderNote')) {
                obj['tEzsignfolderNote'] = ApiClient.convertToType(data['tEzsignfolderNote'], 'String');
            }
            if (data.hasOwnProperty('bEzsignfolderIsdisposable')) {
                obj['bEzsignfolderIsdisposable'] = ApiClient.convertToType(data['bEzsignfolderIsdisposable'], 'Boolean');
            }
            if (data.hasOwnProperty('eEzsignfolderSendreminderfrequency')) {
                obj['eEzsignfolderSendreminderfrequency'] = FieldEEzsignfolderSendreminderfrequency.constructFromObject(data['eEzsignfolderSendreminderfrequency']);
            }
            if (data.hasOwnProperty('dtEzsignfolderDelayedsenddate')) {
                obj['dtEzsignfolderDelayedsenddate'] = ApiClient.convertToType(data['dtEzsignfolderDelayedsenddate'], 'String');
            }
            if (data.hasOwnProperty('dtEzsignfolderDuedate')) {
                obj['dtEzsignfolderDuedate'] = ApiClient.convertToType(data['dtEzsignfolderDuedate'], 'String');
            }
            if (data.hasOwnProperty('dtEzsignfolderSentdate')) {
                obj['dtEzsignfolderSentdate'] = ApiClient.convertToType(data['dtEzsignfolderSentdate'], 'String');
            }
            if (data.hasOwnProperty('dtEzsignfolderScheduledarchive')) {
                obj['dtEzsignfolderScheduledarchive'] = ApiClient.convertToType(data['dtEzsignfolderScheduledarchive'], 'String');
            }
            if (data.hasOwnProperty('dtEzsignfolderScheduleddispose')) {
                obj['dtEzsignfolderScheduleddispose'] = ApiClient.convertToType(data['dtEzsignfolderScheduleddispose'], 'String');
            }
            if (data.hasOwnProperty('eEzsignfolderStep')) {
                obj['eEzsignfolderStep'] = FieldEEzsignfolderStep.constructFromObject(data['eEzsignfolderStep']);
            }
            if (data.hasOwnProperty('dtEzsignfolderClose')) {
                obj['dtEzsignfolderClose'] = ApiClient.convertToType(data['dtEzsignfolderClose'], 'String');
            }
            if (data.hasOwnProperty('tEzsignfolderMessage')) {
                obj['tEzsignfolderMessage'] = ApiClient.convertToType(data['tEzsignfolderMessage'], 'String');
            }
            if (data.hasOwnProperty('objAudit')) {
                obj['objAudit'] = CommonAudit.constructFromObject(data['objAudit']);
            }
            if (data.hasOwnProperty('sEzsignfolderExternalid')) {
                obj['sEzsignfolderExternalid'] = ApiClient.convertToType(data['sEzsignfolderExternalid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EzsignfolderGetObjectV1ResponseMPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EzsignfolderGetObjectV1ResponseMPayload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EzsignfolderGetObjectV1ResponseMPayload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `objEzsignfoldertype`
        if (data['objEzsignfoldertype']) { // data not null
          CustomEzsignfoldertypeResponse.validateJSON(data['objEzsignfoldertype']);
        }
        // ensure the json data is a string
        if (data['sEzsignfoldertypeNameX'] && !(typeof data['sEzsignfoldertypeNameX'] === 'string' || data['sEzsignfoldertypeNameX'] instanceof String)) {
            throw new Error("Expected the field `sEzsignfoldertypeNameX` to be a primitive type in the JSON string but got " + data['sEzsignfoldertypeNameX']);
        }
        // ensure the json data is a string
        if (data['sBillingentityinternalDescriptionX'] && !(typeof data['sBillingentityinternalDescriptionX'] === 'string' || data['sBillingentityinternalDescriptionX'] instanceof String)) {
            throw new Error("Expected the field `sBillingentityinternalDescriptionX` to be a primitive type in the JSON string but got " + data['sBillingentityinternalDescriptionX']);
        }
        // ensure the json data is a string
        if (data['sEzsigntsarequirementDescriptionX'] && !(typeof data['sEzsigntsarequirementDescriptionX'] === 'string' || data['sEzsigntsarequirementDescriptionX'] instanceof String)) {
            throw new Error("Expected the field `sEzsigntsarequirementDescriptionX` to be a primitive type in the JSON string but got " + data['sEzsigntsarequirementDescriptionX']);
        }
        // ensure the json data is a string
        if (data['sEzsignfolderDescription'] && !(typeof data['sEzsignfolderDescription'] === 'string' || data['sEzsignfolderDescription'] instanceof String)) {
            throw new Error("Expected the field `sEzsignfolderDescription` to be a primitive type in the JSON string but got " + data['sEzsignfolderDescription']);
        }
        // ensure the json data is a string
        if (data['tEzsignfolderNote'] && !(typeof data['tEzsignfolderNote'] === 'string' || data['tEzsignfolderNote'] instanceof String)) {
            throw new Error("Expected the field `tEzsignfolderNote` to be a primitive type in the JSON string but got " + data['tEzsignfolderNote']);
        }
        // ensure the json data is a string
        if (data['dtEzsignfolderDelayedsenddate'] && !(typeof data['dtEzsignfolderDelayedsenddate'] === 'string' || data['dtEzsignfolderDelayedsenddate'] instanceof String)) {
            throw new Error("Expected the field `dtEzsignfolderDelayedsenddate` to be a primitive type in the JSON string but got " + data['dtEzsignfolderDelayedsenddate']);
        }
        // ensure the json data is a string
        if (data['dtEzsignfolderDuedate'] && !(typeof data['dtEzsignfolderDuedate'] === 'string' || data['dtEzsignfolderDuedate'] instanceof String)) {
            throw new Error("Expected the field `dtEzsignfolderDuedate` to be a primitive type in the JSON string but got " + data['dtEzsignfolderDuedate']);
        }
        // ensure the json data is a string
        if (data['dtEzsignfolderSentdate'] && !(typeof data['dtEzsignfolderSentdate'] === 'string' || data['dtEzsignfolderSentdate'] instanceof String)) {
            throw new Error("Expected the field `dtEzsignfolderSentdate` to be a primitive type in the JSON string but got " + data['dtEzsignfolderSentdate']);
        }
        // ensure the json data is a string
        if (data['dtEzsignfolderScheduledarchive'] && !(typeof data['dtEzsignfolderScheduledarchive'] === 'string' || data['dtEzsignfolderScheduledarchive'] instanceof String)) {
            throw new Error("Expected the field `dtEzsignfolderScheduledarchive` to be a primitive type in the JSON string but got " + data['dtEzsignfolderScheduledarchive']);
        }
        // ensure the json data is a string
        if (data['dtEzsignfolderScheduleddispose'] && !(typeof data['dtEzsignfolderScheduleddispose'] === 'string' || data['dtEzsignfolderScheduleddispose'] instanceof String)) {
            throw new Error("Expected the field `dtEzsignfolderScheduleddispose` to be a primitive type in the JSON string but got " + data['dtEzsignfolderScheduleddispose']);
        }
        // ensure the json data is a string
        if (data['dtEzsignfolderClose'] && !(typeof data['dtEzsignfolderClose'] === 'string' || data['dtEzsignfolderClose'] instanceof String)) {
            throw new Error("Expected the field `dtEzsignfolderClose` to be a primitive type in the JSON string but got " + data['dtEzsignfolderClose']);
        }
        // ensure the json data is a string
        if (data['tEzsignfolderMessage'] && !(typeof data['tEzsignfolderMessage'] === 'string' || data['tEzsignfolderMessage'] instanceof String)) {
            throw new Error("Expected the field `tEzsignfolderMessage` to be a primitive type in the JSON string but got " + data['tEzsignfolderMessage']);
        }
        // validate the optional field `objAudit`
        if (data['objAudit']) { // data not null
          CommonAudit.validateJSON(data['objAudit']);
        }
        // ensure the json data is a string
        if (data['sEzsignfolderExternalid'] && !(typeof data['sEzsignfolderExternalid'] === 'string' || data['sEzsignfolderExternalid'] instanceof String)) {
            throw new Error("Expected the field `sEzsignfolderExternalid` to be a primitive type in the JSON string but got " + data['sEzsignfolderExternalid']);
        }

        return true;
    }

/**
     * Returns The unique ID of the Ezsignfolder
     * minimum: 0
     * @return {Number}
     */
    getPkiEzsignfolderID() {
        return this.pkiEzsignfolderID;
    }

    /**
     * Sets The unique ID of the Ezsignfolder
     * @param {Number} pkiEzsignfolderID The unique ID of the Ezsignfolder
     */
    setPkiEzsignfolderID(pkiEzsignfolderID) {
        this['pkiEzsignfolderID'] = pkiEzsignfolderID;
    }
/**
     * Returns The unique ID of the Ezsignfoldertype.
     * minimum: 0
     * maximum: 65535
     * @return {Number}
     */
    getFkiEzsignfoldertypeID() {
        return this.fkiEzsignfoldertypeID;
    }

    /**
     * Sets The unique ID of the Ezsignfoldertype.
     * @param {Number} fkiEzsignfoldertypeID The unique ID of the Ezsignfoldertype.
     */
    setFkiEzsignfoldertypeID(fkiEzsignfoldertypeID) {
        this['fkiEzsignfoldertypeID'] = fkiEzsignfoldertypeID;
    }
/**
     * @return {module:eZmaxAPI/model/CustomEzsignfoldertypeResponse}
     */
    getObjEzsignfoldertype() {
        return this.objEzsignfoldertype;
    }

    /**
     * @param {module:eZmaxAPI/model/CustomEzsignfoldertypeResponse} objEzsignfoldertype
     */
    setObjEzsignfoldertype(objEzsignfoldertype) {
        this['objEzsignfoldertype'] = objEzsignfoldertype;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsignfolderCompletion}
     */
    getEEzsignfolderCompletion() {
        return this.eEzsignfolderCompletion;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsignfolderCompletion} eEzsignfolderCompletion
     */
    setEEzsignfolderCompletion(eEzsignfolderCompletion) {
        this['eEzsignfolderCompletion'] = eEzsignfolderCompletion;
    }
/**
     * @return {String}
     */
    getSEzsignfoldertypeNameX() {
        return this.sEzsignfoldertypeNameX;
    }

    /**
     * @param {String} sEzsignfoldertypeNameX
     */
    setSEzsignfoldertypeNameX(sEzsignfoldertypeNameX) {
        this['sEzsignfoldertypeNameX'] = sEzsignfoldertypeNameX;
    }
/**
     * Returns The unique ID of the Billingentityinternal.
     * minimum: 0
     * @return {Number}
     */
    getFkiBillingentityinternalID() {
        return this.fkiBillingentityinternalID;
    }

    /**
     * Sets The unique ID of the Billingentityinternal.
     * @param {Number} fkiBillingentityinternalID The unique ID of the Billingentityinternal.
     */
    setFkiBillingentityinternalID(fkiBillingentityinternalID) {
        this['fkiBillingentityinternalID'] = fkiBillingentityinternalID;
    }
/**
     * Returns The description of the Billingentityinternal in the language of the requester
     * @return {String}
     */
    getSBillingentityinternalDescriptionX() {
        return this.sBillingentityinternalDescriptionX;
    }

    /**
     * Sets The description of the Billingentityinternal in the language of the requester
     * @param {String} sBillingentityinternalDescriptionX The description of the Billingentityinternal in the language of the requester
     */
    setSBillingentityinternalDescriptionX(sBillingentityinternalDescriptionX) {
        this['sBillingentityinternalDescriptionX'] = sBillingentityinternalDescriptionX;
    }
/**
     * Returns The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * minimum: 1
     * maximum: 3
     * @return {Number}
     */
    getFkiEzsigntsarequirementID() {
        return this.fkiEzsigntsarequirementID;
    }

    /**
     * Sets The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * @param {Number} fkiEzsigntsarequirementID The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     */
    setFkiEzsigntsarequirementID(fkiEzsigntsarequirementID) {
        this['fkiEzsigntsarequirementID'] = fkiEzsigntsarequirementID;
    }
/**
     * Returns The description of the Ezsigntsarequirement in the language of the requester
     * @return {String}
     */
    getSEzsigntsarequirementDescriptionX() {
        return this.sEzsigntsarequirementDescriptionX;
    }

    /**
     * Sets The description of the Ezsigntsarequirement in the language of the requester
     * @param {String} sEzsigntsarequirementDescriptionX The description of the Ezsigntsarequirement in the language of the requester
     */
    setSEzsigntsarequirementDescriptionX(sEzsigntsarequirementDescriptionX) {
        this['sEzsigntsarequirementDescriptionX'] = sEzsigntsarequirementDescriptionX;
    }
/**
     * Returns The description of the Ezsignfolder
     * @return {String}
     */
    getSEzsignfolderDescription() {
        return this.sEzsignfolderDescription;
    }

    /**
     * Sets The description of the Ezsignfolder
     * @param {String} sEzsignfolderDescription The description of the Ezsignfolder
     */
    setSEzsignfolderDescription(sEzsignfolderDescription) {
        this['sEzsignfolderDescription'] = sEzsignfolderDescription;
    }
/**
     * Returns Note about the Ezsignfolder
     * @return {String}
     */
    getTEzsignfolderNote() {
        return this.tEzsignfolderNote;
    }

    /**
     * Sets Note about the Ezsignfolder
     * @param {String} tEzsignfolderNote Note about the Ezsignfolder
     */
    setTEzsignfolderNote(tEzsignfolderNote) {
        this['tEzsignfolderNote'] = tEzsignfolderNote;
    }
/**
     * Returns If the Ezsigndocument can be disposed
     * @return {Boolean}
     */
    getBEzsignfolderIsdisposable() {
        return this.bEzsignfolderIsdisposable;
    }

    /**
     * Sets If the Ezsigndocument can be disposed
     * @param {Boolean} bEzsignfolderIsdisposable If the Ezsigndocument can be disposed
     */
    setBEzsignfolderIsdisposable(bEzsignfolderIsdisposable) {
        this['bEzsignfolderIsdisposable'] = bEzsignfolderIsdisposable;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsignfolderSendreminderfrequency}
     */
    getEEzsignfolderSendreminderfrequency() {
        return this.eEzsignfolderSendreminderfrequency;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsignfolderSendreminderfrequency} eEzsignfolderSendreminderfrequency
     */
    setEEzsignfolderSendreminderfrequency(eEzsignfolderSendreminderfrequency) {
        this['eEzsignfolderSendreminderfrequency'] = eEzsignfolderSendreminderfrequency;
    }
/**
     * Returns The date and time at which the Ezsignfolder will be sent in the future.
     * @return {String}
     */
    getDtEzsignfolderDelayedsenddate() {
        return this.dtEzsignfolderDelayedsenddate;
    }

    /**
     * Sets The date and time at which the Ezsignfolder will be sent in the future.
     * @param {String} dtEzsignfolderDelayedsenddate The date and time at which the Ezsignfolder will be sent in the future.
     */
    setDtEzsignfolderDelayedsenddate(dtEzsignfolderDelayedsenddate) {
        this['dtEzsignfolderDelayedsenddate'] = dtEzsignfolderDelayedsenddate;
    }
/**
     * Returns The maximum date and time at which the Ezsignfolder can be signed.
     * @return {String}
     */
    getDtEzsignfolderDuedate() {
        return this.dtEzsignfolderDuedate;
    }

    /**
     * Sets The maximum date and time at which the Ezsignfolder can be signed.
     * @param {String} dtEzsignfolderDuedate The maximum date and time at which the Ezsignfolder can be signed.
     */
    setDtEzsignfolderDuedate(dtEzsignfolderDuedate) {
        this['dtEzsignfolderDuedate'] = dtEzsignfolderDuedate;
    }
/**
     * Returns The date and time at which the Ezsignfolder was sent the last time.
     * @return {String}
     */
    getDtEzsignfolderSentdate() {
        return this.dtEzsignfolderSentdate;
    }

    /**
     * Sets The date and time at which the Ezsignfolder was sent the last time.
     * @param {String} dtEzsignfolderSentdate The date and time at which the Ezsignfolder was sent the last time.
     */
    setDtEzsignfolderSentdate(dtEzsignfolderSentdate) {
        this['dtEzsignfolderSentdate'] = dtEzsignfolderSentdate;
    }
/**
     * Returns The scheduled date and time at which the Ezsignfolder should be archived.
     * @return {String}
     */
    getDtEzsignfolderScheduledarchive() {
        return this.dtEzsignfolderScheduledarchive;
    }

    /**
     * Sets The scheduled date and time at which the Ezsignfolder should be archived.
     * @param {String} dtEzsignfolderScheduledarchive The scheduled date and time at which the Ezsignfolder should be archived.
     */
    setDtEzsignfolderScheduledarchive(dtEzsignfolderScheduledarchive) {
        this['dtEzsignfolderScheduledarchive'] = dtEzsignfolderScheduledarchive;
    }
/**
     * Returns The scheduled date at which the Ezsignfolder should be Disposed.
     * @return {String}
     */
    getDtEzsignfolderScheduleddispose() {
        return this.dtEzsignfolderScheduleddispose;
    }

    /**
     * Sets The scheduled date at which the Ezsignfolder should be Disposed.
     * @param {String} dtEzsignfolderScheduleddispose The scheduled date at which the Ezsignfolder should be Disposed.
     */
    setDtEzsignfolderScheduleddispose(dtEzsignfolderScheduleddispose) {
        this['dtEzsignfolderScheduleddispose'] = dtEzsignfolderScheduleddispose;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsignfolderStep}
     */
    getEEzsignfolderStep() {
        return this.eEzsignfolderStep;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsignfolderStep} eEzsignfolderStep
     */
    setEEzsignfolderStep(eEzsignfolderStep) {
        this['eEzsignfolderStep'] = eEzsignfolderStep;
    }
/**
     * Returns The date and time at which the Ezsignfolder was closed. Either by applying the last signature or by completing it prematurely.
     * @return {String}
     */
    getDtEzsignfolderClose() {
        return this.dtEzsignfolderClose;
    }

    /**
     * Sets The date and time at which the Ezsignfolder was closed. Either by applying the last signature or by completing it prematurely.
     * @param {String} dtEzsignfolderClose The date and time at which the Ezsignfolder was closed. Either by applying the last signature or by completing it prematurely.
     */
    setDtEzsignfolderClose(dtEzsignfolderClose) {
        this['dtEzsignfolderClose'] = dtEzsignfolderClose;
    }
/**
     * Returns A custom text message that will be added to the email sent.
     * @return {String}
     */
    getTEzsignfolderMessage() {
        return this.tEzsignfolderMessage;
    }

    /**
     * Sets A custom text message that will be added to the email sent.
     * @param {String} tEzsignfolderMessage A custom text message that will be added to the email sent.
     */
    setTEzsignfolderMessage(tEzsignfolderMessage) {
        this['tEzsignfolderMessage'] = tEzsignfolderMessage;
    }
/**
     * @return {module:eZmaxAPI/model/CommonAudit}
     */
    getObjAudit() {
        return this.objAudit;
    }

    /**
     * @param {module:eZmaxAPI/model/CommonAudit} objAudit
     */
    setObjAudit(objAudit) {
        this['objAudit'] = objAudit;
    }
/**
     * Returns This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
     * @return {String}
     */
    getSEzsignfolderExternalid() {
        return this.sEzsignfolderExternalid;
    }

    /**
     * Sets This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
     * @param {String} sEzsignfolderExternalid This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
     */
    setSEzsignfolderExternalid(sEzsignfolderExternalid) {
        this['sEzsignfolderExternalid'] = sEzsignfolderExternalid;
    }

}

EzsignfolderGetObjectV1ResponseMPayload.RequiredProperties = ["pkiEzsignfolderID", "eEzsignfolderCompletion", "sEzsignfolderDescription"];

/**
 * The unique ID of the Ezsignfolder
 * @member {Number} pkiEzsignfolderID
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['pkiEzsignfolderID'] = undefined;

/**
 * The unique ID of the Ezsignfoldertype.
 * @member {Number} fkiEzsignfoldertypeID
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['fkiEzsignfoldertypeID'] = undefined;

/**
 * @member {module:eZmaxAPI/model/CustomEzsignfoldertypeResponse} objEzsignfoldertype
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['objEzsignfoldertype'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfolderCompletion} eEzsignfolderCompletion
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['eEzsignfolderCompletion'] = undefined;

/**
 * @member {String} sEzsignfoldertypeNameX
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['sEzsignfoldertypeNameX'] = undefined;

/**
 * The unique ID of the Billingentityinternal.
 * @member {Number} fkiBillingentityinternalID
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['fkiBillingentityinternalID'] = undefined;

/**
 * The description of the Billingentityinternal in the language of the requester
 * @member {String} sBillingentityinternalDescriptionX
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['sBillingentityinternalDescriptionX'] = undefined;

/**
 * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
 * @member {Number} fkiEzsigntsarequirementID
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['fkiEzsigntsarequirementID'] = undefined;

/**
 * The description of the Ezsigntsarequirement in the language of the requester
 * @member {String} sEzsigntsarequirementDescriptionX
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['sEzsigntsarequirementDescriptionX'] = undefined;

/**
 * The description of the Ezsignfolder
 * @member {String} sEzsignfolderDescription
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['sEzsignfolderDescription'] = undefined;

/**
 * Note about the Ezsignfolder
 * @member {String} tEzsignfolderNote
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['tEzsignfolderNote'] = undefined;

/**
 * If the Ezsigndocument can be disposed
 * @member {Boolean} bEzsignfolderIsdisposable
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['bEzsignfolderIsdisposable'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfolderSendreminderfrequency} eEzsignfolderSendreminderfrequency
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['eEzsignfolderSendreminderfrequency'] = undefined;

/**
 * The date and time at which the Ezsignfolder will be sent in the future.
 * @member {String} dtEzsignfolderDelayedsenddate
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['dtEzsignfolderDelayedsenddate'] = undefined;

/**
 * The maximum date and time at which the Ezsignfolder can be signed.
 * @member {String} dtEzsignfolderDuedate
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['dtEzsignfolderDuedate'] = undefined;

/**
 * The date and time at which the Ezsignfolder was sent the last time.
 * @member {String} dtEzsignfolderSentdate
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['dtEzsignfolderSentdate'] = undefined;

/**
 * The scheduled date and time at which the Ezsignfolder should be archived.
 * @member {String} dtEzsignfolderScheduledarchive
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['dtEzsignfolderScheduledarchive'] = undefined;

/**
 * The scheduled date at which the Ezsignfolder should be Disposed.
 * @member {String} dtEzsignfolderScheduleddispose
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['dtEzsignfolderScheduleddispose'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfolderStep} eEzsignfolderStep
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['eEzsignfolderStep'] = undefined;

/**
 * The date and time at which the Ezsignfolder was closed. Either by applying the last signature or by completing it prematurely.
 * @member {String} dtEzsignfolderClose
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['dtEzsignfolderClose'] = undefined;

/**
 * A custom text message that will be added to the email sent.
 * @member {String} tEzsignfolderMessage
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['tEzsignfolderMessage'] = undefined;

/**
 * @member {module:eZmaxAPI/model/CommonAudit} objAudit
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['objAudit'] = undefined;

/**
 * This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
 * @member {String} sEzsignfolderExternalid
 */
EzsignfolderGetObjectV1ResponseMPayload.prototype['sEzsignfolderExternalid'] = undefined;


// Implement EzsignfolderResponseCompound interface:
/**
 * The unique ID of the Ezsignfolder
 * @member {Number} pkiEzsignfolderID
 */
EzsignfolderResponseCompound.prototype['pkiEzsignfolderID'] = undefined;
/**
 * The unique ID of the Ezsignfoldertype.
 * @member {Number} fkiEzsignfoldertypeID
 */
EzsignfolderResponseCompound.prototype['fkiEzsignfoldertypeID'] = undefined;
/**
 * @member {module:eZmaxAPI/model/CustomEzsignfoldertypeResponse} objEzsignfoldertype
 */
EzsignfolderResponseCompound.prototype['objEzsignfoldertype'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfolderCompletion} eEzsignfolderCompletion
 */
EzsignfolderResponseCompound.prototype['eEzsignfolderCompletion'] = undefined;
/**
 * @member {String} sEzsignfoldertypeNameX
 */
EzsignfolderResponseCompound.prototype['sEzsignfoldertypeNameX'] = undefined;
/**
 * The unique ID of the Billingentityinternal.
 * @member {Number} fkiBillingentityinternalID
 */
EzsignfolderResponseCompound.prototype['fkiBillingentityinternalID'] = undefined;
/**
 * The description of the Billingentityinternal in the language of the requester
 * @member {String} sBillingentityinternalDescriptionX
 */
EzsignfolderResponseCompound.prototype['sBillingentityinternalDescriptionX'] = undefined;
/**
 * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
 * @member {Number} fkiEzsigntsarequirementID
 */
EzsignfolderResponseCompound.prototype['fkiEzsigntsarequirementID'] = undefined;
/**
 * The description of the Ezsigntsarequirement in the language of the requester
 * @member {String} sEzsigntsarequirementDescriptionX
 */
EzsignfolderResponseCompound.prototype['sEzsigntsarequirementDescriptionX'] = undefined;
/**
 * The description of the Ezsignfolder
 * @member {String} sEzsignfolderDescription
 */
EzsignfolderResponseCompound.prototype['sEzsignfolderDescription'] = undefined;
/**
 * Note about the Ezsignfolder
 * @member {String} tEzsignfolderNote
 */
EzsignfolderResponseCompound.prototype['tEzsignfolderNote'] = undefined;
/**
 * If the Ezsigndocument can be disposed
 * @member {Boolean} bEzsignfolderIsdisposable
 */
EzsignfolderResponseCompound.prototype['bEzsignfolderIsdisposable'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfolderSendreminderfrequency} eEzsignfolderSendreminderfrequency
 */
EzsignfolderResponseCompound.prototype['eEzsignfolderSendreminderfrequency'] = undefined;
/**
 * The date and time at which the Ezsignfolder will be sent in the future.
 * @member {String} dtEzsignfolderDelayedsenddate
 */
EzsignfolderResponseCompound.prototype['dtEzsignfolderDelayedsenddate'] = undefined;
/**
 * The maximum date and time at which the Ezsignfolder can be signed.
 * @member {String} dtEzsignfolderDuedate
 */
EzsignfolderResponseCompound.prototype['dtEzsignfolderDuedate'] = undefined;
/**
 * The date and time at which the Ezsignfolder was sent the last time.
 * @member {String} dtEzsignfolderSentdate
 */
EzsignfolderResponseCompound.prototype['dtEzsignfolderSentdate'] = undefined;
/**
 * The scheduled date and time at which the Ezsignfolder should be archived.
 * @member {String} dtEzsignfolderScheduledarchive
 */
EzsignfolderResponseCompound.prototype['dtEzsignfolderScheduledarchive'] = undefined;
/**
 * The scheduled date at which the Ezsignfolder should be Disposed.
 * @member {String} dtEzsignfolderScheduleddispose
 */
EzsignfolderResponseCompound.prototype['dtEzsignfolderScheduleddispose'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsignfolderStep} eEzsignfolderStep
 */
EzsignfolderResponseCompound.prototype['eEzsignfolderStep'] = undefined;
/**
 * The date and time at which the Ezsignfolder was closed. Either by applying the last signature or by completing it prematurely.
 * @member {String} dtEzsignfolderClose
 */
EzsignfolderResponseCompound.prototype['dtEzsignfolderClose'] = undefined;
/**
 * A custom text message that will be added to the email sent.
 * @member {String} tEzsignfolderMessage
 */
EzsignfolderResponseCompound.prototype['tEzsignfolderMessage'] = undefined;
/**
 * @member {module:eZmaxAPI/model/CommonAudit} objAudit
 */
EzsignfolderResponseCompound.prototype['objAudit'] = undefined;
/**
 * This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
 * @member {String} sEzsignfolderExternalid
 */
EzsignfolderResponseCompound.prototype['sEzsignfolderExternalid'] = undefined;




export default EzsignfolderGetObjectV1ResponseMPayload;

