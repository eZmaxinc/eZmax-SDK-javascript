/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmailRequestCompound from './EmailRequestCompound';
import FieldEUserEzsignaccess from './FieldEUserEzsignaccess';
import FieldEUserLogintype from './FieldEUserLogintype';
import FieldEUserType from './FieldEUserType';
import PhoneRequestCompoundV2 from './PhoneRequestCompoundV2';
import UserRequestV2 from './UserRequestV2';

/**
 * The UserRequestCompoundV2 model module.
 * @module eZmaxAPI/model/UserRequestCompoundV2
 * @version 1.2.0
 */
class UserRequestCompoundV2 {
    /**
     * Constructs a new <code>UserRequestCompoundV2</code>.
     * A User Object and children
     * @alias module:eZmaxAPI/model/UserRequestCompoundV2
     * @implements module:eZmaxAPI/model/UserRequestV2
     * @param fkiCompanyIDDefault {Number} The unique ID of the Company
     * @param fkiDepartmentIDDefault {Number} The unique ID of the Department
     * @param fkiTimezoneID {Number} The unique ID of the Timezone
     * @param fkiLanguageID {Number} The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
     * @param objEmail {module:eZmaxAPI/model/EmailRequestCompound} 
     * @param fkiBillingentityinternalID {Number} The unique ID of the Billingentityinternal.
     * @param eUserType {module:eZmaxAPI/model/FieldEUserType} 
     * @param eUserLogintype {module:eZmaxAPI/model/FieldEUserLogintype} 
     * @param sUserFirstname {String} The first name of the user
     * @param sUserLastname {String} The last name of the user
     * @param sUserLoginname {String} The login name of the User.
     * @param eUserEzsignaccess {module:eZmaxAPI/model/FieldEUserEzsignaccess} 
     * @param bUserIsactive {Boolean} Whether the User is active or not
     */
    constructor(fkiCompanyIDDefault, fkiDepartmentIDDefault, fkiTimezoneID, fkiLanguageID, objEmail, fkiBillingentityinternalID, eUserType, eUserLogintype, sUserFirstname, sUserLastname, sUserLoginname, eUserEzsignaccess, bUserIsactive) { 
        UserRequestV2.initialize(this, fkiCompanyIDDefault, fkiDepartmentIDDefault, fkiTimezoneID, fkiLanguageID, objEmail, fkiBillingentityinternalID, eUserType, eUserLogintype, sUserFirstname, sUserLastname, sUserLoginname, eUserEzsignaccess, bUserIsactive);
        UserRequestCompoundV2.initialize(this, fkiCompanyIDDefault, fkiDepartmentIDDefault, fkiTimezoneID, fkiLanguageID, objEmail, fkiBillingentityinternalID, eUserType, eUserLogintype, sUserFirstname, sUserLastname, sUserLoginname, eUserEzsignaccess, bUserIsactive);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fkiCompanyIDDefault, fkiDepartmentIDDefault, fkiTimezoneID, fkiLanguageID, objEmail, fkiBillingentityinternalID, eUserType, eUserLogintype, sUserFirstname, sUserLastname, sUserLoginname, eUserEzsignaccess, bUserIsactive) { 
        obj['fkiCompanyIDDefault'] = fkiCompanyIDDefault;
        obj['fkiDepartmentIDDefault'] = fkiDepartmentIDDefault;
        obj['fkiTimezoneID'] = fkiTimezoneID;
        obj['fkiLanguageID'] = fkiLanguageID;
        obj['objEmail'] = objEmail;
        obj['fkiBillingentityinternalID'] = fkiBillingentityinternalID;
        obj['eUserType'] = eUserType;
        obj['eUserLogintype'] = eUserLogintype;
        obj['sUserFirstname'] = sUserFirstname;
        obj['sUserLastname'] = sUserLastname;
        obj['sUserLoginname'] = sUserLoginname;
        obj['eUserEzsignaccess'] = eUserEzsignaccess;
        obj['bUserIsactive'] = bUserIsactive;
    }

    /**
     * Constructs a <code>UserRequestCompoundV2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/UserRequestCompoundV2} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/UserRequestCompoundV2} The populated <code>UserRequestCompoundV2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserRequestCompoundV2();
            UserRequestV2.constructFromObject(data, obj);

            if (data.hasOwnProperty('pkiUserID')) {
                obj['pkiUserID'] = ApiClient.convertToType(data['pkiUserID'], 'Number');
            }
            if (data.hasOwnProperty('fkiAgentID')) {
                obj['fkiAgentID'] = ApiClient.convertToType(data['fkiAgentID'], 'Number');
            }
            if (data.hasOwnProperty('fkiBrokerID')) {
                obj['fkiBrokerID'] = ApiClient.convertToType(data['fkiBrokerID'], 'Number');
            }
            if (data.hasOwnProperty('fkiAssistantID')) {
                obj['fkiAssistantID'] = ApiClient.convertToType(data['fkiAssistantID'], 'Number');
            }
            if (data.hasOwnProperty('fkiEmployeeID')) {
                obj['fkiEmployeeID'] = ApiClient.convertToType(data['fkiEmployeeID'], 'Number');
            }
            if (data.hasOwnProperty('fkiCompanyIDDefault')) {
                obj['fkiCompanyIDDefault'] = ApiClient.convertToType(data['fkiCompanyIDDefault'], 'Number');
            }
            if (data.hasOwnProperty('fkiDepartmentIDDefault')) {
                obj['fkiDepartmentIDDefault'] = ApiClient.convertToType(data['fkiDepartmentIDDefault'], 'Number');
            }
            if (data.hasOwnProperty('fkiTimezoneID')) {
                obj['fkiTimezoneID'] = ApiClient.convertToType(data['fkiTimezoneID'], 'Number');
            }
            if (data.hasOwnProperty('fkiLanguageID')) {
                obj['fkiLanguageID'] = ApiClient.convertToType(data['fkiLanguageID'], 'Number');
            }
            if (data.hasOwnProperty('objEmail')) {
                obj['objEmail'] = EmailRequestCompound.constructFromObject(data['objEmail']);
            }
            if (data.hasOwnProperty('fkiBillingentityinternalID')) {
                obj['fkiBillingentityinternalID'] = ApiClient.convertToType(data['fkiBillingentityinternalID'], 'Number');
            }
            if (data.hasOwnProperty('objPhoneHome')) {
                obj['objPhoneHome'] = PhoneRequestCompoundV2.constructFromObject(data['objPhoneHome']);
            }
            if (data.hasOwnProperty('objPhoneSMS')) {
                obj['objPhoneSMS'] = PhoneRequestCompoundV2.constructFromObject(data['objPhoneSMS']);
            }
            if (data.hasOwnProperty('fkiSecretquestionID')) {
                obj['fkiSecretquestionID'] = ApiClient.convertToType(data['fkiSecretquestionID'], 'Number');
            }
            if (data.hasOwnProperty('sUserSecretresponse')) {
                obj['sUserSecretresponse'] = ApiClient.convertToType(data['sUserSecretresponse'], 'String');
            }
            if (data.hasOwnProperty('fkiModuleIDForm')) {
                obj['fkiModuleIDForm'] = ApiClient.convertToType(data['fkiModuleIDForm'], 'Number');
            }
            if (data.hasOwnProperty('eUserType')) {
                obj['eUserType'] = FieldEUserType.constructFromObject(data['eUserType']);
            }
            if (data.hasOwnProperty('eUserLogintype')) {
                obj['eUserLogintype'] = FieldEUserLogintype.constructFromObject(data['eUserLogintype']);
            }
            if (data.hasOwnProperty('sUserFirstname')) {
                obj['sUserFirstname'] = ApiClient.convertToType(data['sUserFirstname'], 'String');
            }
            if (data.hasOwnProperty('sUserLastname')) {
                obj['sUserLastname'] = ApiClient.convertToType(data['sUserLastname'], 'String');
            }
            if (data.hasOwnProperty('sUserLoginname')) {
                obj['sUserLoginname'] = ApiClient.convertToType(data['sUserLoginname'], 'String');
            }
            if (data.hasOwnProperty('sUserJobtitle')) {
                obj['sUserJobtitle'] = ApiClient.convertToType(data['sUserJobtitle'], 'String');
            }
            if (data.hasOwnProperty('eUserEzsignaccess')) {
                obj['eUserEzsignaccess'] = FieldEUserEzsignaccess.constructFromObject(data['eUserEzsignaccess']);
            }
            if (data.hasOwnProperty('bUserIsactive')) {
                obj['bUserIsactive'] = ApiClient.convertToType(data['bUserIsactive'], 'Boolean');
            }
            if (data.hasOwnProperty('bUserValidatebyadministration')) {
                obj['bUserValidatebyadministration'] = ApiClient.convertToType(data['bUserValidatebyadministration'], 'Boolean');
            }
            if (data.hasOwnProperty('bUserValidatebydirector')) {
                obj['bUserValidatebydirector'] = ApiClient.convertToType(data['bUserValidatebydirector'], 'Boolean');
            }
            if (data.hasOwnProperty('bUserAttachmentautoverified')) {
                obj['bUserAttachmentautoverified'] = ApiClient.convertToType(data['bUserAttachmentautoverified'], 'Boolean');
            }
            if (data.hasOwnProperty('bUserChangepassword')) {
                obj['bUserChangepassword'] = ApiClient.convertToType(data['bUserChangepassword'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserRequestCompoundV2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserRequestCompoundV2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserRequestCompoundV2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `objEmail`
        if (data['objEmail']) { // data not null
          EmailRequestCompound.validateJSON(data['objEmail']);
        }
        // validate the optional field `objPhoneHome`
        if (data['objPhoneHome']) { // data not null
          PhoneRequestCompoundV2.validateJSON(data['objPhoneHome']);
        }
        // validate the optional field `objPhoneSMS`
        if (data['objPhoneSMS']) { // data not null
          PhoneRequestCompoundV2.validateJSON(data['objPhoneSMS']);
        }
        // ensure the json data is a string
        if (data['sUserSecretresponse'] && !(typeof data['sUserSecretresponse'] === 'string' || data['sUserSecretresponse'] instanceof String)) {
            throw new Error("Expected the field `sUserSecretresponse` to be a primitive type in the JSON string but got " + data['sUserSecretresponse']);
        }
        // ensure the json data is a string
        if (data['sUserFirstname'] && !(typeof data['sUserFirstname'] === 'string' || data['sUserFirstname'] instanceof String)) {
            throw new Error("Expected the field `sUserFirstname` to be a primitive type in the JSON string but got " + data['sUserFirstname']);
        }
        // ensure the json data is a string
        if (data['sUserLastname'] && !(typeof data['sUserLastname'] === 'string' || data['sUserLastname'] instanceof String)) {
            throw new Error("Expected the field `sUserLastname` to be a primitive type in the JSON string but got " + data['sUserLastname']);
        }
        // ensure the json data is a string
        if (data['sUserLoginname'] && !(typeof data['sUserLoginname'] === 'string' || data['sUserLoginname'] instanceof String)) {
            throw new Error("Expected the field `sUserLoginname` to be a primitive type in the JSON string but got " + data['sUserLoginname']);
        }
        // ensure the json data is a string
        if (data['sUserJobtitle'] && !(typeof data['sUserJobtitle'] === 'string' || data['sUserJobtitle'] instanceof String)) {
            throw new Error("Expected the field `sUserJobtitle` to be a primitive type in the JSON string but got " + data['sUserJobtitle']);
        }

        return true;
    }

/**
     * Returns The unique ID of the User
     * minimum: 0
     * @return {Number}
     */
    getPkiUserID() {
        return this.pkiUserID;
    }

    /**
     * Sets The unique ID of the User
     * @param {Number} pkiUserID The unique ID of the User
     */
    setPkiUserID(pkiUserID) {
        this['pkiUserID'] = pkiUserID;
    }
/**
     * Returns The unique ID of the Agent.
     * minimum: 0
     * @return {Number}
     */
    getFkiAgentID() {
        return this.fkiAgentID;
    }

    /**
     * Sets The unique ID of the Agent.
     * @param {Number} fkiAgentID The unique ID of the Agent.
     */
    setFkiAgentID(fkiAgentID) {
        this['fkiAgentID'] = fkiAgentID;
    }
/**
     * Returns The unique ID of the Broker.
     * minimum: 0
     * @return {Number}
     */
    getFkiBrokerID() {
        return this.fkiBrokerID;
    }

    /**
     * Sets The unique ID of the Broker.
     * @param {Number} fkiBrokerID The unique ID of the Broker.
     */
    setFkiBrokerID(fkiBrokerID) {
        this['fkiBrokerID'] = fkiBrokerID;
    }
/**
     * Returns The unique ID of the Assistant.
     * minimum: 0
     * @return {Number}
     */
    getFkiAssistantID() {
        return this.fkiAssistantID;
    }

    /**
     * Sets The unique ID of the Assistant.
     * @param {Number} fkiAssistantID The unique ID of the Assistant.
     */
    setFkiAssistantID(fkiAssistantID) {
        this['fkiAssistantID'] = fkiAssistantID;
    }
/**
     * Returns The unique ID of the Employee.
     * minimum: 0
     * @return {Number}
     */
    getFkiEmployeeID() {
        return this.fkiEmployeeID;
    }

    /**
     * Sets The unique ID of the Employee.
     * @param {Number} fkiEmployeeID The unique ID of the Employee.
     */
    setFkiEmployeeID(fkiEmployeeID) {
        this['fkiEmployeeID'] = fkiEmployeeID;
    }
/**
     * Returns The unique ID of the Company
     * minimum: 1
     * maximum: 255
     * @return {Number}
     */
    getFkiCompanyIDDefault() {
        return this.fkiCompanyIDDefault;
    }

    /**
     * Sets The unique ID of the Company
     * @param {Number} fkiCompanyIDDefault The unique ID of the Company
     */
    setFkiCompanyIDDefault(fkiCompanyIDDefault) {
        this['fkiCompanyIDDefault'] = fkiCompanyIDDefault;
    }
/**
     * Returns The unique ID of the Department
     * minimum: 0
     * @return {Number}
     */
    getFkiDepartmentIDDefault() {
        return this.fkiDepartmentIDDefault;
    }

    /**
     * Sets The unique ID of the Department
     * @param {Number} fkiDepartmentIDDefault The unique ID of the Department
     */
    setFkiDepartmentIDDefault(fkiDepartmentIDDefault) {
        this['fkiDepartmentIDDefault'] = fkiDepartmentIDDefault;
    }
/**
     * Returns The unique ID of the Timezone
     * minimum: 0
     * @return {Number}
     */
    getFkiTimezoneID() {
        return this.fkiTimezoneID;
    }

    /**
     * Sets The unique ID of the Timezone
     * @param {Number} fkiTimezoneID The unique ID of the Timezone
     */
    setFkiTimezoneID(fkiTimezoneID) {
        this['fkiTimezoneID'] = fkiTimezoneID;
    }
/**
     * Returns The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
     * minimum: 1
     * maximum: 2
     * @return {Number}
     */
    getFkiLanguageID() {
        return this.fkiLanguageID;
    }

    /**
     * Sets The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
     * @param {Number} fkiLanguageID The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
     */
    setFkiLanguageID(fkiLanguageID) {
        this['fkiLanguageID'] = fkiLanguageID;
    }
/**
     * @return {module:eZmaxAPI/model/EmailRequestCompound}
     */
    getObjEmail() {
        return this.objEmail;
    }

    /**
     * @param {module:eZmaxAPI/model/EmailRequestCompound} objEmail
     */
    setObjEmail(objEmail) {
        this['objEmail'] = objEmail;
    }
/**
     * Returns The unique ID of the Billingentityinternal.
     * minimum: 0
     * @return {Number}
     */
    getFkiBillingentityinternalID() {
        return this.fkiBillingentityinternalID;
    }

    /**
     * Sets The unique ID of the Billingentityinternal.
     * @param {Number} fkiBillingentityinternalID The unique ID of the Billingentityinternal.
     */
    setFkiBillingentityinternalID(fkiBillingentityinternalID) {
        this['fkiBillingentityinternalID'] = fkiBillingentityinternalID;
    }
/**
     * @return {module:eZmaxAPI/model/PhoneRequestCompoundV2}
     */
    getObjPhoneHome() {
        return this.objPhoneHome;
    }

    /**
     * @param {module:eZmaxAPI/model/PhoneRequestCompoundV2} objPhoneHome
     */
    setObjPhoneHome(objPhoneHome) {
        this['objPhoneHome'] = objPhoneHome;
    }
/**
     * @return {module:eZmaxAPI/model/PhoneRequestCompoundV2}
     */
    getObjPhoneSMS() {
        return this.objPhoneSMS;
    }

    /**
     * @param {module:eZmaxAPI/model/PhoneRequestCompoundV2} objPhoneSMS
     */
    setObjPhoneSMS(objPhoneSMS) {
        this['objPhoneSMS'] = objPhoneSMS;
    }
/**
     * Returns The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father's middle name| |15|Your mother's maiden name| |16|Name of your eldest child| |17|Your spouse's middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat's name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code|
     * minimum: 0
     * @return {Number}
     */
    getFkiSecretquestionID() {
        return this.fkiSecretquestionID;
    }

    /**
     * Sets The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father's middle name| |15|Your mother's maiden name| |16|Name of your eldest child| |17|Your spouse's middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat's name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code|
     * @param {Number} fkiSecretquestionID The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father's middle name| |15|Your mother's maiden name| |16|Name of your eldest child| |17|Your spouse's middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat's name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code|
     */
    setFkiSecretquestionID(fkiSecretquestionID) {
        this['fkiSecretquestionID'] = fkiSecretquestionID;
    }
/**
     * Returns The answer to the Secretquestion
     * @return {String}
     */
    getSUserSecretresponse() {
        return this.sUserSecretresponse;
    }

    /**
     * Sets The answer to the Secretquestion
     * @param {String} sUserSecretresponse The answer to the Secretquestion
     */
    setSUserSecretresponse(sUserSecretresponse) {
        this['sUserSecretresponse'] = sUserSecretresponse;
    }
/**
     * Returns The unique ID of the Module
     * minimum: 0
     * @return {Number}
     */
    getFkiModuleIDForm() {
        return this.fkiModuleIDForm;
    }

    /**
     * Sets The unique ID of the Module
     * @param {Number} fkiModuleIDForm The unique ID of the Module
     */
    setFkiModuleIDForm(fkiModuleIDForm) {
        this['fkiModuleIDForm'] = fkiModuleIDForm;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEUserType}
     */
    getEUserType() {
        return this.eUserType;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEUserType} eUserType
     */
    setEUserType(eUserType) {
        this['eUserType'] = eUserType;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEUserLogintype}
     */
    getEUserLogintype() {
        return this.eUserLogintype;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEUserLogintype} eUserLogintype
     */
    setEUserLogintype(eUserLogintype) {
        this['eUserLogintype'] = eUserLogintype;
    }
/**
     * Returns The first name of the user
     * @return {String}
     */
    getSUserFirstname() {
        return this.sUserFirstname;
    }

    /**
     * Sets The first name of the user
     * @param {String} sUserFirstname The first name of the user
     */
    setSUserFirstname(sUserFirstname) {
        this['sUserFirstname'] = sUserFirstname;
    }
/**
     * Returns The last name of the user
     * @return {String}
     */
    getSUserLastname() {
        return this.sUserLastname;
    }

    /**
     * Sets The last name of the user
     * @param {String} sUserLastname The last name of the user
     */
    setSUserLastname(sUserLastname) {
        this['sUserLastname'] = sUserLastname;
    }
/**
     * Returns The login name of the User.
     * @return {String}
     */
    getSUserLoginname() {
        return this.sUserLoginname;
    }

    /**
     * Sets The login name of the User.
     * @param {String} sUserLoginname The login name of the User.
     */
    setSUserLoginname(sUserLoginname) {
        this['sUserLoginname'] = sUserLoginname;
    }
/**
     * Returns The job title of the user
     * @return {String}
     */
    getSUserJobtitle() {
        return this.sUserJobtitle;
    }

    /**
     * Sets The job title of the user
     * @param {String} sUserJobtitle The job title of the user
     */
    setSUserJobtitle(sUserJobtitle) {
        this['sUserJobtitle'] = sUserJobtitle;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEUserEzsignaccess}
     */
    getEUserEzsignaccess() {
        return this.eUserEzsignaccess;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEUserEzsignaccess} eUserEzsignaccess
     */
    setEUserEzsignaccess(eUserEzsignaccess) {
        this['eUserEzsignaccess'] = eUserEzsignaccess;
    }
/**
     * Returns Whether the User is active or not
     * @return {Boolean}
     */
    getBUserIsactive() {
        return this.bUserIsactive;
    }

    /**
     * Sets Whether the User is active or not
     * @param {Boolean} bUserIsactive Whether the User is active or not
     */
    setBUserIsactive(bUserIsactive) {
        this['bUserIsactive'] = bUserIsactive;
    }
/**
     * Returns Whether if the transactions in which the User is implicated must be validated by administrative personnel or not
     * @return {Boolean}
     */
    getBUserValidatebyadministration() {
        return this.bUserValidatebyadministration;
    }

    /**
     * Sets Whether if the transactions in which the User is implicated must be validated by administrative personnel or not
     * @param {Boolean} bUserValidatebyadministration Whether if the transactions in which the User is implicated must be validated by administrative personnel or not
     */
    setBUserValidatebyadministration(bUserValidatebyadministration) {
        this['bUserValidatebyadministration'] = bUserValidatebyadministration;
    }
/**
     * Returns Whether if the transactions in which the User is implicated must be validated by a director or not
     * @return {Boolean}
     */
    getBUserValidatebydirector() {
        return this.bUserValidatebydirector;
    }

    /**
     * Sets Whether if the transactions in which the User is implicated must be validated by a director or not
     * @param {Boolean} bUserValidatebydirector Whether if the transactions in which the User is implicated must be validated by a director or not
     */
    setBUserValidatebydirector(bUserValidatebydirector) {
        this['bUserValidatebydirector'] = bUserValidatebydirector;
    }
/**
     * Returns Whether if Attachments uploaded by the User must be validated or not
     * @return {Boolean}
     */
    getBUserAttachmentautoverified() {
        return this.bUserAttachmentautoverified;
    }

    /**
     * Sets Whether if Attachments uploaded by the User must be validated or not
     * @param {Boolean} bUserAttachmentautoverified Whether if Attachments uploaded by the User must be validated or not
     */
    setBUserAttachmentautoverified(bUserAttachmentautoverified) {
        this['bUserAttachmentautoverified'] = bUserAttachmentautoverified;
    }
/**
     * Returns Whether if the User is forced to change its password
     * @return {Boolean}
     */
    getBUserChangepassword() {
        return this.bUserChangepassword;
    }

    /**
     * Sets Whether if the User is forced to change its password
     * @param {Boolean} bUserChangepassword Whether if the User is forced to change its password
     */
    setBUserChangepassword(bUserChangepassword) {
        this['bUserChangepassword'] = bUserChangepassword;
    }

}

UserRequestCompoundV2.RequiredProperties = ["fkiCompanyIDDefault", "fkiDepartmentIDDefault", "fkiTimezoneID", "fkiLanguageID", "objEmail", "fkiBillingentityinternalID", "eUserType", "eUserLogintype", "sUserFirstname", "sUserLastname", "sUserLoginname", "eUserEzsignaccess", "bUserIsactive"];

/**
 * The unique ID of the User
 * @member {Number} pkiUserID
 */
UserRequestCompoundV2.prototype['pkiUserID'] = undefined;

/**
 * The unique ID of the Agent.
 * @member {Number} fkiAgentID
 */
UserRequestCompoundV2.prototype['fkiAgentID'] = undefined;

/**
 * The unique ID of the Broker.
 * @member {Number} fkiBrokerID
 */
UserRequestCompoundV2.prototype['fkiBrokerID'] = undefined;

/**
 * The unique ID of the Assistant.
 * @member {Number} fkiAssistantID
 */
UserRequestCompoundV2.prototype['fkiAssistantID'] = undefined;

/**
 * The unique ID of the Employee.
 * @member {Number} fkiEmployeeID
 */
UserRequestCompoundV2.prototype['fkiEmployeeID'] = undefined;

/**
 * The unique ID of the Company
 * @member {Number} fkiCompanyIDDefault
 */
UserRequestCompoundV2.prototype['fkiCompanyIDDefault'] = undefined;

/**
 * The unique ID of the Department
 * @member {Number} fkiDepartmentIDDefault
 */
UserRequestCompoundV2.prototype['fkiDepartmentIDDefault'] = undefined;

/**
 * The unique ID of the Timezone
 * @member {Number} fkiTimezoneID
 */
UserRequestCompoundV2.prototype['fkiTimezoneID'] = undefined;

/**
 * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
 * @member {Number} fkiLanguageID
 */
UserRequestCompoundV2.prototype['fkiLanguageID'] = undefined;

/**
 * @member {module:eZmaxAPI/model/EmailRequestCompound} objEmail
 */
UserRequestCompoundV2.prototype['objEmail'] = undefined;

/**
 * The unique ID of the Billingentityinternal.
 * @member {Number} fkiBillingentityinternalID
 */
UserRequestCompoundV2.prototype['fkiBillingentityinternalID'] = undefined;

/**
 * @member {module:eZmaxAPI/model/PhoneRequestCompoundV2} objPhoneHome
 */
UserRequestCompoundV2.prototype['objPhoneHome'] = undefined;

/**
 * @member {module:eZmaxAPI/model/PhoneRequestCompoundV2} objPhoneSMS
 */
UserRequestCompoundV2.prototype['objPhoneSMS'] = undefined;

/**
 * The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father's middle name| |15|Your mother's maiden name| |16|Name of your eldest child| |17|Your spouse's middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat's name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code|
 * @member {Number} fkiSecretquestionID
 */
UserRequestCompoundV2.prototype['fkiSecretquestionID'] = undefined;

/**
 * The answer to the Secretquestion
 * @member {String} sUserSecretresponse
 */
UserRequestCompoundV2.prototype['sUserSecretresponse'] = undefined;

/**
 * The unique ID of the Module
 * @member {Number} fkiModuleIDForm
 */
UserRequestCompoundV2.prototype['fkiModuleIDForm'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEUserType} eUserType
 */
UserRequestCompoundV2.prototype['eUserType'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEUserLogintype} eUserLogintype
 */
UserRequestCompoundV2.prototype['eUserLogintype'] = undefined;

/**
 * The first name of the user
 * @member {String} sUserFirstname
 */
UserRequestCompoundV2.prototype['sUserFirstname'] = undefined;

/**
 * The last name of the user
 * @member {String} sUserLastname
 */
UserRequestCompoundV2.prototype['sUserLastname'] = undefined;

/**
 * The login name of the User.
 * @member {String} sUserLoginname
 */
UserRequestCompoundV2.prototype['sUserLoginname'] = undefined;

/**
 * The job title of the user
 * @member {String} sUserJobtitle
 */
UserRequestCompoundV2.prototype['sUserJobtitle'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEUserEzsignaccess} eUserEzsignaccess
 */
UserRequestCompoundV2.prototype['eUserEzsignaccess'] = undefined;

/**
 * Whether the User is active or not
 * @member {Boolean} bUserIsactive
 */
UserRequestCompoundV2.prototype['bUserIsactive'] = undefined;

/**
 * Whether if the transactions in which the User is implicated must be validated by administrative personnel or not
 * @member {Boolean} bUserValidatebyadministration
 */
UserRequestCompoundV2.prototype['bUserValidatebyadministration'] = undefined;

/**
 * Whether if the transactions in which the User is implicated must be validated by a director or not
 * @member {Boolean} bUserValidatebydirector
 */
UserRequestCompoundV2.prototype['bUserValidatebydirector'] = undefined;

/**
 * Whether if Attachments uploaded by the User must be validated or not
 * @member {Boolean} bUserAttachmentautoverified
 */
UserRequestCompoundV2.prototype['bUserAttachmentautoverified'] = undefined;

/**
 * Whether if the User is forced to change its password
 * @member {Boolean} bUserChangepassword
 */
UserRequestCompoundV2.prototype['bUserChangepassword'] = undefined;


// Implement UserRequestV2 interface:
/**
 * The unique ID of the User
 * @member {Number} pkiUserID
 */
UserRequestV2.prototype['pkiUserID'] = undefined;
/**
 * The unique ID of the Agent.
 * @member {Number} fkiAgentID
 */
UserRequestV2.prototype['fkiAgentID'] = undefined;
/**
 * The unique ID of the Broker.
 * @member {Number} fkiBrokerID
 */
UserRequestV2.prototype['fkiBrokerID'] = undefined;
/**
 * The unique ID of the Assistant.
 * @member {Number} fkiAssistantID
 */
UserRequestV2.prototype['fkiAssistantID'] = undefined;
/**
 * The unique ID of the Employee.
 * @member {Number} fkiEmployeeID
 */
UserRequestV2.prototype['fkiEmployeeID'] = undefined;
/**
 * The unique ID of the Company
 * @member {Number} fkiCompanyIDDefault
 */
UserRequestV2.prototype['fkiCompanyIDDefault'] = undefined;
/**
 * The unique ID of the Department
 * @member {Number} fkiDepartmentIDDefault
 */
UserRequestV2.prototype['fkiDepartmentIDDefault'] = undefined;
/**
 * The unique ID of the Timezone
 * @member {Number} fkiTimezoneID
 */
UserRequestV2.prototype['fkiTimezoneID'] = undefined;
/**
 * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
 * @member {Number} fkiLanguageID
 */
UserRequestV2.prototype['fkiLanguageID'] = undefined;
/**
 * @member {module:eZmaxAPI/model/EmailRequestCompound} objEmail
 */
UserRequestV2.prototype['objEmail'] = undefined;
/**
 * The unique ID of the Billingentityinternal.
 * @member {Number} fkiBillingentityinternalID
 */
UserRequestV2.prototype['fkiBillingentityinternalID'] = undefined;
/**
 * @member {module:eZmaxAPI/model/PhoneRequestCompoundV2} objPhoneHome
 */
UserRequestV2.prototype['objPhoneHome'] = undefined;
/**
 * @member {module:eZmaxAPI/model/PhoneRequestCompoundV2} objPhoneSMS
 */
UserRequestV2.prototype['objPhoneSMS'] = undefined;
/**
 * The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father's middle name| |15|Your mother's maiden name| |16|Name of your eldest child| |17|Your spouse's middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat's name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code|
 * @member {Number} fkiSecretquestionID
 */
UserRequestV2.prototype['fkiSecretquestionID'] = undefined;
/**
 * The answer to the Secretquestion
 * @member {String} sUserSecretresponse
 */
UserRequestV2.prototype['sUserSecretresponse'] = undefined;
/**
 * The unique ID of the Module
 * @member {Number} fkiModuleIDForm
 */
UserRequestV2.prototype['fkiModuleIDForm'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEUserType} eUserType
 */
UserRequestV2.prototype['eUserType'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEUserLogintype} eUserLogintype
 */
UserRequestV2.prototype['eUserLogintype'] = undefined;
/**
 * The first name of the user
 * @member {String} sUserFirstname
 */
UserRequestV2.prototype['sUserFirstname'] = undefined;
/**
 * The last name of the user
 * @member {String} sUserLastname
 */
UserRequestV2.prototype['sUserLastname'] = undefined;
/**
 * The login name of the User.
 * @member {String} sUserLoginname
 */
UserRequestV2.prototype['sUserLoginname'] = undefined;
/**
 * The job title of the user
 * @member {String} sUserJobtitle
 */
UserRequestV2.prototype['sUserJobtitle'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEUserEzsignaccess} eUserEzsignaccess
 */
UserRequestV2.prototype['eUserEzsignaccess'] = undefined;
/**
 * Whether the User is active or not
 * @member {Boolean} bUserIsactive
 */
UserRequestV2.prototype['bUserIsactive'] = undefined;
/**
 * Whether if the transactions in which the User is implicated must be validated by administrative personnel or not
 * @member {Boolean} bUserValidatebyadministration
 */
UserRequestV2.prototype['bUserValidatebyadministration'] = undefined;
/**
 * Whether if the transactions in which the User is implicated must be validated by a director or not
 * @member {Boolean} bUserValidatebydirector
 */
UserRequestV2.prototype['bUserValidatebydirector'] = undefined;
/**
 * Whether if Attachments uploaded by the User must be validated or not
 * @member {Boolean} bUserAttachmentautoverified
 */
UserRequestV2.prototype['bUserAttachmentautoverified'] = undefined;
/**
 * Whether if the User is forced to change its password
 * @member {Boolean} bUserChangepassword
 */
UserRequestV2.prototype['bUserChangepassword'] = undefined;




export default UserRequestCompoundV2;

