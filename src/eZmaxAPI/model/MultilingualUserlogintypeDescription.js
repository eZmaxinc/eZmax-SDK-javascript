/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MultilingualUserlogintypeDescription model module.
 * @module eZmaxAPI/model/MultilingualUserlogintypeDescription
 * @version 1.2.0
 */
class MultilingualUserlogintypeDescription {
    /**
     * Constructs a new <code>MultilingualUserlogintypeDescription</code>.
     * The description of the Userlogintype
     * @alias module:eZmaxAPI/model/MultilingualUserlogintypeDescription
     */
    constructor() { 
        
        MultilingualUserlogintypeDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MultilingualUserlogintypeDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/MultilingualUserlogintypeDescription} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/MultilingualUserlogintypeDescription} The populated <code>MultilingualUserlogintypeDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MultilingualUserlogintypeDescription();

            if (data.hasOwnProperty('sUserlogintypeDescription1')) {
                obj['sUserlogintypeDescription1'] = ApiClient.convertToType(data['sUserlogintypeDescription1'], 'String');
            }
            if (data.hasOwnProperty('sUserlogintypeDescription2')) {
                obj['sUserlogintypeDescription2'] = ApiClient.convertToType(data['sUserlogintypeDescription2'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MultilingualUserlogintypeDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MultilingualUserlogintypeDescription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sUserlogintypeDescription1'] && !(typeof data['sUserlogintypeDescription1'] === 'string' || data['sUserlogintypeDescription1'] instanceof String)) {
            throw new Error("Expected the field `sUserlogintypeDescription1` to be a primitive type in the JSON string but got " + data['sUserlogintypeDescription1']);
        }
        // ensure the json data is a string
        if (data['sUserlogintypeDescription2'] && !(typeof data['sUserlogintypeDescription2'] === 'string' || data['sUserlogintypeDescription2'] instanceof String)) {
            throw new Error("Expected the field `sUserlogintypeDescription2` to be a primitive type in the JSON string but got " + data['sUserlogintypeDescription2']);
        }

        return true;
    }

/**
     * Returns The description of the Userlogintype in French
     * @return {String}
     */
    getSUserlogintypeDescription1() {
        return this.sUserlogintypeDescription1;
    }

    /**
     * Sets The description of the Userlogintype in French
     * @param {String} sUserlogintypeDescription1 The description of the Userlogintype in French
     */
    setSUserlogintypeDescription1(sUserlogintypeDescription1) {
        this['sUserlogintypeDescription1'] = sUserlogintypeDescription1;
    }
/**
     * Returns The description of the Userlogintype in English
     * @return {String}
     */
    getSUserlogintypeDescription2() {
        return this.sUserlogintypeDescription2;
    }

    /**
     * Sets The description of the Userlogintype in English
     * @param {String} sUserlogintypeDescription2 The description of the Userlogintype in English
     */
    setSUserlogintypeDescription2(sUserlogintypeDescription2) {
        this['sUserlogintypeDescription2'] = sUserlogintypeDescription2;
    }

}



/**
 * The description of the Userlogintype in French
 * @member {String} sUserlogintypeDescription1
 */
MultilingualUserlogintypeDescription.prototype['sUserlogintypeDescription1'] = undefined;

/**
 * The description of the Userlogintype in English
 * @member {String} sUserlogintypeDescription2
 */
MultilingualUserlogintypeDescription.prototype['sUserlogintypeDescription2'] = undefined;






export default MultilingualUserlogintypeDescription;

