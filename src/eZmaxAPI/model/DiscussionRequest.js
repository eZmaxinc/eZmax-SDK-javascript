/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DiscussionRequest model module.
 * @module eZmaxAPI/model/DiscussionRequest
 * @version 1.2.0
 */
class DiscussionRequest {
    /**
     * Constructs a new <code>DiscussionRequest</code>.
     * A Discussion Object
     * @alias module:eZmaxAPI/model/DiscussionRequest
     * @param sDiscussionDescription {String} The description of the Discussion
     */
    constructor(sDiscussionDescription) { 
        
        DiscussionRequest.initialize(this, sDiscussionDescription);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sDiscussionDescription) { 
        obj['sDiscussionDescription'] = sDiscussionDescription;
    }

    /**
     * Constructs a <code>DiscussionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/DiscussionRequest} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/DiscussionRequest} The populated <code>DiscussionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiscussionRequest();

            if (data.hasOwnProperty('pkiDiscussionID')) {
                obj['pkiDiscussionID'] = ApiClient.convertToType(data['pkiDiscussionID'], 'Number');
            }
            if (data.hasOwnProperty('sDiscussionDescription')) {
                obj['sDiscussionDescription'] = ApiClient.convertToType(data['sDiscussionDescription'], 'String');
            }
            if (data.hasOwnProperty('bDiscussionClosed')) {
                obj['bDiscussionClosed'] = ApiClient.convertToType(data['bDiscussionClosed'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiscussionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiscussionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DiscussionRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sDiscussionDescription'] && !(typeof data['sDiscussionDescription'] === 'string' || data['sDiscussionDescription'] instanceof String)) {
            throw new Error("Expected the field `sDiscussionDescription` to be a primitive type in the JSON string but got " + data['sDiscussionDescription']);
        }

        return true;
    }

/**
     * Returns The unique ID of the Discussion
     * minimum: 0
     * maximum: 16777215
     * @return {Number}
     */
    getPkiDiscussionID() {
        return this.pkiDiscussionID;
    }

    /**
     * Sets The unique ID of the Discussion
     * @param {Number} pkiDiscussionID The unique ID of the Discussion
     */
    setPkiDiscussionID(pkiDiscussionID) {
        this['pkiDiscussionID'] = pkiDiscussionID;
    }
/**
     * Returns The description of the Discussion
     * @return {String}
     */
    getSDiscussionDescription() {
        return this.sDiscussionDescription;
    }

    /**
     * Sets The description of the Discussion
     * @param {String} sDiscussionDescription The description of the Discussion
     */
    setSDiscussionDescription(sDiscussionDescription) {
        this['sDiscussionDescription'] = sDiscussionDescription;
    }
/**
     * Returns Whether if it's an closed
     * @return {Boolean}
     */
    getBDiscussionClosed() {
        return this.bDiscussionClosed;
    }

    /**
     * Sets Whether if it's an closed
     * @param {Boolean} bDiscussionClosed Whether if it's an closed
     */
    setBDiscussionClosed(bDiscussionClosed) {
        this['bDiscussionClosed'] = bDiscussionClosed;
    }

}

DiscussionRequest.RequiredProperties = ["sDiscussionDescription"];

/**
 * The unique ID of the Discussion
 * @member {Number} pkiDiscussionID
 */
DiscussionRequest.prototype['pkiDiscussionID'] = undefined;

/**
 * The description of the Discussion
 * @member {String} sDiscussionDescription
 */
DiscussionRequest.prototype['sDiscussionDescription'] = undefined;

/**
 * Whether if it's an closed
 * @member {Boolean} bDiscussionClosed
 */
DiscussionRequest.prototype['bDiscussionClosed'] = undefined;






export default DiscussionRequest;

