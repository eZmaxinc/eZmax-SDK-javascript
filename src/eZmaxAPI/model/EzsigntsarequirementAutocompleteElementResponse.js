/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EzsigntsarequirementAutocompleteElementResponse model module.
 * @module eZmaxAPI/model/EzsigntsarequirementAutocompleteElementResponse
 * @version 1.1.17
 */
class EzsigntsarequirementAutocompleteElementResponse {
    /**
     * Constructs a new <code>EzsigntsarequirementAutocompleteElementResponse</code>.
     * A Ezsigntsarequirement AutocompleteElement Response
     * @alias module:eZmaxAPI/model/EzsigntsarequirementAutocompleteElementResponse
     * @param sEzsigntsarequirementDescriptionX {String} The description of the Ezsigntsarequirement in the language of the requester
     * @param pkiEzsigntsarequirementID {Number} The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * @param bEzsigntsarequirementIsactive {Boolean} Whether the Ezsigntsarequirement is active or not
     * @param bDisabled {Boolean} Indicates if the element is disabled in the context
     */
    constructor(sEzsigntsarequirementDescriptionX, pkiEzsigntsarequirementID, bEzsigntsarequirementIsactive, bDisabled) { 
        
        EzsigntsarequirementAutocompleteElementResponse.initialize(this, sEzsigntsarequirementDescriptionX, pkiEzsigntsarequirementID, bEzsigntsarequirementIsactive, bDisabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sEzsigntsarequirementDescriptionX, pkiEzsigntsarequirementID, bEzsigntsarequirementIsactive, bDisabled) { 
        obj['sEzsigntsarequirementDescriptionX'] = sEzsigntsarequirementDescriptionX;
        obj['pkiEzsigntsarequirementID'] = pkiEzsigntsarequirementID;
        obj['bEzsigntsarequirementIsactive'] = bEzsigntsarequirementIsactive;
        obj['bDisabled'] = bDisabled;
    }

    /**
     * Constructs a <code>EzsigntsarequirementAutocompleteElementResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/EzsigntsarequirementAutocompleteElementResponse} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/EzsigntsarequirementAutocompleteElementResponse} The populated <code>EzsigntsarequirementAutocompleteElementResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EzsigntsarequirementAutocompleteElementResponse();

            if (data.hasOwnProperty('sEzsigntsarequirementDescriptionX')) {
                obj['sEzsigntsarequirementDescriptionX'] = ApiClient.convertToType(data['sEzsigntsarequirementDescriptionX'], 'String');
            }
            if (data.hasOwnProperty('pkiEzsigntsarequirementID')) {
                obj['pkiEzsigntsarequirementID'] = ApiClient.convertToType(data['pkiEzsigntsarequirementID'], 'Number');
            }
            if (data.hasOwnProperty('bEzsigntsarequirementIsactive')) {
                obj['bEzsigntsarequirementIsactive'] = ApiClient.convertToType(data['bEzsigntsarequirementIsactive'], 'Boolean');
            }
            if (data.hasOwnProperty('bDisabled')) {
                obj['bDisabled'] = ApiClient.convertToType(data['bDisabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EzsigntsarequirementAutocompleteElementResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EzsigntsarequirementAutocompleteElementResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EzsigntsarequirementAutocompleteElementResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sEzsigntsarequirementDescriptionX'] && !(typeof data['sEzsigntsarequirementDescriptionX'] === 'string' || data['sEzsigntsarequirementDescriptionX'] instanceof String)) {
            throw new Error("Expected the field `sEzsigntsarequirementDescriptionX` to be a primitive type in the JSON string but got " + data['sEzsigntsarequirementDescriptionX']);
        }

        return true;
    }

/**
     * Returns The description of the Ezsigntsarequirement in the language of the requester
     * @return {String}
     */
    getSEzsigntsarequirementDescriptionX() {
        return this.sEzsigntsarequirementDescriptionX;
    }

    /**
     * Sets The description of the Ezsigntsarequirement in the language of the requester
     * @param {String} sEzsigntsarequirementDescriptionX The description of the Ezsigntsarequirement in the language of the requester
     */
    setSEzsigntsarequirementDescriptionX(sEzsigntsarequirementDescriptionX) {
        this['sEzsigntsarequirementDescriptionX'] = sEzsigntsarequirementDescriptionX;
    }
/**
     * Returns The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * minimum: 1
     * maximum: 3
     * @return {Number}
     */
    getPkiEzsigntsarequirementID() {
        return this.pkiEzsigntsarequirementID;
    }

    /**
     * Sets The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     * @param {Number} pkiEzsigntsarequirementID The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
     */
    setPkiEzsigntsarequirementID(pkiEzsigntsarequirementID) {
        this['pkiEzsigntsarequirementID'] = pkiEzsigntsarequirementID;
    }
/**
     * Returns Whether the Ezsigntsarequirement is active or not
     * @return {Boolean}
     */
    getBEzsigntsarequirementIsactive() {
        return this.bEzsigntsarequirementIsactive;
    }

    /**
     * Sets Whether the Ezsigntsarequirement is active or not
     * @param {Boolean} bEzsigntsarequirementIsactive Whether the Ezsigntsarequirement is active or not
     */
    setBEzsigntsarequirementIsactive(bEzsigntsarequirementIsactive) {
        this['bEzsigntsarequirementIsactive'] = bEzsigntsarequirementIsactive;
    }
/**
     * Returns Indicates if the element is disabled in the context
     * @return {Boolean}
     */
    getBDisabled() {
        return this.bDisabled;
    }

    /**
     * Sets Indicates if the element is disabled in the context
     * @param {Boolean} bDisabled Indicates if the element is disabled in the context
     */
    setBDisabled(bDisabled) {
        this['bDisabled'] = bDisabled;
    }

}

EzsigntsarequirementAutocompleteElementResponse.RequiredProperties = ["sEzsigntsarequirementDescriptionX", "pkiEzsigntsarequirementID", "bEzsigntsarequirementIsactive", "bDisabled"];

/**
 * The description of the Ezsigntsarequirement in the language of the requester
 * @member {String} sEzsigntsarequirementDescriptionX
 */
EzsigntsarequirementAutocompleteElementResponse.prototype['sEzsigntsarequirementDescriptionX'] = undefined;

/**
 * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
 * @member {Number} pkiEzsigntsarequirementID
 */
EzsigntsarequirementAutocompleteElementResponse.prototype['pkiEzsigntsarequirementID'] = undefined;

/**
 * Whether the Ezsigntsarequirement is active or not
 * @member {Boolean} bEzsigntsarequirementIsactive
 */
EzsigntsarequirementAutocompleteElementResponse.prototype['bEzsigntsarequirementIsactive'] = undefined;

/**
 * Indicates if the element is disabled in the context
 * @member {Boolean} bDisabled
 */
EzsigntsarequirementAutocompleteElementResponse.prototype['bDisabled'] = undefined;






export default EzsigntsarequirementAutocompleteElementResponse;

