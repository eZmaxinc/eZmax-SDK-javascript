/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.10
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomEzsignfoldersignerassociationActionableElementResponseAllOf model module.
 * @module eZmaxAPI/model/CustomEzsignfoldersignerassociationActionableElementResponseAllOf
 * @version 1.1.10
 */
class CustomEzsignfoldersignerassociationActionableElementResponseAllOf {
    /**
     * Constructs a new <code>CustomEzsignfoldersignerassociationActionableElementResponseAllOf</code>.
     * @alias module:eZmaxAPI/model/CustomEzsignfoldersignerassociationActionableElementResponseAllOf
     * @param bEzsignfoldersignerassociationHasactionableelementsCurrent {Boolean} Indicates if the Ezsignfoldersignerassociation has actionable elements in the current step
     */
    constructor(bEzsignfoldersignerassociationHasactionableelementsCurrent) { 
        
        CustomEzsignfoldersignerassociationActionableElementResponseAllOf.initialize(this, bEzsignfoldersignerassociationHasactionableelementsCurrent);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bEzsignfoldersignerassociationHasactionableelementsCurrent) { 
        obj['bEzsignfoldersignerassociationHasactionableelementsCurrent'] = bEzsignfoldersignerassociationHasactionableelementsCurrent;
    }

    /**
     * Constructs a <code>CustomEzsignfoldersignerassociationActionableElementResponseAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/CustomEzsignfoldersignerassociationActionableElementResponseAllOf} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/CustomEzsignfoldersignerassociationActionableElementResponseAllOf} The populated <code>CustomEzsignfoldersignerassociationActionableElementResponseAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomEzsignfoldersignerassociationActionableElementResponseAllOf();

            if (data.hasOwnProperty('bEzsignfoldersignerassociationHasactionableelementsCurrent')) {
                obj['bEzsignfoldersignerassociationHasactionableelementsCurrent'] = ApiClient.convertToType(data['bEzsignfoldersignerassociationHasactionableelementsCurrent'], 'Boolean');
            }
            if (data.hasOwnProperty('bEzsignfoldersignerassociationHasactionableelementsFuture')) {
                obj['bEzsignfoldersignerassociationHasactionableelementsFuture'] = ApiClient.convertToType(data['bEzsignfoldersignerassociationHasactionableelementsFuture'], 'Boolean');
            }
        }
        return obj;
    }

/**
     * Returns Indicates if the Ezsignfoldersignerassociation has actionable elements in the current step
     * @return {Boolean}
     */
    getBEzsignfoldersignerassociationHasactionableelementsCurrent() {
        return this.bEzsignfoldersignerassociationHasactionableelementsCurrent;
    }

    /**
     * Sets Indicates if the Ezsignfoldersignerassociation has actionable elements in the current step
     * @param {Boolean} bEzsignfoldersignerassociationHasactionableelementsCurrent Indicates if the Ezsignfoldersignerassociation has actionable elements in the current step
     */
    setBEzsignfoldersignerassociationHasactionableelementsCurrent(bEzsignfoldersignerassociationHasactionableelementsCurrent) {
        this['bEzsignfoldersignerassociationHasactionableelementsCurrent'] = bEzsignfoldersignerassociationHasactionableelementsCurrent;
    }
/**
     * Returns Indicates if the Ezsignfoldersignerassociation has actionable elements in a future step
     * @return {Boolean}
     */
    getBEzsignfoldersignerassociationHasactionableelementsFuture() {
        return this.bEzsignfoldersignerassociationHasactionableelementsFuture;
    }

    /**
     * Sets Indicates if the Ezsignfoldersignerassociation has actionable elements in a future step
     * @param {Boolean} bEzsignfoldersignerassociationHasactionableelementsFuture Indicates if the Ezsignfoldersignerassociation has actionable elements in a future step
     */
    setBEzsignfoldersignerassociationHasactionableelementsFuture(bEzsignfoldersignerassociationHasactionableelementsFuture) {
        this['bEzsignfoldersignerassociationHasactionableelementsFuture'] = bEzsignfoldersignerassociationHasactionableelementsFuture;
    }

}

/**
 * Indicates if the Ezsignfoldersignerassociation has actionable elements in the current step
 * @member {Boolean} bEzsignfoldersignerassociationHasactionableelementsCurrent
 */
CustomEzsignfoldersignerassociationActionableElementResponseAllOf.prototype['bEzsignfoldersignerassociationHasactionableelementsCurrent'] = undefined;

/**
 * Indicates if the Ezsignfoldersignerassociation has actionable elements in a future step
 * @member {Boolean} bEzsignfoldersignerassociationHasactionableelementsFuture
 */
CustomEzsignfoldersignerassociationActionableElementResponseAllOf.prototype['bEzsignfoldersignerassociationHasactionableelementsFuture'] = undefined;






export default CustomEzsignfoldersignerassociationActionableElementResponseAllOf;

