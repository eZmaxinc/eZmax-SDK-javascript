/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FontAutocompleteElementResponse model module.
 * @module eZmaxAPI/model/FontAutocompleteElementResponse
 * @version 1.2.0
 */
class FontAutocompleteElementResponse {
    /**
     * Constructs a new <code>FontAutocompleteElementResponse</code>.
     * A Font AutocompleteElement Response
     * @alias module:eZmaxAPI/model/FontAutocompleteElementResponse
     * @param sFontName {String} The name of the Font
     * @param pkiFontID {Number} The unique ID of the Font
     * @param bFontIsactive {Boolean} Whether the Font is active or not
     */
    constructor(sFontName, pkiFontID, bFontIsactive) { 
        
        FontAutocompleteElementResponse.initialize(this, sFontName, pkiFontID, bFontIsactive);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sFontName, pkiFontID, bFontIsactive) { 
        obj['sFontName'] = sFontName;
        obj['pkiFontID'] = pkiFontID;
        obj['bFontIsactive'] = bFontIsactive;
    }

    /**
     * Constructs a <code>FontAutocompleteElementResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/FontAutocompleteElementResponse} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/FontAutocompleteElementResponse} The populated <code>FontAutocompleteElementResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FontAutocompleteElementResponse();

            if (data.hasOwnProperty('sFontName')) {
                obj['sFontName'] = ApiClient.convertToType(data['sFontName'], 'String');
            }
            if (data.hasOwnProperty('pkiFontID')) {
                obj['pkiFontID'] = ApiClient.convertToType(data['pkiFontID'], 'Number');
            }
            if (data.hasOwnProperty('bFontIsactive')) {
                obj['bFontIsactive'] = ApiClient.convertToType(data['bFontIsactive'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FontAutocompleteElementResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FontAutocompleteElementResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FontAutocompleteElementResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sFontName'] && !(typeof data['sFontName'] === 'string' || data['sFontName'] instanceof String)) {
            throw new Error("Expected the field `sFontName` to be a primitive type in the JSON string but got " + data['sFontName']);
        }

        return true;
    }

/**
     * Returns The name of the Font
     * @return {String}
     */
    getSFontName() {
        return this.sFontName;
    }

    /**
     * Sets The name of the Font
     * @param {String} sFontName The name of the Font
     */
    setSFontName(sFontName) {
        this['sFontName'] = sFontName;
    }
/**
     * Returns The unique ID of the Font
     * minimum: 0
     * @return {Number}
     */
    getPkiFontID() {
        return this.pkiFontID;
    }

    /**
     * Sets The unique ID of the Font
     * @param {Number} pkiFontID The unique ID of the Font
     */
    setPkiFontID(pkiFontID) {
        this['pkiFontID'] = pkiFontID;
    }
/**
     * Returns Whether the Font is active or not
     * @return {Boolean}
     */
    getBFontIsactive() {
        return this.bFontIsactive;
    }

    /**
     * Sets Whether the Font is active or not
     * @param {Boolean} bFontIsactive Whether the Font is active or not
     */
    setBFontIsactive(bFontIsactive) {
        this['bFontIsactive'] = bFontIsactive;
    }

}

FontAutocompleteElementResponse.RequiredProperties = ["sFontName", "pkiFontID", "bFontIsactive"];

/**
 * The name of the Font
 * @member {String} sFontName
 */
FontAutocompleteElementResponse.prototype['sFontName'] = undefined;

/**
 * The unique ID of the Font
 * @member {Number} pkiFontID
 */
FontAutocompleteElementResponse.prototype['pkiFontID'] = undefined;

/**
 * Whether the Font is active or not
 * @member {Boolean} bFontIsactive
 */
FontAutocompleteElementResponse.prototype['bFontIsactive'] = undefined;






export default FontAutocompleteElementResponse;

