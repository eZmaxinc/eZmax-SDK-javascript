/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumTextvalidation from './EnumTextvalidation';
import EzsigntemplateelementdependencyResponseCompound from './EzsigntemplateelementdependencyResponseCompound';
import EzsigntemplatesignatureResponse from './EzsigntemplatesignatureResponse';
import EzsigntemplatesignaturecustomdateResponseCompound from './EzsigntemplatesignaturecustomdateResponseCompound';
import FieldEEzsigntemplatesignatureAttachmentnamesource from './FieldEEzsigntemplatesignatureAttachmentnamesource';
import FieldEEzsigntemplatesignatureDependencyrequirement from './FieldEEzsigntemplatesignatureDependencyrequirement';
import FieldEEzsigntemplatesignatureFont from './FieldEEzsigntemplatesignatureFont';
import FieldEEzsigntemplatesignaturePositioning from './FieldEEzsigntemplatesignaturePositioning';
import FieldEEzsigntemplatesignaturePositioningoccurence from './FieldEEzsigntemplatesignaturePositioningoccurence';
import FieldEEzsigntemplatesignatureTooltipposition from './FieldEEzsigntemplatesignatureTooltipposition';
import FieldEEzsigntemplatesignatureType from './FieldEEzsigntemplatesignatureType';

/**
 * The EzsigntemplatesignatureResponseCompound model module.
 * @module eZmaxAPI/model/EzsigntemplatesignatureResponseCompound
 * @version 1.2.0
 */
class EzsigntemplatesignatureResponseCompound {
    /**
     * Constructs a new <code>EzsigntemplatesignatureResponseCompound</code>.
     * A Ezsigntemplatesignature Object
     * @alias module:eZmaxAPI/model/EzsigntemplatesignatureResponseCompound
     * @implements module:eZmaxAPI/model/EzsigntemplatesignatureResponse
     * @param pkiEzsigntemplatesignatureID {Number} The unique ID of the Ezsigntemplatesignature
     * @param fkiEzsigntemplatedocumentID {Number} The unique ID of the Ezsigntemplatedocument
     * @param fkiEzsigntemplatesignerID {Number} The unique ID of the Ezsigntemplatesigner
     * @param iEzsigntemplatedocumentpagePagenumber {Number} The page number in the Ezsigntemplatedocument
     * @param iEzsigntemplatesignatureStep {Number} The step when the Ezsigntemplatesigner will be invited to sign
     * @param eEzsigntemplatesignatureType {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureType} 
     */
    constructor(pkiEzsigntemplatesignatureID, fkiEzsigntemplatedocumentID, fkiEzsigntemplatesignerID, iEzsigntemplatedocumentpagePagenumber, iEzsigntemplatesignatureStep, eEzsigntemplatesignatureType) { 
        EzsigntemplatesignatureResponse.initialize(this, pkiEzsigntemplatesignatureID, fkiEzsigntemplatedocumentID, fkiEzsigntemplatesignerID, iEzsigntemplatedocumentpagePagenumber, iEzsigntemplatesignatureStep, eEzsigntemplatesignatureType);
        EzsigntemplatesignatureResponseCompound.initialize(this, pkiEzsigntemplatesignatureID, fkiEzsigntemplatedocumentID, fkiEzsigntemplatesignerID, iEzsigntemplatedocumentpagePagenumber, iEzsigntemplatesignatureStep, eEzsigntemplatesignatureType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pkiEzsigntemplatesignatureID, fkiEzsigntemplatedocumentID, fkiEzsigntemplatesignerID, iEzsigntemplatedocumentpagePagenumber, iEzsigntemplatesignatureStep, eEzsigntemplatesignatureType) { 
        obj['pkiEzsigntemplatesignatureID'] = pkiEzsigntemplatesignatureID;
        obj['fkiEzsigntemplatedocumentID'] = fkiEzsigntemplatedocumentID;
        obj['fkiEzsigntemplatesignerID'] = fkiEzsigntemplatesignerID;
        obj['iEzsigntemplatedocumentpagePagenumber'] = iEzsigntemplatedocumentpagePagenumber;
        obj['iEzsigntemplatesignatureStep'] = iEzsigntemplatesignatureStep;
        obj['eEzsigntemplatesignatureType'] = eEzsigntemplatesignatureType;
    }

    /**
     * Constructs a <code>EzsigntemplatesignatureResponseCompound</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:eZmaxAPI/model/EzsigntemplatesignatureResponseCompound} obj Optional instance to populate.
     * @return {module:eZmaxAPI/model/EzsigntemplatesignatureResponseCompound} The populated <code>EzsigntemplatesignatureResponseCompound</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EzsigntemplatesignatureResponseCompound();
            EzsigntemplatesignatureResponse.constructFromObject(data, obj);

            if (data.hasOwnProperty('pkiEzsigntemplatesignatureID')) {
                obj['pkiEzsigntemplatesignatureID'] = ApiClient.convertToType(data['pkiEzsigntemplatesignatureID'], 'Number');
            }
            if (data.hasOwnProperty('fkiEzsigntemplatedocumentID')) {
                obj['fkiEzsigntemplatedocumentID'] = ApiClient.convertToType(data['fkiEzsigntemplatedocumentID'], 'Number');
            }
            if (data.hasOwnProperty('fkiEzsigntemplatesignerID')) {
                obj['fkiEzsigntemplatesignerID'] = ApiClient.convertToType(data['fkiEzsigntemplatesignerID'], 'Number');
            }
            if (data.hasOwnProperty('fkiEzsigntemplatesignerIDValidation')) {
                obj['fkiEzsigntemplatesignerIDValidation'] = ApiClient.convertToType(data['fkiEzsigntemplatesignerIDValidation'], 'Number');
            }
            if (data.hasOwnProperty('eEzsigntemplatesignaturePositioning')) {
                obj['eEzsigntemplatesignaturePositioning'] = FieldEEzsigntemplatesignaturePositioning.constructFromObject(data['eEzsigntemplatesignaturePositioning']);
            }
            if (data.hasOwnProperty('iEzsigntemplatedocumentpagePagenumber')) {
                obj['iEzsigntemplatedocumentpagePagenumber'] = ApiClient.convertToType(data['iEzsigntemplatedocumentpagePagenumber'], 'Number');
            }
            if (data.hasOwnProperty('iEzsigntemplatesignatureX')) {
                obj['iEzsigntemplatesignatureX'] = ApiClient.convertToType(data['iEzsigntemplatesignatureX'], 'Number');
            }
            if (data.hasOwnProperty('iEzsigntemplatesignatureY')) {
                obj['iEzsigntemplatesignatureY'] = ApiClient.convertToType(data['iEzsigntemplatesignatureY'], 'Number');
            }
            if (data.hasOwnProperty('iEzsigntemplatesignatureWidth')) {
                obj['iEzsigntemplatesignatureWidth'] = ApiClient.convertToType(data['iEzsigntemplatesignatureWidth'], 'Number');
            }
            if (data.hasOwnProperty('iEzsigntemplatesignatureHeight')) {
                obj['iEzsigntemplatesignatureHeight'] = ApiClient.convertToType(data['iEzsigntemplatesignatureHeight'], 'Number');
            }
            if (data.hasOwnProperty('iEzsigntemplatesignatureStep')) {
                obj['iEzsigntemplatesignatureStep'] = ApiClient.convertToType(data['iEzsigntemplatesignatureStep'], 'Number');
            }
            if (data.hasOwnProperty('eEzsigntemplatesignatureType')) {
                obj['eEzsigntemplatesignatureType'] = FieldEEzsigntemplatesignatureType.constructFromObject(data['eEzsigntemplatesignatureType']);
            }
            if (data.hasOwnProperty('tEzsigntemplatesignatureTooltip')) {
                obj['tEzsigntemplatesignatureTooltip'] = ApiClient.convertToType(data['tEzsigntemplatesignatureTooltip'], 'String');
            }
            if (data.hasOwnProperty('eEzsigntemplatesignatureTooltipposition')) {
                obj['eEzsigntemplatesignatureTooltipposition'] = FieldEEzsigntemplatesignatureTooltipposition.constructFromObject(data['eEzsigntemplatesignatureTooltipposition']);
            }
            if (data.hasOwnProperty('eEzsigntemplatesignatureFont')) {
                obj['eEzsigntemplatesignatureFont'] = FieldEEzsigntemplatesignatureFont.constructFromObject(data['eEzsigntemplatesignatureFont']);
            }
            if (data.hasOwnProperty('iEzsigntemplatesignatureValidationstep')) {
                obj['iEzsigntemplatesignatureValidationstep'] = ApiClient.convertToType(data['iEzsigntemplatesignatureValidationstep'], 'Number');
            }
            if (data.hasOwnProperty('sEzsigntemplatesignatureAttachmentdescription')) {
                obj['sEzsigntemplatesignatureAttachmentdescription'] = ApiClient.convertToType(data['sEzsigntemplatesignatureAttachmentdescription'], 'String');
            }
            if (data.hasOwnProperty('eEzsigntemplatesignatureAttachmentnamesource')) {
                obj['eEzsigntemplatesignatureAttachmentnamesource'] = FieldEEzsigntemplatesignatureAttachmentnamesource.constructFromObject(data['eEzsigntemplatesignatureAttachmentnamesource']);
            }
            if (data.hasOwnProperty('bEzsigntemplatesignatureRequired')) {
                obj['bEzsigntemplatesignatureRequired'] = ApiClient.convertToType(data['bEzsigntemplatesignatureRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('iEzsigntemplatesignatureMaxlength')) {
                obj['iEzsigntemplatesignatureMaxlength'] = ApiClient.convertToType(data['iEzsigntemplatesignatureMaxlength'], 'Number');
            }
            if (data.hasOwnProperty('sEzsigntemplatesignatureRegexp')) {
                obj['sEzsigntemplatesignatureRegexp'] = ApiClient.convertToType(data['sEzsigntemplatesignatureRegexp'], 'String');
            }
            if (data.hasOwnProperty('eEzsigntemplatesignatureTextvalidation')) {
                obj['eEzsigntemplatesignatureTextvalidation'] = EnumTextvalidation.constructFromObject(data['eEzsigntemplatesignatureTextvalidation']);
            }
            if (data.hasOwnProperty('eEzsigntemplatesignatureDependencyrequirement')) {
                obj['eEzsigntemplatesignatureDependencyrequirement'] = FieldEEzsigntemplatesignatureDependencyrequirement.constructFromObject(data['eEzsigntemplatesignatureDependencyrequirement']);
            }
            if (data.hasOwnProperty('sEzsigntemplatesignaturePositioningpattern')) {
                obj['sEzsigntemplatesignaturePositioningpattern'] = ApiClient.convertToType(data['sEzsigntemplatesignaturePositioningpattern'], 'String');
            }
            if (data.hasOwnProperty('iEzsigntemplatesignaturePositioningoffsetx')) {
                obj['iEzsigntemplatesignaturePositioningoffsetx'] = ApiClient.convertToType(data['iEzsigntemplatesignaturePositioningoffsetx'], 'Number');
            }
            if (data.hasOwnProperty('iEzsigntemplatesignaturePositioningoffsety')) {
                obj['iEzsigntemplatesignaturePositioningoffsety'] = ApiClient.convertToType(data['iEzsigntemplatesignaturePositioningoffsety'], 'Number');
            }
            if (data.hasOwnProperty('eEzsigntemplatesignaturePositioningoccurence')) {
                obj['eEzsigntemplatesignaturePositioningoccurence'] = FieldEEzsigntemplatesignaturePositioningoccurence.constructFromObject(data['eEzsigntemplatesignaturePositioningoccurence']);
            }
            if (data.hasOwnProperty('bEzsigntemplatesignatureCustomdate')) {
                obj['bEzsigntemplatesignatureCustomdate'] = ApiClient.convertToType(data['bEzsigntemplatesignatureCustomdate'], 'Boolean');
            }
            if (data.hasOwnProperty('a_objEzsigntemplatesignaturecustomdate')) {
                obj['a_objEzsigntemplatesignaturecustomdate'] = ApiClient.convertToType(data['a_objEzsigntemplatesignaturecustomdate'], [EzsigntemplatesignaturecustomdateResponseCompound]);
            }
            if (data.hasOwnProperty('a_objEzsigntemplateelementdependency')) {
                obj['a_objEzsigntemplateelementdependency'] = ApiClient.convertToType(data['a_objEzsigntemplateelementdependency'], [EzsigntemplateelementdependencyResponseCompound]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EzsigntemplatesignatureResponseCompound</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EzsigntemplatesignatureResponseCompound</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EzsigntemplatesignatureResponseCompound.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['tEzsigntemplatesignatureTooltip'] && !(typeof data['tEzsigntemplatesignatureTooltip'] === 'string' || data['tEzsigntemplatesignatureTooltip'] instanceof String)) {
            throw new Error("Expected the field `tEzsigntemplatesignatureTooltip` to be a primitive type in the JSON string but got " + data['tEzsigntemplatesignatureTooltip']);
        }
        // ensure the json data is a string
        if (data['sEzsigntemplatesignatureAttachmentdescription'] && !(typeof data['sEzsigntemplatesignatureAttachmentdescription'] === 'string' || data['sEzsigntemplatesignatureAttachmentdescription'] instanceof String)) {
            throw new Error("Expected the field `sEzsigntemplatesignatureAttachmentdescription` to be a primitive type in the JSON string but got " + data['sEzsigntemplatesignatureAttachmentdescription']);
        }
        // ensure the json data is a string
        if (data['sEzsigntemplatesignatureRegexp'] && !(typeof data['sEzsigntemplatesignatureRegexp'] === 'string' || data['sEzsigntemplatesignatureRegexp'] instanceof String)) {
            throw new Error("Expected the field `sEzsigntemplatesignatureRegexp` to be a primitive type in the JSON string but got " + data['sEzsigntemplatesignatureRegexp']);
        }
        // ensure the json data is a string
        if (data['sEzsigntemplatesignaturePositioningpattern'] && !(typeof data['sEzsigntemplatesignaturePositioningpattern'] === 'string' || data['sEzsigntemplatesignaturePositioningpattern'] instanceof String)) {
            throw new Error("Expected the field `sEzsigntemplatesignaturePositioningpattern` to be a primitive type in the JSON string but got " + data['sEzsigntemplatesignaturePositioningpattern']);
        }
        if (data['a_objEzsigntemplatesignaturecustomdate']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['a_objEzsigntemplatesignaturecustomdate'])) {
                throw new Error("Expected the field `a_objEzsigntemplatesignaturecustomdate` to be an array in the JSON data but got " + data['a_objEzsigntemplatesignaturecustomdate']);
            }
            // validate the optional field `a_objEzsigntemplatesignaturecustomdate` (array)
            for (const item of data['a_objEzsigntemplatesignaturecustomdate']) {
                EzsigntemplatesignaturecustomdateResponseCompound.validateJSON(item);
            };
        }
        if (data['a_objEzsigntemplateelementdependency']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['a_objEzsigntemplateelementdependency'])) {
                throw new Error("Expected the field `a_objEzsigntemplateelementdependency` to be an array in the JSON data but got " + data['a_objEzsigntemplateelementdependency']);
            }
            // validate the optional field `a_objEzsigntemplateelementdependency` (array)
            for (const item of data['a_objEzsigntemplateelementdependency']) {
                EzsigntemplateelementdependencyResponseCompound.validateJSON(item);
            };
        }

        return true;
    }

/**
     * Returns The unique ID of the Ezsigntemplatesignature
     * minimum: 0
     * @return {Number}
     */
    getPkiEzsigntemplatesignatureID() {
        return this.pkiEzsigntemplatesignatureID;
    }

    /**
     * Sets The unique ID of the Ezsigntemplatesignature
     * @param {Number} pkiEzsigntemplatesignatureID The unique ID of the Ezsigntemplatesignature
     */
    setPkiEzsigntemplatesignatureID(pkiEzsigntemplatesignatureID) {
        this['pkiEzsigntemplatesignatureID'] = pkiEzsigntemplatesignatureID;
    }
/**
     * Returns The unique ID of the Ezsigntemplatedocument
     * minimum: 0
     * @return {Number}
     */
    getFkiEzsigntemplatedocumentID() {
        return this.fkiEzsigntemplatedocumentID;
    }

    /**
     * Sets The unique ID of the Ezsigntemplatedocument
     * @param {Number} fkiEzsigntemplatedocumentID The unique ID of the Ezsigntemplatedocument
     */
    setFkiEzsigntemplatedocumentID(fkiEzsigntemplatedocumentID) {
        this['fkiEzsigntemplatedocumentID'] = fkiEzsigntemplatedocumentID;
    }
/**
     * Returns The unique ID of the Ezsigntemplatesigner
     * minimum: 0
     * @return {Number}
     */
    getFkiEzsigntemplatesignerID() {
        return this.fkiEzsigntemplatesignerID;
    }

    /**
     * Sets The unique ID of the Ezsigntemplatesigner
     * @param {Number} fkiEzsigntemplatesignerID The unique ID of the Ezsigntemplatesigner
     */
    setFkiEzsigntemplatesignerID(fkiEzsigntemplatesignerID) {
        this['fkiEzsigntemplatesignerID'] = fkiEzsigntemplatesignerID;
    }
/**
     * Returns The unique ID of the Ezsigntemplatesigner
     * minimum: 0
     * @return {Number}
     */
    getFkiEzsigntemplatesignerIDValidation() {
        return this.fkiEzsigntemplatesignerIDValidation;
    }

    /**
     * Sets The unique ID of the Ezsigntemplatesigner
     * @param {Number} fkiEzsigntemplatesignerIDValidation The unique ID of the Ezsigntemplatesigner
     */
    setFkiEzsigntemplatesignerIDValidation(fkiEzsigntemplatesignerIDValidation) {
        this['fkiEzsigntemplatesignerIDValidation'] = fkiEzsigntemplatesignerIDValidation;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsigntemplatesignaturePositioning}
     */
    getEEzsigntemplatesignaturePositioning() {
        return this.eEzsigntemplatesignaturePositioning;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsigntemplatesignaturePositioning} eEzsigntemplatesignaturePositioning
     */
    setEEzsigntemplatesignaturePositioning(eEzsigntemplatesignaturePositioning) {
        this['eEzsigntemplatesignaturePositioning'] = eEzsigntemplatesignaturePositioning;
    }
/**
     * Returns The page number in the Ezsigntemplatedocument
     * minimum: 1
     * @return {Number}
     */
    getIEzsigntemplatedocumentpagePagenumber() {
        return this.iEzsigntemplatedocumentpagePagenumber;
    }

    /**
     * Sets The page number in the Ezsigntemplatedocument
     * @param {Number} iEzsigntemplatedocumentpagePagenumber The page number in the Ezsigntemplatedocument
     */
    setIEzsigntemplatedocumentpagePagenumber(iEzsigntemplatedocumentpagePagenumber) {
        this['iEzsigntemplatedocumentpagePagenumber'] = iEzsigntemplatedocumentpagePagenumber;
    }
/**
     * Returns The X coordinate (Horizontal) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
     * minimum: 0
     * @return {Number}
     */
    getIEzsigntemplatesignatureX() {
        return this.iEzsigntemplatesignatureX;
    }

    /**
     * Sets The X coordinate (Horizontal) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
     * @param {Number} iEzsigntemplatesignatureX The X coordinate (Horizontal) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
     */
    setIEzsigntemplatesignatureX(iEzsigntemplatesignatureX) {
        this['iEzsigntemplatesignatureX'] = iEzsigntemplatesignatureX;
    }
/**
     * Returns The Y coordinate (Vertical) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
     * minimum: 0
     * @return {Number}
     */
    getIEzsigntemplatesignatureY() {
        return this.iEzsigntemplatesignatureY;
    }

    /**
     * Sets The Y coordinate (Vertical) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
     * @param {Number} iEzsigntemplatesignatureY The Y coordinate (Vertical) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
     */
    setIEzsigntemplatesignatureY(iEzsigntemplatesignatureY) {
        this['iEzsigntemplatesignatureY'] = iEzsigntemplatesignatureY;
    }
/**
     * Returns The width of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have a width of 2 inches, you would use \"200\" for the iEzsigntemplatesignatureWidth.
     * minimum: 0
     * @return {Number}
     */
    getIEzsigntemplatesignatureWidth() {
        return this.iEzsigntemplatesignatureWidth;
    }

    /**
     * Sets The width of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have a width of 2 inches, you would use \"200\" for the iEzsigntemplatesignatureWidth.
     * @param {Number} iEzsigntemplatesignatureWidth The width of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have a width of 2 inches, you would use \"200\" for the iEzsigntemplatesignatureWidth.
     */
    setIEzsigntemplatesignatureWidth(iEzsigntemplatesignatureWidth) {
        this['iEzsigntemplatesignatureWidth'] = iEzsigntemplatesignatureWidth;
    }
/**
     * Returns The height of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have an height of 2 inches, you would use \"200\" for the iEzsigntemplatesignatureHeight.
     * minimum: 0
     * @return {Number}
     */
    getIEzsigntemplatesignatureHeight() {
        return this.iEzsigntemplatesignatureHeight;
    }

    /**
     * Sets The height of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have an height of 2 inches, you would use \"200\" for the iEzsigntemplatesignatureHeight.
     * @param {Number} iEzsigntemplatesignatureHeight The height of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have an height of 2 inches, you would use \"200\" for the iEzsigntemplatesignatureHeight.
     */
    setIEzsigntemplatesignatureHeight(iEzsigntemplatesignatureHeight) {
        this['iEzsigntemplatesignatureHeight'] = iEzsigntemplatesignatureHeight;
    }
/**
     * Returns The step when the Ezsigntemplatesigner will be invited to sign
     * minimum: 1
     * @return {Number}
     */
    getIEzsigntemplatesignatureStep() {
        return this.iEzsigntemplatesignatureStep;
    }

    /**
     * Sets The step when the Ezsigntemplatesigner will be invited to sign
     * @param {Number} iEzsigntemplatesignatureStep The step when the Ezsigntemplatesigner will be invited to sign
     */
    setIEzsigntemplatesignatureStep(iEzsigntemplatesignatureStep) {
        this['iEzsigntemplatesignatureStep'] = iEzsigntemplatesignatureStep;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureType}
     */
    getEEzsigntemplatesignatureType() {
        return this.eEzsigntemplatesignatureType;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureType} eEzsigntemplatesignatureType
     */
    setEEzsigntemplatesignatureType(eEzsigntemplatesignatureType) {
        this['eEzsigntemplatesignatureType'] = eEzsigntemplatesignatureType;
    }
/**
     * Returns A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplatesignature
     * @return {String}
     */
    getTEzsigntemplatesignatureTooltip() {
        return this.tEzsigntemplatesignatureTooltip;
    }

    /**
     * Sets A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplatesignature
     * @param {String} tEzsigntemplatesignatureTooltip A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplatesignature
     */
    setTEzsigntemplatesignatureTooltip(tEzsigntemplatesignatureTooltip) {
        this['tEzsigntemplatesignatureTooltip'] = tEzsigntemplatesignatureTooltip;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureTooltipposition}
     */
    getEEzsigntemplatesignatureTooltipposition() {
        return this.eEzsigntemplatesignatureTooltipposition;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureTooltipposition} eEzsigntemplatesignatureTooltipposition
     */
    setEEzsigntemplatesignatureTooltipposition(eEzsigntemplatesignatureTooltipposition) {
        this['eEzsigntemplatesignatureTooltipposition'] = eEzsigntemplatesignatureTooltipposition;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureFont}
     */
    getEEzsigntemplatesignatureFont() {
        return this.eEzsigntemplatesignatureFont;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureFont} eEzsigntemplatesignatureFont
     */
    setEEzsigntemplatesignatureFont(eEzsigntemplatesignatureFont) {
        this['eEzsigntemplatesignatureFont'] = eEzsigntemplatesignatureFont;
    }
/**
     * Returns The step when the Ezsigntemplatesigner will be invited to validate the Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
     * @return {Number}
     */
    getIEzsigntemplatesignatureValidationstep() {
        return this.iEzsigntemplatesignatureValidationstep;
    }

    /**
     * Sets The step when the Ezsigntemplatesigner will be invited to validate the Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
     * @param {Number} iEzsigntemplatesignatureValidationstep The step when the Ezsigntemplatesigner will be invited to validate the Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
     */
    setIEzsigntemplatesignatureValidationstep(iEzsigntemplatesignatureValidationstep) {
        this['iEzsigntemplatesignatureValidationstep'] = iEzsigntemplatesignatureValidationstep;
    }
/**
     * Returns The description attached to the attachment name added in Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
     * @return {String}
     */
    getSEzsigntemplatesignatureAttachmentdescription() {
        return this.sEzsigntemplatesignatureAttachmentdescription;
    }

    /**
     * Sets The description attached to the attachment name added in Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
     * @param {String} sEzsigntemplatesignatureAttachmentdescription The description attached to the attachment name added in Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
     */
    setSEzsigntemplatesignatureAttachmentdescription(sEzsigntemplatesignatureAttachmentdescription) {
        this['sEzsigntemplatesignatureAttachmentdescription'] = sEzsigntemplatesignatureAttachmentdescription;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureAttachmentnamesource}
     */
    getEEzsigntemplatesignatureAttachmentnamesource() {
        return this.eEzsigntemplatesignatureAttachmentnamesource;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureAttachmentnamesource} eEzsigntemplatesignatureAttachmentnamesource
     */
    setEEzsigntemplatesignatureAttachmentnamesource(eEzsigntemplatesignatureAttachmentnamesource) {
        this['eEzsigntemplatesignatureAttachmentnamesource'] = eEzsigntemplatesignatureAttachmentnamesource;
    }
/**
     * Returns Whether the Ezsigntemplatesignature is required or not. This field is relevant only with Ezsigntemplatesignature with eEzsigntemplatesignatureType = Attachments.
     * @return {Boolean}
     */
    getBEzsigntemplatesignatureRequired() {
        return this.bEzsigntemplatesignatureRequired;
    }

    /**
     * Sets Whether the Ezsigntemplatesignature is required or not. This field is relevant only with Ezsigntemplatesignature with eEzsigntemplatesignatureType = Attachments.
     * @param {Boolean} bEzsigntemplatesignatureRequired Whether the Ezsigntemplatesignature is required or not. This field is relevant only with Ezsigntemplatesignature with eEzsigntemplatesignatureType = Attachments.
     */
    setBEzsigntemplatesignatureRequired(bEzsigntemplatesignatureRequired) {
        this['bEzsigntemplatesignatureRequired'] = bEzsigntemplatesignatureRequired;
    }
/**
     * Returns The maximum length for the value in the Ezsigntemplatesignature  This can only be set if eEzsigntemplatesignatureType is **FieldText** or **FieldTextarea**
     * minimum: 0
     * maximum: 65535
     * @return {Number}
     */
    getIEzsigntemplatesignatureMaxlength() {
        return this.iEzsigntemplatesignatureMaxlength;
    }

    /**
     * Sets The maximum length for the value in the Ezsigntemplatesignature  This can only be set if eEzsigntemplatesignatureType is **FieldText** or **FieldTextarea**
     * @param {Number} iEzsigntemplatesignatureMaxlength The maximum length for the value in the Ezsigntemplatesignature  This can only be set if eEzsigntemplatesignatureType is **FieldText** or **FieldTextarea**
     */
    setIEzsigntemplatesignatureMaxlength(iEzsigntemplatesignatureMaxlength) {
        this['iEzsigntemplatesignatureMaxlength'] = iEzsigntemplatesignatureMaxlength;
    }
/**
     * Returns A regular expression to indicate what values are acceptable for the Ezsigntemplatesignature.  This can only be set if eEzsigntemplatesignatureType is **Text** or **Textarea**
     * @return {String}
     */
    getSEzsigntemplatesignatureRegexp() {
        return this.sEzsigntemplatesignatureRegexp;
    }

    /**
     * Sets A regular expression to indicate what values are acceptable for the Ezsigntemplatesignature.  This can only be set if eEzsigntemplatesignatureType is **Text** or **Textarea**
     * @param {String} sEzsigntemplatesignatureRegexp A regular expression to indicate what values are acceptable for the Ezsigntemplatesignature.  This can only be set if eEzsigntemplatesignatureType is **Text** or **Textarea**
     */
    setSEzsigntemplatesignatureRegexp(sEzsigntemplatesignatureRegexp) {
        this['sEzsigntemplatesignatureRegexp'] = sEzsigntemplatesignatureRegexp;
    }
/**
     * @return {module:eZmaxAPI/model/EnumTextvalidation}
     */
    getEEzsigntemplatesignatureTextvalidation() {
        return this.eEzsigntemplatesignatureTextvalidation;
    }

    /**
     * @param {module:eZmaxAPI/model/EnumTextvalidation} eEzsigntemplatesignatureTextvalidation
     */
    setEEzsigntemplatesignatureTextvalidation(eEzsigntemplatesignatureTextvalidation) {
        this['eEzsigntemplatesignatureTextvalidation'] = eEzsigntemplatesignatureTextvalidation;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureDependencyrequirement}
     */
    getEEzsigntemplatesignatureDependencyrequirement() {
        return this.eEzsigntemplatesignatureDependencyrequirement;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureDependencyrequirement} eEzsigntemplatesignatureDependencyrequirement
     */
    setEEzsigntemplatesignatureDependencyrequirement(eEzsigntemplatesignatureDependencyrequirement) {
        this['eEzsigntemplatesignatureDependencyrequirement'] = eEzsigntemplatesignatureDependencyrequirement;
    }
/**
     * Returns The string pattern to search for the positioning. **This is not a regexp**  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
     * @return {String}
     */
    getSEzsigntemplatesignaturePositioningpattern() {
        return this.sEzsigntemplatesignaturePositioningpattern;
    }

    /**
     * Sets The string pattern to search for the positioning. **This is not a regexp**  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
     * @param {String} sEzsigntemplatesignaturePositioningpattern The string pattern to search for the positioning. **This is not a regexp**  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
     */
    setSEzsigntemplatesignaturePositioningpattern(sEzsigntemplatesignaturePositioningpattern) {
        this['sEzsigntemplatesignaturePositioningpattern'] = sEzsigntemplatesignaturePositioningpattern;
    }
/**
     * Returns The offset X  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
     * @return {Number}
     */
    getIEzsigntemplatesignaturePositioningoffsetx() {
        return this.iEzsigntemplatesignaturePositioningoffsetx;
    }

    /**
     * Sets The offset X  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
     * @param {Number} iEzsigntemplatesignaturePositioningoffsetx The offset X  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
     */
    setIEzsigntemplatesignaturePositioningoffsetx(iEzsigntemplatesignaturePositioningoffsetx) {
        this['iEzsigntemplatesignaturePositioningoffsetx'] = iEzsigntemplatesignaturePositioningoffsetx;
    }
/**
     * Returns The offset Y  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
     * @return {Number}
     */
    getIEzsigntemplatesignaturePositioningoffsety() {
        return this.iEzsigntemplatesignaturePositioningoffsety;
    }

    /**
     * Sets The offset Y  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
     * @param {Number} iEzsigntemplatesignaturePositioningoffsety The offset Y  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
     */
    setIEzsigntemplatesignaturePositioningoffsety(iEzsigntemplatesignaturePositioningoffsety) {
        this['iEzsigntemplatesignaturePositioningoffsety'] = iEzsigntemplatesignaturePositioningoffsety;
    }
/**
     * @return {module:eZmaxAPI/model/FieldEEzsigntemplatesignaturePositioningoccurence}
     */
    getEEzsigntemplatesignaturePositioningoccurence() {
        return this.eEzsigntemplatesignaturePositioningoccurence;
    }

    /**
     * @param {module:eZmaxAPI/model/FieldEEzsigntemplatesignaturePositioningoccurence} eEzsigntemplatesignaturePositioningoccurence
     */
    setEEzsigntemplatesignaturePositioningoccurence(eEzsigntemplatesignaturePositioningoccurence) {
        this['eEzsigntemplatesignaturePositioningoccurence'] = eEzsigntemplatesignaturePositioningoccurence;
    }
/**
     * Returns Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)
     * @return {Boolean}
     */
    getBEzsigntemplatesignatureCustomdate() {
        return this.bEzsigntemplatesignatureCustomdate;
    }

    /**
     * Sets Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)
     * @param {Boolean} bEzsigntemplatesignatureCustomdate Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)
     */
    setBEzsigntemplatesignatureCustomdate(bEzsigntemplatesignatureCustomdate) {
        this['bEzsigntemplatesignatureCustomdate'] = bEzsigntemplatesignatureCustomdate;
    }
/**
     * Returns An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don't want to have a date at all.
     * @return {Array.<module:eZmaxAPI/model/EzsigntemplatesignaturecustomdateResponseCompound>}
     */
    getAObjEzsigntemplatesignaturecustomdate() {
        return this.a_objEzsigntemplatesignaturecustomdate;
    }

    /**
     * Sets An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don't want to have a date at all.
     * @param {Array.<module:eZmaxAPI/model/EzsigntemplatesignaturecustomdateResponseCompound>} a_objEzsigntemplatesignaturecustomdate An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don't want to have a date at all.
     */
    setAObjEzsigntemplatesignaturecustomdate(a_objEzsigntemplatesignaturecustomdate) {
        this['a_objEzsigntemplatesignaturecustomdate'] = a_objEzsigntemplatesignaturecustomdate;
    }
/**
     * @return {Array.<module:eZmaxAPI/model/EzsigntemplateelementdependencyResponseCompound>}
     */
    getAObjEzsigntemplateelementdependency() {
        return this.a_objEzsigntemplateelementdependency;
    }

    /**
     * @param {Array.<module:eZmaxAPI/model/EzsigntemplateelementdependencyResponseCompound>} a_objEzsigntemplateelementdependency
     */
    setAObjEzsigntemplateelementdependency(a_objEzsigntemplateelementdependency) {
        this['a_objEzsigntemplateelementdependency'] = a_objEzsigntemplateelementdependency;
    }

}

EzsigntemplatesignatureResponseCompound.RequiredProperties = ["pkiEzsigntemplatesignatureID", "fkiEzsigntemplatedocumentID", "fkiEzsigntemplatesignerID", "iEzsigntemplatedocumentpagePagenumber", "iEzsigntemplatesignatureStep", "eEzsigntemplatesignatureType"];

/**
 * The unique ID of the Ezsigntemplatesignature
 * @member {Number} pkiEzsigntemplatesignatureID
 */
EzsigntemplatesignatureResponseCompound.prototype['pkiEzsigntemplatesignatureID'] = undefined;

/**
 * The unique ID of the Ezsigntemplatedocument
 * @member {Number} fkiEzsigntemplatedocumentID
 */
EzsigntemplatesignatureResponseCompound.prototype['fkiEzsigntemplatedocumentID'] = undefined;

/**
 * The unique ID of the Ezsigntemplatesigner
 * @member {Number} fkiEzsigntemplatesignerID
 */
EzsigntemplatesignatureResponseCompound.prototype['fkiEzsigntemplatesignerID'] = undefined;

/**
 * The unique ID of the Ezsigntemplatesigner
 * @member {Number} fkiEzsigntemplatesignerIDValidation
 */
EzsigntemplatesignatureResponseCompound.prototype['fkiEzsigntemplatesignerIDValidation'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsigntemplatesignaturePositioning} eEzsigntemplatesignaturePositioning
 */
EzsigntemplatesignatureResponseCompound.prototype['eEzsigntemplatesignaturePositioning'] = undefined;

/**
 * The page number in the Ezsigntemplatedocument
 * @member {Number} iEzsigntemplatedocumentpagePagenumber
 */
EzsigntemplatesignatureResponseCompound.prototype['iEzsigntemplatedocumentpagePagenumber'] = undefined;

/**
 * The X coordinate (Horizontal) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
 * @member {Number} iEzsigntemplatesignatureX
 */
EzsigntemplatesignatureResponseCompound.prototype['iEzsigntemplatesignatureX'] = undefined;

/**
 * The Y coordinate (Vertical) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
 * @member {Number} iEzsigntemplatesignatureY
 */
EzsigntemplatesignatureResponseCompound.prototype['iEzsigntemplatesignatureY'] = undefined;

/**
 * The width of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have a width of 2 inches, you would use \"200\" for the iEzsigntemplatesignatureWidth.
 * @member {Number} iEzsigntemplatesignatureWidth
 */
EzsigntemplatesignatureResponseCompound.prototype['iEzsigntemplatesignatureWidth'] = undefined;

/**
 * The height of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have an height of 2 inches, you would use \"200\" for the iEzsigntemplatesignatureHeight.
 * @member {Number} iEzsigntemplatesignatureHeight
 */
EzsigntemplatesignatureResponseCompound.prototype['iEzsigntemplatesignatureHeight'] = undefined;

/**
 * The step when the Ezsigntemplatesigner will be invited to sign
 * @member {Number} iEzsigntemplatesignatureStep
 */
EzsigntemplatesignatureResponseCompound.prototype['iEzsigntemplatesignatureStep'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureType} eEzsigntemplatesignatureType
 */
EzsigntemplatesignatureResponseCompound.prototype['eEzsigntemplatesignatureType'] = undefined;

/**
 * A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplatesignature
 * @member {String} tEzsigntemplatesignatureTooltip
 */
EzsigntemplatesignatureResponseCompound.prototype['tEzsigntemplatesignatureTooltip'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureTooltipposition} eEzsigntemplatesignatureTooltipposition
 */
EzsigntemplatesignatureResponseCompound.prototype['eEzsigntemplatesignatureTooltipposition'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureFont} eEzsigntemplatesignatureFont
 */
EzsigntemplatesignatureResponseCompound.prototype['eEzsigntemplatesignatureFont'] = undefined;

/**
 * The step when the Ezsigntemplatesigner will be invited to validate the Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
 * @member {Number} iEzsigntemplatesignatureValidationstep
 */
EzsigntemplatesignatureResponseCompound.prototype['iEzsigntemplatesignatureValidationstep'] = undefined;

/**
 * The description attached to the attachment name added in Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
 * @member {String} sEzsigntemplatesignatureAttachmentdescription
 */
EzsigntemplatesignatureResponseCompound.prototype['sEzsigntemplatesignatureAttachmentdescription'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureAttachmentnamesource} eEzsigntemplatesignatureAttachmentnamesource
 */
EzsigntemplatesignatureResponseCompound.prototype['eEzsigntemplatesignatureAttachmentnamesource'] = undefined;

/**
 * Whether the Ezsigntemplatesignature is required or not. This field is relevant only with Ezsigntemplatesignature with eEzsigntemplatesignatureType = Attachments.
 * @member {Boolean} bEzsigntemplatesignatureRequired
 */
EzsigntemplatesignatureResponseCompound.prototype['bEzsigntemplatesignatureRequired'] = undefined;

/**
 * The maximum length for the value in the Ezsigntemplatesignature  This can only be set if eEzsigntemplatesignatureType is **FieldText** or **FieldTextarea**
 * @member {Number} iEzsigntemplatesignatureMaxlength
 */
EzsigntemplatesignatureResponseCompound.prototype['iEzsigntemplatesignatureMaxlength'] = undefined;

/**
 * A regular expression to indicate what values are acceptable for the Ezsigntemplatesignature.  This can only be set if eEzsigntemplatesignatureType is **Text** or **Textarea**
 * @member {String} sEzsigntemplatesignatureRegexp
 */
EzsigntemplatesignatureResponseCompound.prototype['sEzsigntemplatesignatureRegexp'] = undefined;

/**
 * @member {module:eZmaxAPI/model/EnumTextvalidation} eEzsigntemplatesignatureTextvalidation
 */
EzsigntemplatesignatureResponseCompound.prototype['eEzsigntemplatesignatureTextvalidation'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureDependencyrequirement} eEzsigntemplatesignatureDependencyrequirement
 */
EzsigntemplatesignatureResponseCompound.prototype['eEzsigntemplatesignatureDependencyrequirement'] = undefined;

/**
 * The string pattern to search for the positioning. **This is not a regexp**  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
 * @member {String} sEzsigntemplatesignaturePositioningpattern
 */
EzsigntemplatesignatureResponseCompound.prototype['sEzsigntemplatesignaturePositioningpattern'] = undefined;

/**
 * The offset X  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
 * @member {Number} iEzsigntemplatesignaturePositioningoffsetx
 */
EzsigntemplatesignatureResponseCompound.prototype['iEzsigntemplatesignaturePositioningoffsetx'] = undefined;

/**
 * The offset Y  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
 * @member {Number} iEzsigntemplatesignaturePositioningoffsety
 */
EzsigntemplatesignatureResponseCompound.prototype['iEzsigntemplatesignaturePositioningoffsety'] = undefined;

/**
 * @member {module:eZmaxAPI/model/FieldEEzsigntemplatesignaturePositioningoccurence} eEzsigntemplatesignaturePositioningoccurence
 */
EzsigntemplatesignatureResponseCompound.prototype['eEzsigntemplatesignaturePositioningoccurence'] = undefined;

/**
 * Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)
 * @member {Boolean} bEzsigntemplatesignatureCustomdate
 */
EzsigntemplatesignatureResponseCompound.prototype['bEzsigntemplatesignatureCustomdate'] = undefined;

/**
 * An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don't want to have a date at all.
 * @member {Array.<module:eZmaxAPI/model/EzsigntemplatesignaturecustomdateResponseCompound>} a_objEzsigntemplatesignaturecustomdate
 */
EzsigntemplatesignatureResponseCompound.prototype['a_objEzsigntemplatesignaturecustomdate'] = undefined;

/**
 * @member {Array.<module:eZmaxAPI/model/EzsigntemplateelementdependencyResponseCompound>} a_objEzsigntemplateelementdependency
 */
EzsigntemplatesignatureResponseCompound.prototype['a_objEzsigntemplateelementdependency'] = undefined;


// Implement EzsigntemplatesignatureResponse interface:
/**
 * The unique ID of the Ezsigntemplatesignature
 * @member {Number} pkiEzsigntemplatesignatureID
 */
EzsigntemplatesignatureResponse.prototype['pkiEzsigntemplatesignatureID'] = undefined;
/**
 * The unique ID of the Ezsigntemplatedocument
 * @member {Number} fkiEzsigntemplatedocumentID
 */
EzsigntemplatesignatureResponse.prototype['fkiEzsigntemplatedocumentID'] = undefined;
/**
 * The unique ID of the Ezsigntemplatesigner
 * @member {Number} fkiEzsigntemplatesignerID
 */
EzsigntemplatesignatureResponse.prototype['fkiEzsigntemplatesignerID'] = undefined;
/**
 * The unique ID of the Ezsigntemplatesigner
 * @member {Number} fkiEzsigntemplatesignerIDValidation
 */
EzsigntemplatesignatureResponse.prototype['fkiEzsigntemplatesignerIDValidation'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsigntemplatesignaturePositioning} eEzsigntemplatesignaturePositioning
 */
EzsigntemplatesignatureResponse.prototype['eEzsigntemplatesignaturePositioning'] = undefined;
/**
 * The page number in the Ezsigntemplatedocument
 * @member {Number} iEzsigntemplatedocumentpagePagenumber
 */
EzsigntemplatesignatureResponse.prototype['iEzsigntemplatedocumentpagePagenumber'] = undefined;
/**
 * The X coordinate (Horizontal) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
 * @member {Number} iEzsigntemplatesignatureX
 */
EzsigntemplatesignatureResponse.prototype['iEzsigntemplatesignatureX'] = undefined;
/**
 * The Y coordinate (Vertical) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
 * @member {Number} iEzsigntemplatesignatureY
 */
EzsigntemplatesignatureResponse.prototype['iEzsigntemplatesignatureY'] = undefined;
/**
 * The width of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have a width of 2 inches, you would use \"200\" for the iEzsigntemplatesignatureWidth.
 * @member {Number} iEzsigntemplatesignatureWidth
 */
EzsigntemplatesignatureResponse.prototype['iEzsigntemplatesignatureWidth'] = undefined;
/**
 * The height of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have an height of 2 inches, you would use \"200\" for the iEzsigntemplatesignatureHeight.
 * @member {Number} iEzsigntemplatesignatureHeight
 */
EzsigntemplatesignatureResponse.prototype['iEzsigntemplatesignatureHeight'] = undefined;
/**
 * The step when the Ezsigntemplatesigner will be invited to sign
 * @member {Number} iEzsigntemplatesignatureStep
 */
EzsigntemplatesignatureResponse.prototype['iEzsigntemplatesignatureStep'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureType} eEzsigntemplatesignatureType
 */
EzsigntemplatesignatureResponse.prototype['eEzsigntemplatesignatureType'] = undefined;
/**
 * A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplatesignature
 * @member {String} tEzsigntemplatesignatureTooltip
 */
EzsigntemplatesignatureResponse.prototype['tEzsigntemplatesignatureTooltip'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureTooltipposition} eEzsigntemplatesignatureTooltipposition
 */
EzsigntemplatesignatureResponse.prototype['eEzsigntemplatesignatureTooltipposition'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureFont} eEzsigntemplatesignatureFont
 */
EzsigntemplatesignatureResponse.prototype['eEzsigntemplatesignatureFont'] = undefined;
/**
 * The step when the Ezsigntemplatesigner will be invited to validate the Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
 * @member {Number} iEzsigntemplatesignatureValidationstep
 */
EzsigntemplatesignatureResponse.prototype['iEzsigntemplatesignatureValidationstep'] = undefined;
/**
 * The description attached to the attachment name added in Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
 * @member {String} sEzsigntemplatesignatureAttachmentdescription
 */
EzsigntemplatesignatureResponse.prototype['sEzsigntemplatesignatureAttachmentdescription'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureAttachmentnamesource} eEzsigntemplatesignatureAttachmentnamesource
 */
EzsigntemplatesignatureResponse.prototype['eEzsigntemplatesignatureAttachmentnamesource'] = undefined;
/**
 * Whether the Ezsigntemplatesignature is required or not. This field is relevant only with Ezsigntemplatesignature with eEzsigntemplatesignatureType = Attachments.
 * @member {Boolean} bEzsigntemplatesignatureRequired
 */
EzsigntemplatesignatureResponse.prototype['bEzsigntemplatesignatureRequired'] = undefined;
/**
 * The maximum length for the value in the Ezsigntemplatesignature  This can only be set if eEzsigntemplatesignatureType is **FieldText** or **FieldTextarea**
 * @member {Number} iEzsigntemplatesignatureMaxlength
 */
EzsigntemplatesignatureResponse.prototype['iEzsigntemplatesignatureMaxlength'] = undefined;
/**
 * A regular expression to indicate what values are acceptable for the Ezsigntemplatesignature.  This can only be set if eEzsigntemplatesignatureType is **Text** or **Textarea**
 * @member {String} sEzsigntemplatesignatureRegexp
 */
EzsigntemplatesignatureResponse.prototype['sEzsigntemplatesignatureRegexp'] = undefined;
/**
 * @member {module:eZmaxAPI/model/EnumTextvalidation} eEzsigntemplatesignatureTextvalidation
 */
EzsigntemplatesignatureResponse.prototype['eEzsigntemplatesignatureTextvalidation'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsigntemplatesignatureDependencyrequirement} eEzsigntemplatesignatureDependencyrequirement
 */
EzsigntemplatesignatureResponse.prototype['eEzsigntemplatesignatureDependencyrequirement'] = undefined;
/**
 * The string pattern to search for the positioning. **This is not a regexp**  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
 * @member {String} sEzsigntemplatesignaturePositioningpattern
 */
EzsigntemplatesignatureResponse.prototype['sEzsigntemplatesignaturePositioningpattern'] = undefined;
/**
 * The offset X  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
 * @member {Number} iEzsigntemplatesignaturePositioningoffsetx
 */
EzsigntemplatesignatureResponse.prototype['iEzsigntemplatesignaturePositioningoffsetx'] = undefined;
/**
 * The offset Y  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
 * @member {Number} iEzsigntemplatesignaturePositioningoffsety
 */
EzsigntemplatesignatureResponse.prototype['iEzsigntemplatesignaturePositioningoffsety'] = undefined;
/**
 * @member {module:eZmaxAPI/model/FieldEEzsigntemplatesignaturePositioningoccurence} eEzsigntemplatesignaturePositioningoccurence
 */
EzsigntemplatesignatureResponse.prototype['eEzsigntemplatesignaturePositioningoccurence'] = undefined;




export default EzsigntemplatesignatureResponseCompound;

