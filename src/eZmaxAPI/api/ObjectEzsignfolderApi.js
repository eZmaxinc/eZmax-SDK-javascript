/**
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommonResponseError from '../model/CommonResponseError';
import EzsignfolderArchiveV1Response from '../model/EzsignfolderArchiveV1Response';
import EzsignfolderBatchDownloadV1Request from '../model/EzsignfolderBatchDownloadV1Request';
import EzsignfolderCreateObjectV1Request from '../model/EzsignfolderCreateObjectV1Request';
import EzsignfolderCreateObjectV1Response from '../model/EzsignfolderCreateObjectV1Response';
import EzsignfolderCreateObjectV2Request from '../model/EzsignfolderCreateObjectV2Request';
import EzsignfolderCreateObjectV2Response from '../model/EzsignfolderCreateObjectV2Response';
import EzsignfolderDeleteObjectV1Response from '../model/EzsignfolderDeleteObjectV1Response';
import EzsignfolderDisposeEzsignfoldersV1Request from '../model/EzsignfolderDisposeEzsignfoldersV1Request';
import EzsignfolderDisposeEzsignfoldersV1Response from '../model/EzsignfolderDisposeEzsignfoldersV1Response';
import EzsignfolderDisposeV1Response from '../model/EzsignfolderDisposeV1Response';
import EzsignfolderEditObjectV1Request from '../model/EzsignfolderEditObjectV1Request';
import EzsignfolderEditObjectV1Response from '../model/EzsignfolderEditObjectV1Response';
import EzsignfolderGetActionableElementsV1Response from '../model/EzsignfolderGetActionableElementsV1Response';
import EzsignfolderGetCommunicationCountV1Response from '../model/EzsignfolderGetCommunicationCountV1Response';
import EzsignfolderGetCommunicationListV1Response from '../model/EzsignfolderGetCommunicationListV1Response';
import EzsignfolderGetEzsigndocumentsV1Response from '../model/EzsignfolderGetEzsigndocumentsV1Response';
import EzsignfolderGetEzsignfoldersignerassociationsV1Response from '../model/EzsignfolderGetEzsignfoldersignerassociationsV1Response';
import EzsignfolderGetEzsignsignaturesAutomaticV1Response from '../model/EzsignfolderGetEzsignsignaturesAutomaticV1Response';
import EzsignfolderGetFormsDataV1Response from '../model/EzsignfolderGetFormsDataV1Response';
import EzsignfolderGetListV1Response from '../model/EzsignfolderGetListV1Response';
import EzsignfolderGetObjectV1Response from '../model/EzsignfolderGetObjectV1Response';
import EzsignfolderGetObjectV2Response from '../model/EzsignfolderGetObjectV2Response';
import EzsignfolderImportEzsignfoldersignerassociationsV1Request from '../model/EzsignfolderImportEzsignfoldersignerassociationsV1Request';
import EzsignfolderImportEzsignfoldersignerassociationsV1Response from '../model/EzsignfolderImportEzsignfoldersignerassociationsV1Response';
import EzsignfolderImportEzsigntemplatepackageV1Request from '../model/EzsignfolderImportEzsigntemplatepackageV1Request';
import EzsignfolderImportEzsigntemplatepackageV1Response from '../model/EzsignfolderImportEzsigntemplatepackageV1Response';
import EzsignfolderReorderV1Request from '../model/EzsignfolderReorderV1Request';
import EzsignfolderReorderV1Response from '../model/EzsignfolderReorderV1Response';
import EzsignfolderSendV1Request from '../model/EzsignfolderSendV1Request';
import EzsignfolderSendV1Response from '../model/EzsignfolderSendV1Response';
import EzsignfolderSendV2Request from '../model/EzsignfolderSendV2Request';
import EzsignfolderSendV2Response from '../model/EzsignfolderSendV2Response';
import EzsignfolderSendV3Request from '../model/EzsignfolderSendV3Request';
import EzsignfolderSendV3Response from '../model/EzsignfolderSendV3Response';
import EzsignfolderUnsendV1Response from '../model/EzsignfolderUnsendV1Response';
import HeaderAcceptLanguage from '../model/HeaderAcceptLanguage';

/**
* ObjectEzsignfolder service.
* @module eZmaxAPI/api/ObjectEzsignfolderApi
* @version 1.2.0
*/
export default class ObjectEzsignfolderApi {

    /**
    * Constructs a new ObjectEzsignfolderApi. 
    * @alias module:eZmaxAPI/api/ObjectEzsignfolderApi
    * @class
    * @param {module:eZmaxAPI/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:eZmaxAPI/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ezsignfolderArchiveV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderArchiveV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderArchiveV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive the Ezsignfolder
     * 
     * @param {Number} pkiEzsignfolderID 
     * @param {Object.<String, Object>} body 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderArchiveV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderArchiveV1Response}
     */
    ezsignfolderArchiveV1(pkiEzsignfolderID, body, callback) {
      let postBody = body;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderArchiveV1");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ezsignfolderArchiveV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EzsignfolderArchiveV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderBatchDownloadV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderBatchDownloadV1Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download multiples files from an Ezsignfolder
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/model/EzsignfolderBatchDownloadV1Request} EzsignfolderBatchDownloadV1Request 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderBatchDownloadV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    ezsignfolderBatchDownloadV1(pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request, callback) {
      let postBody = EzsignfolderBatchDownloadV1Request;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderBatchDownloadV1");
      }
      // verify the required parameter 'EzsignfolderBatchDownloadV1Request' is set
      if (EzsignfolderBatchDownloadV1Request === undefined || EzsignfolderBatchDownloadV1Request === null) {
        throw new Error("Missing the required parameter 'EzsignfolderBatchDownloadV1Request' when calling ezsignfolderBatchDownloadV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/zip', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/batchDownload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderCreateObjectV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderCreateObjectV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderCreateObjectV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Ezsignfolder
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @param {Array.<module:eZmaxAPI/model/EzsignfolderCreateObjectV1Request>} EzsignfolderCreateObjectV1Request 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderCreateObjectV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderCreateObjectV1Response}
     */
    ezsignfolderCreateObjectV1(EzsignfolderCreateObjectV1Request, callback) {
      let postBody = EzsignfolderCreateObjectV1Request;
      // verify the required parameter 'EzsignfolderCreateObjectV1Request' is set
      if (EzsignfolderCreateObjectV1Request === undefined || EzsignfolderCreateObjectV1Request === null) {
        throw new Error("Missing the required parameter 'EzsignfolderCreateObjectV1Request' when calling ezsignfolderCreateObjectV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EzsignfolderCreateObjectV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderCreateObjectV2 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderCreateObjectV2Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderCreateObjectV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Ezsignfolder
     * The endpoint allows to create one or many elements at once.
     * @param {module:eZmaxAPI/model/EzsignfolderCreateObjectV2Request} EzsignfolderCreateObjectV2Request 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderCreateObjectV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderCreateObjectV2Response}
     */
    ezsignfolderCreateObjectV2(EzsignfolderCreateObjectV2Request, callback) {
      let postBody = EzsignfolderCreateObjectV2Request;
      // verify the required parameter 'EzsignfolderCreateObjectV2Request' is set
      if (EzsignfolderCreateObjectV2Request === undefined || EzsignfolderCreateObjectV2Request === null) {
        throw new Error("Missing the required parameter 'EzsignfolderCreateObjectV2Request' when calling ezsignfolderCreateObjectV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EzsignfolderCreateObjectV2Response;
      return this.apiClient.callApi(
        '/2/object/ezsignfolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderDeleteObjectV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderDeleteObjectV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderDeleteObjectV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing Ezsignfolder
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderDeleteObjectV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderDeleteObjectV1Response}
     */
    ezsignfolderDeleteObjectV1(pkiEzsignfolderID, callback) {
      let postBody = null;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderDeleteObjectV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EzsignfolderDeleteObjectV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderDisposeEzsignfoldersV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderDisposeEzsignfoldersV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderDisposeEzsignfoldersV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dispose Ezsignfolders
     * 
     * @param {module:eZmaxAPI/model/EzsignfolderDisposeEzsignfoldersV1Request} EzsignfolderDisposeEzsignfoldersV1Request 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderDisposeEzsignfoldersV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderDisposeEzsignfoldersV1Response}
     */
    ezsignfolderDisposeEzsignfoldersV1(EzsignfolderDisposeEzsignfoldersV1Request, callback) {
      let postBody = EzsignfolderDisposeEzsignfoldersV1Request;
      // verify the required parameter 'EzsignfolderDisposeEzsignfoldersV1Request' is set
      if (EzsignfolderDisposeEzsignfoldersV1Request === undefined || EzsignfolderDisposeEzsignfoldersV1Request === null) {
        throw new Error("Missing the required parameter 'EzsignfolderDisposeEzsignfoldersV1Request' when calling ezsignfolderDisposeEzsignfoldersV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EzsignfolderDisposeEzsignfoldersV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/disposeEzsignfolders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderDisposeV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderDisposeV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderDisposeV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dispose the Ezsignfolder
     * 
     * @param {Number} pkiEzsignfolderID 
     * @param {Object.<String, Object>} body 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderDisposeV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderDisposeV1Response}
     */
    ezsignfolderDisposeV1(pkiEzsignfolderID, body, callback) {
      let postBody = body;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderDisposeV1");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ezsignfolderDisposeV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EzsignfolderDisposeV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/dispose', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderEditObjectV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderEditObjectV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderEditObjectV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an existing Ezsignfolder
     * 
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/model/EzsignfolderEditObjectV1Request} EzsignfolderEditObjectV1Request 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderEditObjectV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderEditObjectV1Response}
     */
    ezsignfolderEditObjectV1(pkiEzsignfolderID, EzsignfolderEditObjectV1Request, callback) {
      let postBody = EzsignfolderEditObjectV1Request;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderEditObjectV1");
      }
      // verify the required parameter 'EzsignfolderEditObjectV1Request' is set
      if (EzsignfolderEditObjectV1Request === undefined || EzsignfolderEditObjectV1Request === null) {
        throw new Error("Missing the required parameter 'EzsignfolderEditObjectV1Request' when calling ezsignfolderEditObjectV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EzsignfolderEditObjectV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderGetActionableElementsV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetActionableElementsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderGetActionableElementsV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve actionable elements for the Ezsignfolder
     * Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetActionableElementsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderGetActionableElementsV1Response}
     */
    ezsignfolderGetActionableElementsV1(pkiEzsignfolderID, callback) {
      let postBody = null;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderGetActionableElementsV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EzsignfolderGetActionableElementsV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/getActionableElements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderGetCommunicationCountV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetCommunicationCountV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderGetCommunicationCountV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Communication count
     * 
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetCommunicationCountV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderGetCommunicationCountV1Response}
     */
    ezsignfolderGetCommunicationCountV1(pkiEzsignfolderID, callback) {
      let postBody = null;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderGetCommunicationCountV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EzsignfolderGetCommunicationCountV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationCount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderGetCommunicationListV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetCommunicationListV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderGetCommunicationListV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Communication list
     * 
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetCommunicationListV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderGetCommunicationListV1Response}
     */
    ezsignfolderGetCommunicationListV1(pkiEzsignfolderID, callback) {
      let postBody = null;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderGetCommunicationListV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EzsignfolderGetCommunicationListV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderGetEzsigndocumentsV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetEzsigndocumentsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderGetEzsigndocumentsV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an existing Ezsignfolder's Ezsigndocuments
     * 
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetEzsigndocumentsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderGetEzsigndocumentsV1Response}
     */
    ezsignfolderGetEzsigndocumentsV1(pkiEzsignfolderID, callback) {
      let postBody = null;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderGetEzsigndocumentsV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EzsignfolderGetEzsigndocumentsV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsigndocuments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderGetEzsignfoldersignerassociationsV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetEzsignfoldersignerassociationsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderGetEzsignfoldersignerassociationsV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an existing Ezsignfolder's Ezsignfoldersignerassociations
     * 
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetEzsignfoldersignerassociationsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderGetEzsignfoldersignerassociationsV1Response}
     */
    ezsignfolderGetEzsignfoldersignerassociationsV1(pkiEzsignfolderID, callback) {
      let postBody = null;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderGetEzsignfoldersignerassociationsV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EzsignfolderGetEzsignfoldersignerassociationsV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignfoldersignerassociations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderGetEzsignsignaturesAutomaticV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetEzsignsignaturesAutomaticV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderGetEzsignsignaturesAutomaticV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an existing Ezsignfolder's automatic Ezsignsignatures
     * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetEzsignsignaturesAutomaticV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderGetEzsignsignaturesAutomaticV1Response}
     */
    ezsignfolderGetEzsignsignaturesAutomaticV1(pkiEzsignfolderID, callback) {
      let postBody = null;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderGetEzsignsignaturesAutomaticV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EzsignfolderGetEzsignsignaturesAutomaticV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignsignaturesAutomatic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderGetFormsDataV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetFormsDataV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderGetFormsDataV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an existing Ezsignfolder's forms data
     * 
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetFormsDataV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderGetFormsDataV1Response}
     */
    ezsignfolderGetFormsDataV1(pkiEzsignfolderID, callback) {
      let postBody = null;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderGetFormsDataV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/zip'];
      let returnType = EzsignfolderGetFormsDataV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/getFormsData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderGetListV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetListV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderGetListV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Ezsignfolder list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfolderStep | Unsent<br>Sent<br>PartiallySigned<br>Expired<br>Completed<br>Archived<br>Disposed| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |  Advanced filters that can be used in query parameter *sFilter*:  | Variable | |---| | sContactFirstname | | sContactLastname | | sEzsigndocumentName |
     * @param {Object} opts Optional parameters
     * @param {module:eZmaxAPI/model/String} [eOrderBy] Specify how you want the results to be sorted
     * @param {Number} [iRowMax = 10000)] 
     * @param {Number} [iRowOffset = 0)] 
     * @param {module:eZmaxAPI/model/HeaderAcceptLanguage} [Accept_Language] 
     * @param {String} [sFilter] 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetListV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderGetListV1Response}
     */
    ezsignfolderGetListV1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'eOrderBy': opts['eOrderBy'],
        'iRowMax': opts['iRowMax'],
        'iRowOffset': opts['iRowOffset'],
        'sFilter': opts['sFilter']
      };
      let headerParams = {
        'Accept-Language': opts['Accept_Language']
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      let returnType = EzsignfolderGetListV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/getList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderGetObjectV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetObjectV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderGetObjectV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an existing Ezsignfolder
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetObjectV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderGetObjectV1Response}
     */
    ezsignfolderGetObjectV1(pkiEzsignfolderID, callback) {
      let postBody = null;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderGetObjectV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EzsignfolderGetObjectV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderGetObjectV2 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetObjectV2Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderGetObjectV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an existing Ezsignfolder
     * 
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderGetObjectV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderGetObjectV2Response}
     */
    ezsignfolderGetObjectV2(pkiEzsignfolderID, callback) {
      let postBody = null;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderGetObjectV2");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EzsignfolderGetObjectV2Response;
      return this.apiClient.callApi(
        '/2/object/ezsignfolder/{pkiEzsignfolderID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderImportEzsignfoldersignerassociationsV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderImportEzsignfoldersignerassociationsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderImportEzsignfoldersignerassociationsV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import an existing Ezsignfoldersignerassociation into this Ezsignfolder
     * 
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/model/EzsignfolderImportEzsignfoldersignerassociationsV1Request} EzsignfolderImportEzsignfoldersignerassociationsV1Request 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderImportEzsignfoldersignerassociationsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderImportEzsignfoldersignerassociationsV1Response}
     */
    ezsignfolderImportEzsignfoldersignerassociationsV1(pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request, callback) {
      let postBody = EzsignfolderImportEzsignfoldersignerassociationsV1Request;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderImportEzsignfoldersignerassociationsV1");
      }
      // verify the required parameter 'EzsignfolderImportEzsignfoldersignerassociationsV1Request' is set
      if (EzsignfolderImportEzsignfoldersignerassociationsV1Request === undefined || EzsignfolderImportEzsignfoldersignerassociationsV1Request === null) {
        throw new Error("Missing the required parameter 'EzsignfolderImportEzsignfoldersignerassociationsV1Request' when calling ezsignfolderImportEzsignfoldersignerassociationsV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EzsignfolderImportEzsignfoldersignerassociationsV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsignfoldersignerassociations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderImportEzsigntemplatepackageV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderImportEzsigntemplatepackageV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderImportEzsigntemplatepackageV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import an Ezsigntemplatepackage in the Ezsignfolder.
     * This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/model/EzsignfolderImportEzsigntemplatepackageV1Request} EzsignfolderImportEzsigntemplatepackageV1Request 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderImportEzsigntemplatepackageV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderImportEzsigntemplatepackageV1Response}
     */
    ezsignfolderImportEzsigntemplatepackageV1(pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request, callback) {
      let postBody = EzsignfolderImportEzsigntemplatepackageV1Request;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderImportEzsigntemplatepackageV1");
      }
      // verify the required parameter 'EzsignfolderImportEzsigntemplatepackageV1Request' is set
      if (EzsignfolderImportEzsigntemplatepackageV1Request === undefined || EzsignfolderImportEzsigntemplatepackageV1Request === null) {
        throw new Error("Missing the required parameter 'EzsignfolderImportEzsigntemplatepackageV1Request' when calling ezsignfolderImportEzsigntemplatepackageV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EzsignfolderImportEzsigntemplatepackageV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsigntemplatepackage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderReorderV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderReorderV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderReorderV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reorder Ezsigndocuments in the Ezsignfolder
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/model/EzsignfolderReorderV1Request} EzsignfolderReorderV1Request 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderReorderV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderReorderV1Response}
     */
    ezsignfolderReorderV1(pkiEzsignfolderID, EzsignfolderReorderV1Request, callback) {
      let postBody = EzsignfolderReorderV1Request;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderReorderV1");
      }
      // verify the required parameter 'EzsignfolderReorderV1Request' is set
      if (EzsignfolderReorderV1Request === undefined || EzsignfolderReorderV1Request === null) {
        throw new Error("Missing the required parameter 'EzsignfolderReorderV1Request' when calling ezsignfolderReorderV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EzsignfolderReorderV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/reorder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderSendV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderSendV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderSendV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send the Ezsignfolder to the signatories for signature
     * 
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/model/EzsignfolderSendV1Request} EzsignfolderSendV1Request 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderSendV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderSendV1Response}
     */
    ezsignfolderSendV1(pkiEzsignfolderID, EzsignfolderSendV1Request, callback) {
      let postBody = EzsignfolderSendV1Request;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderSendV1");
      }
      // verify the required parameter 'EzsignfolderSendV1Request' is set
      if (EzsignfolderSendV1Request === undefined || EzsignfolderSendV1Request === null) {
        throw new Error("Missing the required parameter 'EzsignfolderSendV1Request' when calling ezsignfolderSendV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EzsignfolderSendV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderSendV2 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderSendV2Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderSendV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send the Ezsignfolder to the signatories for signature
     * 
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/model/EzsignfolderSendV2Request} EzsignfolderSendV2Request 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderSendV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderSendV2Response}
     */
    ezsignfolderSendV2(pkiEzsignfolderID, EzsignfolderSendV2Request, callback) {
      let postBody = EzsignfolderSendV2Request;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderSendV2");
      }
      // verify the required parameter 'EzsignfolderSendV2Request' is set
      if (EzsignfolderSendV2Request === undefined || EzsignfolderSendV2Request === null) {
        throw new Error("Missing the required parameter 'EzsignfolderSendV2Request' when calling ezsignfolderSendV2");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EzsignfolderSendV2Response;
      return this.apiClient.callApi(
        '/2/object/ezsignfolder/{pkiEzsignfolderID}/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderSendV3 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderSendV3Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderSendV3Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send the Ezsignfolder to the signatories for signature
     * 
     * @param {Number} pkiEzsignfolderID 
     * @param {module:eZmaxAPI/model/EzsignfolderSendV3Request} EzsignfolderSendV3Request 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderSendV3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderSendV3Response}
     */
    ezsignfolderSendV3(pkiEzsignfolderID, EzsignfolderSendV3Request, callback) {
      let postBody = EzsignfolderSendV3Request;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderSendV3");
      }
      // verify the required parameter 'EzsignfolderSendV3Request' is set
      if (EzsignfolderSendV3Request === undefined || EzsignfolderSendV3Request === null) {
        throw new Error("Missing the required parameter 'EzsignfolderSendV3Request' when calling ezsignfolderSendV3");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EzsignfolderSendV3Response;
      return this.apiClient.callApi(
        '/3/object/ezsignfolder/{pkiEzsignfolderID}/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ezsignfolderUnsendV1 operation.
     * @callback module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderUnsendV1Callback
     * @param {String} error Error message, if any.
     * @param {module:eZmaxAPI/model/EzsignfolderUnsendV1Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsend the Ezsignfolder
     * Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \"Non-completed\" Ezsigndocuments will be lost.
     * @param {Number} pkiEzsignfolderID 
     * @param {Object.<String, Object>} body 
     * @param {module:eZmaxAPI/api/ObjectEzsignfolderApi~ezsignfolderUnsendV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:eZmaxAPI/model/EzsignfolderUnsendV1Response}
     */
    ezsignfolderUnsendV1(pkiEzsignfolderID, body, callback) {
      let postBody = body;
      // verify the required parameter 'pkiEzsignfolderID' is set
      if (pkiEzsignfolderID === undefined || pkiEzsignfolderID === null) {
        throw new Error("Missing the required parameter 'pkiEzsignfolderID' when calling ezsignfolderUnsendV1");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling ezsignfolderUnsendV1");
      }

      let pathParams = {
        'pkiEzsignfolderID': pkiEzsignfolderID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EzsignfolderUnsendV1Response;
      return this.apiClient.callApi(
        '/1/object/ezsignfolder/{pkiEzsignfolderID}/unsend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
